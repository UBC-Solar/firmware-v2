
Dashboard_Competition_Remake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080033d4  080033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800352c  0800352c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  0800352c  0800352c  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800352c  0800352c  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800352c  0800352c  0001352c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003530  08003530  00013530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08003534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200000b0  080035e4  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080035e4  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005966  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000175c  00000000  00000000  00025a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  000271a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000538  00000000  00000000  000277a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165c2  00000000  00000000  00027cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006fd5  00000000  00000000  0003e29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ec22  00000000  00000000  0004526f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c3e91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001854  00000000  00000000  000c3ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b0 	.word	0x200000b0
 800012c:	00000000 	.word	0x00000000
 8000130:	080033bc 	.word	0x080033bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b4 	.word	0x200000b4
 800014c:	080033bc 	.word	0x080033bc

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_fmul>:
 80003a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003ac:	bf1e      	ittt	ne
 80003ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b2:	ea92 0f0c 	teqne	r2, ip
 80003b6:	ea93 0f0c 	teqne	r3, ip
 80003ba:	d06f      	beq.n	800049c <__aeabi_fmul+0xf8>
 80003bc:	441a      	add	r2, r3
 80003be:	ea80 0c01 	eor.w	ip, r0, r1
 80003c2:	0240      	lsls	r0, r0, #9
 80003c4:	bf18      	it	ne
 80003c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ca:	d01e      	beq.n	800040a <__aeabi_fmul+0x66>
 80003cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d8:	fba0 3101 	umull	r3, r1, r0, r1
 80003dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e4:	bf3e      	ittt	cc
 80003e6:	0049      	lslcc	r1, r1, #1
 80003e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003ec:	005b      	lslcc	r3, r3, #1
 80003ee:	ea40 0001 	orr.w	r0, r0, r1
 80003f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003f6:	2afd      	cmp	r2, #253	; 0xfd
 80003f8:	d81d      	bhi.n	8000436 <__aeabi_fmul+0x92>
 80003fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000402:	bf08      	it	eq
 8000404:	f020 0001 	biceq.w	r0, r0, #1
 8000408:	4770      	bx	lr
 800040a:	f090 0f00 	teq	r0, #0
 800040e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000412:	bf08      	it	eq
 8000414:	0249      	lsleq	r1, r1, #9
 8000416:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041e:	3a7f      	subs	r2, #127	; 0x7f
 8000420:	bfc2      	ittt	gt
 8000422:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000426:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042a:	4770      	bxgt	lr
 800042c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	3a01      	subs	r2, #1
 8000436:	dc5d      	bgt.n	80004f4 <__aeabi_fmul+0x150>
 8000438:	f112 0f19 	cmn.w	r2, #25
 800043c:	bfdc      	itt	le
 800043e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000442:	4770      	bxle	lr
 8000444:	f1c2 0200 	rsb	r2, r2, #0
 8000448:	0041      	lsls	r1, r0, #1
 800044a:	fa21 f102 	lsr.w	r1, r1, r2
 800044e:	f1c2 0220 	rsb	r2, r2, #32
 8000452:	fa00 fc02 	lsl.w	ip, r0, r2
 8000456:	ea5f 0031 	movs.w	r0, r1, rrx
 800045a:	f140 0000 	adc.w	r0, r0, #0
 800045e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000462:	bf08      	it	eq
 8000464:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000468:	4770      	bx	lr
 800046a:	f092 0f00 	teq	r2, #0
 800046e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0040      	lsleq	r0, r0, #1
 8000476:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047a:	3a01      	subeq	r2, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xce>
 800047e:	ea40 000c 	orr.w	r0, r0, ip
 8000482:	f093 0f00 	teq	r3, #0
 8000486:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048a:	bf02      	ittt	eq
 800048c:	0049      	lsleq	r1, r1, #1
 800048e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000492:	3b01      	subeq	r3, #1
 8000494:	d0f9      	beq.n	800048a <__aeabi_fmul+0xe6>
 8000496:	ea41 010c 	orr.w	r1, r1, ip
 800049a:	e78f      	b.n	80003bc <__aeabi_fmul+0x18>
 800049c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	bf18      	it	ne
 80004a6:	ea93 0f0c 	teqne	r3, ip
 80004aa:	d00a      	beq.n	80004c2 <__aeabi_fmul+0x11e>
 80004ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b0:	bf18      	it	ne
 80004b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004b6:	d1d8      	bne.n	800046a <__aeabi_fmul+0xc6>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f090 0f00 	teq	r0, #0
 80004c6:	bf17      	itett	ne
 80004c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004cc:	4608      	moveq	r0, r1
 80004ce:	f091 0f00 	teqne	r1, #0
 80004d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004d6:	d014      	beq.n	8000502 <__aeabi_fmul+0x15e>
 80004d8:	ea92 0f0c 	teq	r2, ip
 80004dc:	d101      	bne.n	80004e2 <__aeabi_fmul+0x13e>
 80004de:	0242      	lsls	r2, r0, #9
 80004e0:	d10f      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004e2:	ea93 0f0c 	teq	r3, ip
 80004e6:	d103      	bne.n	80004f0 <__aeabi_fmul+0x14c>
 80004e8:	024b      	lsls	r3, r1, #9
 80004ea:	bf18      	it	ne
 80004ec:	4608      	movne	r0, r1
 80004ee:	d108      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004f0:	ea80 0001 	eor.w	r0, r0, r1
 80004f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000500:	4770      	bx	lr
 8000502:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000506:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050a:	4770      	bx	lr

0800050c <__aeabi_drsub>:
 800050c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e002      	b.n	8000518 <__adddf3>
 8000512:	bf00      	nop

08000514 <__aeabi_dsub>:
 8000514:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000518 <__adddf3>:
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800051e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000522:	ea94 0f05 	teq	r4, r5
 8000526:	bf08      	it	eq
 8000528:	ea90 0f02 	teqeq	r0, r2
 800052c:	bf1f      	itttt	ne
 800052e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000532:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000536:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800053a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053e:	f000 80e2 	beq.w	8000706 <__adddf3+0x1ee>
 8000542:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000546:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800054a:	bfb8      	it	lt
 800054c:	426d      	neglt	r5, r5
 800054e:	dd0c      	ble.n	800056a <__adddf3+0x52>
 8000550:	442c      	add	r4, r5
 8000552:	ea80 0202 	eor.w	r2, r0, r2
 8000556:	ea81 0303 	eor.w	r3, r1, r3
 800055a:	ea82 0000 	eor.w	r0, r2, r0
 800055e:	ea83 0101 	eor.w	r1, r3, r1
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	2d36      	cmp	r5, #54	; 0x36
 800056c:	bf88      	it	hi
 800056e:	bd30      	pophi	{r4, r5, pc}
 8000570:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000574:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000578:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800057c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000580:	d002      	beq.n	8000588 <__adddf3+0x70>
 8000582:	4240      	negs	r0, r0
 8000584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000588:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800058c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000590:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000594:	d002      	beq.n	800059c <__adddf3+0x84>
 8000596:	4252      	negs	r2, r2
 8000598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800059c:	ea94 0f05 	teq	r4, r5
 80005a0:	f000 80a7 	beq.w	80006f2 <__adddf3+0x1da>
 80005a4:	f1a4 0401 	sub.w	r4, r4, #1
 80005a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005ac:	db0d      	blt.n	80005ca <__adddf3+0xb2>
 80005ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005b2:	fa22 f205 	lsr.w	r2, r2, r5
 80005b6:	1880      	adds	r0, r0, r2
 80005b8:	f141 0100 	adc.w	r1, r1, #0
 80005bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c0:	1880      	adds	r0, r0, r2
 80005c2:	fa43 f305 	asr.w	r3, r3, r5
 80005c6:	4159      	adcs	r1, r3
 80005c8:	e00e      	b.n	80005e8 <__adddf3+0xd0>
 80005ca:	f1a5 0520 	sub.w	r5, r5, #32
 80005ce:	f10e 0e20 	add.w	lr, lr, #32
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d8:	bf28      	it	cs
 80005da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005de:	fa43 f305 	asr.w	r3, r3, r5
 80005e2:	18c0      	adds	r0, r0, r3
 80005e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	d507      	bpl.n	80005fe <__adddf3+0xe6>
 80005ee:	f04f 0e00 	mov.w	lr, #0
 80005f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80005fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000602:	d31b      	bcc.n	800063c <__adddf3+0x124>
 8000604:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000608:	d30c      	bcc.n	8000624 <__adddf3+0x10c>
 800060a:	0849      	lsrs	r1, r1, #1
 800060c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000610:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000614:	f104 0401 	add.w	r4, r4, #1
 8000618:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800061c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000620:	f080 809a 	bcs.w	8000758 <__adddf3+0x240>
 8000624:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800062e:	f150 0000 	adcs.w	r0, r0, #0
 8000632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000636:	ea41 0105 	orr.w	r1, r1, r5
 800063a:	bd30      	pop	{r4, r5, pc}
 800063c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000640:	4140      	adcs	r0, r0
 8000642:	eb41 0101 	adc.w	r1, r1, r1
 8000646:	3c01      	subs	r4, #1
 8000648:	bf28      	it	cs
 800064a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800064e:	d2e9      	bcs.n	8000624 <__adddf3+0x10c>
 8000650:	f091 0f00 	teq	r1, #0
 8000654:	bf04      	itt	eq
 8000656:	4601      	moveq	r1, r0
 8000658:	2000      	moveq	r0, #0
 800065a:	fab1 f381 	clz	r3, r1
 800065e:	bf08      	it	eq
 8000660:	3320      	addeq	r3, #32
 8000662:	f1a3 030b 	sub.w	r3, r3, #11
 8000666:	f1b3 0220 	subs.w	r2, r3, #32
 800066a:	da0c      	bge.n	8000686 <__adddf3+0x16e>
 800066c:	320c      	adds	r2, #12
 800066e:	dd08      	ble.n	8000682 <__adddf3+0x16a>
 8000670:	f102 0c14 	add.w	ip, r2, #20
 8000674:	f1c2 020c 	rsb	r2, r2, #12
 8000678:	fa01 f00c 	lsl.w	r0, r1, ip
 800067c:	fa21 f102 	lsr.w	r1, r1, r2
 8000680:	e00c      	b.n	800069c <__adddf3+0x184>
 8000682:	f102 0214 	add.w	r2, r2, #20
 8000686:	bfd8      	it	le
 8000688:	f1c2 0c20 	rsble	ip, r2, #32
 800068c:	fa01 f102 	lsl.w	r1, r1, r2
 8000690:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000694:	bfdc      	itt	le
 8000696:	ea41 010c 	orrle.w	r1, r1, ip
 800069a:	4090      	lslle	r0, r2
 800069c:	1ae4      	subs	r4, r4, r3
 800069e:	bfa2      	ittt	ge
 80006a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a4:	4329      	orrge	r1, r5
 80006a6:	bd30      	popge	{r4, r5, pc}
 80006a8:	ea6f 0404 	mvn.w	r4, r4
 80006ac:	3c1f      	subs	r4, #31
 80006ae:	da1c      	bge.n	80006ea <__adddf3+0x1d2>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc0e      	bgt.n	80006d2 <__adddf3+0x1ba>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0220 	rsb	r2, r4, #32
 80006bc:	fa20 f004 	lsr.w	r0, r0, r4
 80006c0:	fa01 f302 	lsl.w	r3, r1, r2
 80006c4:	ea40 0003 	orr.w	r0, r0, r3
 80006c8:	fa21 f304 	lsr.w	r3, r1, r4
 80006cc:	ea45 0103 	orr.w	r1, r5, r3
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	f1c4 040c 	rsb	r4, r4, #12
 80006d6:	f1c4 0220 	rsb	r2, r4, #32
 80006da:	fa20 f002 	lsr.w	r0, r0, r2
 80006de:	fa01 f304 	lsl.w	r3, r1, r4
 80006e2:	ea40 0003 	orr.w	r0, r0, r3
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	fa21 f004 	lsr.w	r0, r1, r4
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	f094 0f00 	teq	r4, #0
 80006f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006fa:	bf06      	itte	eq
 80006fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000700:	3401      	addeq	r4, #1
 8000702:	3d01      	subne	r5, #1
 8000704:	e74e      	b.n	80005a4 <__adddf3+0x8c>
 8000706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070a:	bf18      	it	ne
 800070c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000710:	d029      	beq.n	8000766 <__adddf3+0x24e>
 8000712:	ea94 0f05 	teq	r4, r5
 8000716:	bf08      	it	eq
 8000718:	ea90 0f02 	teqeq	r0, r2
 800071c:	d005      	beq.n	800072a <__adddf3+0x212>
 800071e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000722:	bf04      	itt	eq
 8000724:	4619      	moveq	r1, r3
 8000726:	4610      	moveq	r0, r2
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	ea91 0f03 	teq	r1, r3
 800072e:	bf1e      	ittt	ne
 8000730:	2100      	movne	r1, #0
 8000732:	2000      	movne	r0, #0
 8000734:	bd30      	popne	{r4, r5, pc}
 8000736:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800073a:	d105      	bne.n	8000748 <__adddf3+0x230>
 800073c:	0040      	lsls	r0, r0, #1
 800073e:	4149      	adcs	r1, r1
 8000740:	bf28      	it	cs
 8000742:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd30      	pop	{r4, r5, pc}
 8000748:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800074c:	bf3c      	itt	cc
 800074e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000752:	bd30      	popcc	{r4, r5, pc}
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800076a:	bf1a      	itte	ne
 800076c:	4619      	movne	r1, r3
 800076e:	4610      	movne	r0, r2
 8000770:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000774:	bf1c      	itt	ne
 8000776:	460b      	movne	r3, r1
 8000778:	4602      	movne	r2, r0
 800077a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800077e:	bf06      	itte	eq
 8000780:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000784:	ea91 0f03 	teqeq	r1, r3
 8000788:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	bf00      	nop

08000790 <__aeabi_ui2d>:
 8000790:	f090 0f00 	teq	r0, #0
 8000794:	bf04      	itt	eq
 8000796:	2100      	moveq	r1, #0
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a4:	f04f 0500 	mov.w	r5, #0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e750      	b.n	8000650 <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_i2d>:
 80007b0:	f090 0f00 	teq	r0, #0
 80007b4:	bf04      	itt	eq
 80007b6:	2100      	moveq	r1, #0
 80007b8:	4770      	bxeq	lr
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	f04f 0100 	mov.w	r1, #0
 80007d0:	e73e      	b.n	8000650 <__adddf3+0x138>
 80007d2:	bf00      	nop

080007d4 <__aeabi_f2d>:
 80007d4:	0042      	lsls	r2, r0, #1
 80007d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007da:	ea4f 0131 	mov.w	r1, r1, rrx
 80007de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007e2:	bf1f      	itttt	ne
 80007e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f0:	4770      	bxne	lr
 80007f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007f6:	bf08      	it	eq
 80007f8:	4770      	bxeq	lr
 80007fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007fe:	bf04      	itt	eq
 8000800:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000804:	4770      	bxeq	lr
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	f44f 7460 	mov.w	r4, #896	; 0x380
 800080c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	e71c      	b.n	8000650 <__adddf3+0x138>
 8000816:	bf00      	nop

08000818 <__aeabi_ul2d>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	b530      	push	{r4, r5, lr}
 8000822:	f04f 0500 	mov.w	r5, #0
 8000826:	e00a      	b.n	800083e <__aeabi_l2d+0x16>

08000828 <__aeabi_l2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000836:	d502      	bpl.n	800083e <__aeabi_l2d+0x16>
 8000838:	4240      	negs	r0, r0
 800083a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000842:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000846:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800084a:	f43f aed8 	beq.w	80005fe <__adddf3+0xe6>
 800084e:	f04f 0203 	mov.w	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000866:	f1c2 0320 	rsb	r3, r2, #32
 800086a:	fa00 fc03 	lsl.w	ip, r0, r3
 800086e:	fa20 f002 	lsr.w	r0, r0, r2
 8000872:	fa01 fe03 	lsl.w	lr, r1, r3
 8000876:	ea40 000e 	orr.w	r0, r0, lr
 800087a:	fa21 f102 	lsr.w	r1, r1, r2
 800087e:	4414      	add	r4, r2
 8000880:	e6bd      	b.n	80005fe <__adddf3+0xe6>
 8000882:	bf00      	nop

08000884 <__aeabi_d2f>:
 8000884:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000888:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800088c:	bf24      	itt	cs
 800088e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000892:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000896:	d90d      	bls.n	80008b4 <__aeabi_d2f+0x30>
 8000898:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800089c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008ac:	bf08      	it	eq
 80008ae:	f020 0001 	biceq.w	r0, r0, #1
 80008b2:	4770      	bx	lr
 80008b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008b8:	d121      	bne.n	80008fe <__aeabi_d2f+0x7a>
 80008ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008be:	bfbc      	itt	lt
 80008c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008c4:	4770      	bxlt	lr
 80008c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ce:	f1c2 0218 	rsb	r2, r2, #24
 80008d2:	f1c2 0c20 	rsb	ip, r2, #32
 80008d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008da:	fa20 f002 	lsr.w	r0, r0, r2
 80008de:	bf18      	it	ne
 80008e0:	f040 0001 	orrne.w	r0, r0, #1
 80008e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008f0:	ea40 000c 	orr.w	r0, r0, ip
 80008f4:	fa23 f302 	lsr.w	r3, r3, r2
 80008f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008fc:	e7cc      	b.n	8000898 <__aeabi_d2f+0x14>
 80008fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000902:	d107      	bne.n	8000914 <__aeabi_d2f+0x90>
 8000904:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000908:	bf1e      	ittt	ne
 800090a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800090e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000912:	4770      	bxne	lr
 8000914:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000918:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800091c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <__gesf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpsf2+0x4>
 800092a:	bf00      	nop

0800092c <__lesf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpsf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpsf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000940:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000944:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000948:	bf18      	it	ne
 800094a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094e:	d011      	beq.n	8000974 <__cmpsf2+0x40>
 8000950:	b001      	add	sp, #4
 8000952:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000956:	bf18      	it	ne
 8000958:	ea90 0f01 	teqne	r0, r1
 800095c:	bf58      	it	pl
 800095e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000962:	bf88      	it	hi
 8000964:	17c8      	asrhi	r0, r1, #31
 8000966:	bf38      	it	cc
 8000968:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800096c:	bf18      	it	ne
 800096e:	f040 0001 	orrne.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000978:	d102      	bne.n	8000980 <__cmpsf2+0x4c>
 800097a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800097e:	d105      	bne.n	800098c <__cmpsf2+0x58>
 8000980:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000984:	d1e4      	bne.n	8000950 <__cmpsf2+0x1c>
 8000986:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800098a:	d0e1      	beq.n	8000950 <__cmpsf2+0x1c>
 800098c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_cfrcmple>:
 8000994:	4684      	mov	ip, r0
 8000996:	4608      	mov	r0, r1
 8000998:	4661      	mov	r1, ip
 800099a:	e7ff      	b.n	800099c <__aeabi_cfcmpeq>

0800099c <__aeabi_cfcmpeq>:
 800099c:	b50f      	push	{r0, r1, r2, r3, lr}
 800099e:	f7ff ffc9 	bl	8000934 <__cmpsf2>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	bf48      	it	mi
 80009a6:	f110 0f00 	cmnmi.w	r0, #0
 80009aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080009ac <__aeabi_fcmpeq>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff fff4 	bl	800099c <__aeabi_cfcmpeq>
 80009b4:	bf0c      	ite	eq
 80009b6:	2001      	moveq	r0, #1
 80009b8:	2000      	movne	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_fcmplt>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffea 	bl	800099c <__aeabi_cfcmpeq>
 80009c8:	bf34      	ite	cc
 80009ca:	2001      	movcc	r0, #1
 80009cc:	2000      	movcs	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_fcmple>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffe0 	bl	800099c <__aeabi_cfcmpeq>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_fcmpge>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffd2 	bl	8000994 <__aeabi_cfrcmple>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_fcmpgt>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffc8 	bl	8000994 <__aeabi_cfrcmple>
 8000a04:	bf34      	ite	cc
 8000a06:	2001      	movcc	r0, #1
 8000a08:	2000      	movcs	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_f2iz>:
 8000a10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a18:	d30f      	bcc.n	8000a3a <__aeabi_f2iz+0x2a>
 8000a1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a22:	d90d      	bls.n	8000a40 <__aeabi_f2iz+0x30>
 8000a24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a30:	fa23 f002 	lsr.w	r0, r3, r2
 8000a34:	bf18      	it	ne
 8000a36:	4240      	negne	r0, r0
 8000a38:	4770      	bx	lr
 8000a3a:	f04f 0000 	mov.w	r0, #0
 8000a3e:	4770      	bx	lr
 8000a40:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a44:	d101      	bne.n	8000a4a <__aeabi_f2iz+0x3a>
 8000a46:	0242      	lsls	r2, r0, #9
 8000a48:	d105      	bne.n	8000a56 <__aeabi_f2iz+0x46>
 8000a4a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a4e:	bf08      	it	eq
 8000a50:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_f2uiz>:
 8000a5c:	0042      	lsls	r2, r0, #1
 8000a5e:	d20e      	bcs.n	8000a7e <__aeabi_f2uiz+0x22>
 8000a60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a64:	d30b      	bcc.n	8000a7e <__aeabi_f2uiz+0x22>
 8000a66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a6e:	d409      	bmi.n	8000a84 <__aeabi_f2uiz+0x28>
 8000a70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a78:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7c:	4770      	bx	lr
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	4770      	bx	lr
 8000a84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a88:	d101      	bne.n	8000a8e <__aeabi_f2uiz+0x32>
 8000a8a:	0242      	lsls	r2, r0, #9
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_f2uiz+0x38>
 8000a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <Delay>:
 * @Param counts: Number of milliseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void Delay(uint32_t counts)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint16_t j;
	for (i = 0; i < counts; i++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	e00c      	b.n	8000ac4 <Delay+0x28>
	{
		for(j = 0; j<16000; j++){}
 8000aaa:	2300      	movs	r3, #0
 8000aac:	817b      	strh	r3, [r7, #10]
 8000aae:	e002      	b.n	8000ab6 <Delay+0x1a>
 8000ab0:	897b      	ldrh	r3, [r7, #10]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	817b      	strh	r3, [r7, #10]
 8000ab6:	897b      	ldrh	r3, [r7, #10]
 8000ab8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000abc:	d3f8      	bcc.n	8000ab0 <Delay+0x14>
	for (i = 0; i < counts; i++)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d3ee      	bcc.n	8000aaa <Delay+0xe>
	}

}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <MicrosecondDelay>:
 * @Param counts: Number of microseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void MicrosecondDelay(uint32_t counts)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint8_t j;

	for (i = 0; i < counts; i++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	e00b      	b.n	8000afe <MicrosecondDelay+0x26>
	{
		for (j = 0; j<16; j++){}
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	72fb      	strb	r3, [r7, #11]
 8000aea:	e002      	b.n	8000af2 <MicrosecondDelay+0x1a>
 8000aec:	7afb      	ldrb	r3, [r7, #11]
 8000aee:	3301      	adds	r3, #1
 8000af0:	72fb      	strb	r3, [r7, #11]
 8000af2:	7afb      	ldrb	r3, [r7, #11]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d9f9      	bls.n	8000aec <MicrosecondDelay+0x14>
	for (i = 0; i < counts; i++)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	3301      	adds	r3, #1
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d3ef      	bcc.n	8000ae6 <MicrosecondDelay+0xe>
	}
}
 8000b06:	bf00      	nop
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr

08000b12 <MoveCursor>:
  * Moves cursor to the position on the screen determined by XY Coordinates
  * @Param x: x-coordinate
  * @Param y: y-coordinate
  */
void MoveCursor(uint8_t x, uint8_t y)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b084      	sub	sp, #16
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	460a      	mov	r2, r1
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	71bb      	strb	r3, [r7, #6]
     * Row major:
     * 0 1 2 3 4
     * 5 6 7 8 9
     *
     */
    uint16_t offset = 40*y + x;
 8000b22:	79bb      	ldrb	r3, [r7, #6]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	0092      	lsls	r2, r2, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	4413      	add	r3, r2
 8000b36:	81fb      	strh	r3, [r7, #14]

    TransmitCommand(0x46);
 8000b38:	2046      	movs	r0, #70	; 0x46
 8000b3a:	f000 fa47 	bl	8000fcc <TransmitCommand>
    // The CSRW register is 2 bytes long, so the first parameter
    // is the first byte and the second parameter is the second
    // byte
    TransmitCommandParameter(offset&0xFF);
 8000b3e:	89fb      	ldrh	r3, [r7, #14]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fa60 	bl	8001008 <TransmitCommandParameter>
    TransmitCommandParameter(offset >> 8);
 8000b48:	89fb      	ldrh	r3, [r7, #14]
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 fa59 	bl	8001008 <TransmitCommandParameter>
}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <ClearScreen>:

 /**
 * Purpose: Prints 1200 " " characters to clear the screen
 */
void ClearScreen()
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
    //Set cursor to start position
    MoveCursor(0, 0);
 8000b64:	2100      	movs	r1, #0
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff ffd3 	bl	8000b12 <MoveCursor>

    //replace all characters with spaces
    TransmitCommand(0x42);
 8000b6c:	2042      	movs	r0, #66	; 0x42
 8000b6e:	f000 fa2d 	bl	8000fcc <TransmitCommand>
    for (uint16_t i = 0; i < 1200; i++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	80fb      	strh	r3, [r7, #6]
 8000b76:	e005      	b.n	8000b84 <ClearScreen+0x26>
    {
        TransmitCommandParameter(0x20);
 8000b78:	2020      	movs	r0, #32
 8000b7a:	f000 fa45 	bl	8001008 <TransmitCommandParameter>
    for (uint16_t i = 0; i < 1200; i++)
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	3301      	adds	r3, #1
 8000b82:	80fb      	strh	r3, [r7, #6]
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000b8a:	d3f5      	bcc.n	8000b78 <ClearScreen+0x1a>
    }
    MoveCursor(0, 0);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff ffbf 	bl	8000b12 <MoveCursor>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <SaveCharacterToRAM>:
  * @Param bitmap: An array of the bitmap of that particular subcharacter
  * @Param offset: Some offset number
  * Returns: nothing
  */
void SaveCharacterToRAM(uint8_t* bitmap, uint8_t offset)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	70fb      	strb	r3, [r7, #3]
    TransmitCommand(0x46);
 8000ba8:	2046      	movs	r0, #70	; 0x46
 8000baa:	f000 fa0f 	bl	8000fcc <TransmitCommand>
    TransmitCommandParameter(offset);
 8000bae:	78fb      	ldrb	r3, [r7, #3]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fa29 	bl	8001008 <TransmitCommandParameter>
    TransmitCommandParameter(0x48);
 8000bb6:	2048      	movs	r0, #72	; 0x48
 8000bb8:	f000 fa26 	bl	8001008 <TransmitCommandParameter>
    TransmitCommand(0x42);
 8000bbc:	2042      	movs	r0, #66	; 0x42
 8000bbe:	f000 fa05 	bl	8000fcc <TransmitCommand>

    for (int i = 0; i < BYTEPERBITMAP; i++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	e009      	b.n	8000bdc <SaveCharacterToRAM+0x40>
    {
        TransmitCommandParameter(bitmap[i]);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fa19 	bl	8001008 <TransmitCommandParameter>
    for (int i = 0; i < BYTEPERBITMAP; i++)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	ddf2      	ble.n	8000bc8 <SaveCharacterToRAM+0x2c>
    }
}
 8000be2:	bf00      	nop
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <CharacterBitMaps>:

/**
 * Writes custom bitmaps to the LCD screen RAM
 */
void CharacterBitMaps(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0c2      	sub	sp, #264	; 0x108
 8000bf0:	af00      	add	r7, sp, #0
    uint8_t bitmap[16][BYTEPERBITMAP] = {{0x7E, 0x7E, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x7E},
 8000bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000bfa:	4a1a      	ldr	r2, [pc, #104]	; (8000c64 <CharacterBitMaps+0x78>)
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	4611      	mov	r1, r2
 8000c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c04:	461a      	mov	r2, r3
 8000c06:	f002 fbc3 	bl	8003390 <memcpy>
                                    {0x00, 0x62, 0x62, 0x62, 0x66, 0x66, 0x66, 0x6C, 0x6C, 0x6C, 0x70, 0x70, 0x70, 0x60, 0x60, 0x00},
                                    {0x00, 0x60, 0x60, 0x70, 0x70, 0x78, 0x6C, 0x6C, 0x6C, 0x66, 0x66, 0x66, 0x67, 0x67, 0x61, 0x00},
                                    {0x00, 0x46, 0x46, 0x46, 0x66, 0x66, 0x66, 0x36, 0x36, 0x36, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x00},
                                    {0xC0, 0xE0, 0x60, 0x30, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x04, 0x06, 0x06, 0x06, 0x07, 0x03},
                                    {0x03, 0x07, 0x06, 0x06, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0x60, 0xE0, 0xC0}};
    TransmitCommand(0x5C);
 8000c0a:	205c      	movs	r0, #92	; 0x5c
 8000c0c:	f000 f9de 	bl	8000fcc <TransmitCommand>
    TransmitCommandParameter(0x00);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f000 f9f9 	bl	8001008 <TransmitCommandParameter>
    TransmitCommandParameter(0x40);
 8000c16:	2040      	movs	r0, #64	; 0x40
 8000c18:	f000 f9f6 	bl	8001008 <TransmitCommandParameter>
    TransmitCommand(0x4C);
 8000c1c:	204c      	movs	r0, #76	; 0x4c
 8000c1e:	f000 f9d5 	bl	8000fcc <TransmitCommand>

    for (uint8_t i = 0; i < 16; i++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8000c28:	e011      	b.n	8000c4e <CharacterBitMaps+0x62>
    {
        SaveCharacterToRAM(bitmap[i], i*BYTEPERBITMAP);
 8000c2a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000c2e:	1d3a      	adds	r2, r7, #4
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	441a      	add	r2, r3
 8000c34:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4610      	mov	r0, r2
 8000c40:	f7ff ffac 	bl	8000b9c <SaveCharacterToRAM>
    for (uint8_t i = 0; i < 16; i++)
 8000c44:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000c48:	3301      	adds	r3, #1
 8000c4a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8000c4e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000c52:	2b0f      	cmp	r3, #15
 8000c54:	d9e9      	bls.n	8000c2a <CharacterBitMaps+0x3e>
    }
}
 8000c56:	bf00      	nop
 8000c58:	bf00      	nop
 8000c5a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	080033d4 	.word	0x080033d4

08000c68 <OutputString>:
 * @Param starting_x: x-coordinate to write the string to
 * @Param starting_y: y-coordinate to write the string to
 * Returns: nothing
 */
void OutputString(char Str[], uint8_t starting_x, uint8_t starting_y)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
 8000c74:	4613      	mov	r3, r2
 8000c76:	70bb      	strb	r3, [r7, #2]
                        {0x82,0x86,0x80,0x81}, {0x86,0x83,0x20,0x89}, {0x80,0x81,0x84,0x85}, {0x80,0x81,0x20,0x89}, //6 7 8 9
                        {0x20,0x20,0x20,0x20}, {0x20,0x20,0x2E,0x20}, {0x2E,0x20,0x2E,0x20}, {0x87,0x87,0x86,0x86}, //SPACE, ., :, -
                        };

    uint8_t temp;
    uint8_t x = starting_x;
 8000c78:	78fb      	ldrb	r3, [r7, #3]
 8000c7a:	73bb      	strb	r3, [r7, #14]

    TransmitCommand(0x4C);                                  //Set the cursor direction to "Right"
 8000c7c:	204c      	movs	r0, #76	; 0x4c
 8000c7e:	f000 f9a5 	bl	8000fcc <TransmitCommand>

    for (uint8_t c = 0; c < Str[c] != '\0'; c++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	737b      	strb	r3, [r7, #13]
 8000c86:	e069      	b.n	8000d5c <OutputString+0xf4>
    {
        MoveCursor(x, starting_y);
 8000c88:	78ba      	ldrb	r2, [r7, #2]
 8000c8a:	7bbb      	ldrb	r3, [r7, #14]
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff3f 	bl	8000b12 <MoveCursor>
        temp = (uint8_t) Str[c];
 8000c94:	7b7b      	ldrb	r3, [r7, #13]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	73fb      	strb	r3, [r7, #15]
        if (temp == 32)
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	2b20      	cmp	r3, #32
 8000ca2:	d102      	bne.n	8000caa <OutputString+0x42>
        {
            temp = 36;                  //if character is " "
 8000ca4:	2324      	movs	r3, #36	; 0x24
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e025      	b.n	8000cf6 <OutputString+0x8e>
        }
        else if (temp == 58)
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	2b3a      	cmp	r3, #58	; 0x3a
 8000cae:	d102      	bne.n	8000cb6 <OutputString+0x4e>
        {
            temp = 38;                  //if character is ":"
 8000cb0:	2326      	movs	r3, #38	; 0x26
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	e01f      	b.n	8000cf6 <OutputString+0x8e>
        }
        else if (temp == 46)
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8000cba:	d102      	bne.n	8000cc2 <OutputString+0x5a>
        {
            temp = 37;                  //if character is "."
 8000cbc:	2325      	movs	r3, #37	; 0x25
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e019      	b.n	8000cf6 <OutputString+0x8e>
        }
		else if (temp == 45)
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	2b2d      	cmp	r3, #45	; 0x2d
 8000cc6:	d102      	bne.n	8000cce <OutputString+0x66>
		{
			temp = 39;	                //if character is "-"
 8000cc8:	2327      	movs	r3, #39	; 0x27
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	e013      	b.n	8000cf6 <OutputString+0x8e>
		}
        else if (temp <= 57)
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	2b39      	cmp	r3, #57	; 0x39
 8000cd2:	d803      	bhi.n	8000cdc <OutputString+0x74>
        {
            temp -= OFFSET_NUMERIC;     //if character is between "0" and "9"
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	3b16      	subs	r3, #22
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e00c      	b.n	8000cf6 <OutputString+0x8e>
        }
        else if (temp <= 90)
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	2b5a      	cmp	r3, #90	; 0x5a
 8000ce0:	d803      	bhi.n	8000cea <OutputString+0x82>
        {
            temp -= OFFSET_CAPITAL;     //if character is between "A" and "Z"
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	3b41      	subs	r3, #65	; 0x41
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e005      	b.n	8000cf6 <OutputString+0x8e>
        }
        else if (temp <= 122)
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	2b7a      	cmp	r3, #122	; 0x7a
 8000cee:	d802      	bhi.n	8000cf6 <OutputString+0x8e>
        {
            temp -= OFFSET_LOWCASE;     //if character is between "a" and "z"
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	3b61      	subs	r3, #97	; 0x61
 8000cf4:	73fb      	strb	r3, [r7, #15]
        * |C D|
        *  - -
        * (4 subcharacters, in that order)     *
        ***********************************/

        TransmitCommand(0x42);                                  //print subcharacers A and B
 8000cf6:	2042      	movs	r0, #66	; 0x42
 8000cf8:	f000 f968 	bl	8000fcc <TransmitCommand>
        TransmitCommandParameter(LOOKUPTABLE[temp][0]);
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <OutputString+0x10c>)
 8000d00:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f97f 	bl	8001008 <TransmitCommandParameter>
        TransmitCommandParameter(LOOKUPTABLE[temp][1]);
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <OutputString+0x10c>)
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f977 	bl	8001008 <TransmitCommandParameter>

        MoveCursor(x, starting_y + 1);
 8000d1a:	78bb      	ldrb	r3, [r7, #2]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	7bbb      	ldrb	r3, [r7, #14]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fef4 	bl	8000b12 <MoveCursor>

        TransmitCommand(0x42);                                  //print the subcharacters C and D
 8000d2a:	2042      	movs	r0, #66	; 0x42
 8000d2c:	f000 f94e 	bl	8000fcc <TransmitCommand>
        TransmitCommandParameter(LOOKUPTABLE[temp][2]);
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <OutputString+0x10c>)
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	789b      	ldrb	r3, [r3, #2]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f964 	bl	8001008 <TransmitCommandParameter>
        TransmitCommandParameter(LOOKUPTABLE[temp][3]);
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <OutputString+0x10c>)
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	78db      	ldrb	r3, [r3, #3]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f95c 	bl	8001008 <TransmitCommandParameter>

        x += 3;
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	3303      	adds	r3, #3
 8000d54:	73bb      	strb	r3, [r7, #14]
    for (uint8_t c = 0; c < Str[c] != '\0'; c++)
 8000d56:	7b7b      	ldrb	r3, [r7, #13]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	737b      	strb	r3, [r7, #13]
 8000d5c:	7b7b      	ldrb	r3, [r7, #13]
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	7b7a      	ldrb	r2, [r7, #13]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d38e      	bcc.n	8000c88 <OutputString+0x20>
    }
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000

08000d78 <OutputPaddedInteger>:
 * @Param x: x-coordinate to write the character
 * @Param y: y-coordinate to write the character
 * Returns: nothing
 */
void OutputPaddedInteger(int32_t num, uint8_t dec, uint8_t x, uint8_t y)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4603      	mov	r3, r0
 8000d88:	70fb      	strb	r3, [r7, #3]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	70bb      	strb	r3, [r7, #2]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	707b      	strb	r3, [r7, #1]
	uint8_t i;
    char str[5] = {' ',' ',' ',' ','\0'};
 8000d92:	4a37      	ldr	r2, [pc, #220]	; (8000e70 <OutputPaddedInteger+0xf8>)
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d9c:	6018      	str	r0, [r3, #0]
 8000d9e:	3304      	adds	r3, #4
 8000da0:	7019      	strb	r1, [r3, #0]
	char decplace[2] = {' ', '\0'};
 8000da2:	2320      	movs	r3, #32
 8000da4:	81bb      	strh	r3, [r7, #12]

    if (num < 0)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	da05      	bge.n	8000db8 <OutputPaddedInteger+0x40>
    {
        str[0] = '-';
 8000dac:	232d      	movs	r3, #45	; 0x2d
 8000dae:	743b      	strb	r3, [r7, #16]
        num = -1 * num;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	425b      	negs	r3, r3
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	e004      	b.n	8000dc2 <OutputPaddedInteger+0x4a>
    }
	else if (num == 0)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <OutputPaddedInteger+0x4a>
	{
		str[3] = '0';
 8000dbe:	2330      	movs	r3, #48	; 0x30
 8000dc0:	74fb      	strb	r3, [r7, #19]
	}

	if (num > 999)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dc8:	db02      	blt.n	8000dd0 <OutputPaddedInteger+0x58>
	{
		num = 999;
 8000dca:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000dce:	607b      	str	r3, [r7, #4]
	}

    for (i = 3; num != 0; i--)
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	75fb      	strb	r3, [r7, #23]
 8000dd4:	e01d      	b.n	8000e12 <OutputPaddedInteger+0x9a>
    {
        str[i] = "0123456789"[num%10];
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <OutputPaddedInteger+0xfc>)
 8000dda:	fb83 2301 	smull	r2, r3, r3, r1
 8000dde:	109a      	asrs	r2, r3, #2
 8000de0:	17cb      	asrs	r3, r1, #31
 8000de2:	1ad2      	subs	r2, r2, r3
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	1aca      	subs	r2, r1, r3
 8000dee:	7dfb      	ldrb	r3, [r7, #23]
 8000df0:	4921      	ldr	r1, [pc, #132]	; (8000e78 <OutputPaddedInteger+0x100>)
 8000df2:	5c8a      	ldrb	r2, [r1, r2]
 8000df4:	3318      	adds	r3, #24
 8000df6:	443b      	add	r3, r7
 8000df8:	f803 2c08 	strb.w	r2, [r3, #-8]
        num = num/10;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <OutputPaddedInteger+0xfc>)
 8000e00:	fb82 1203 	smull	r1, r2, r2, r3
 8000e04:	1092      	asrs	r2, r2, #2
 8000e06:	17db      	asrs	r3, r3, #31
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	607b      	str	r3, [r7, #4]
    for (i = 3; num != 0; i--)
 8000e0c:	7dfb      	ldrb	r3, [r7, #23]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	75fb      	strb	r3, [r7, #23]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1de      	bne.n	8000dd6 <OutputPaddedInteger+0x5e>
    }

    OutputString(str, x, y);
 8000e18:	787a      	ldrb	r2, [r7, #1]
 8000e1a:	78b9      	ldrb	r1, [r7, #2]
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff21 	bl	8000c68 <OutputString>

    //Output 1 decimal place
    OutputString(".", x + 12, y);
 8000e26:	78bb      	ldrb	r3, [r7, #2]
 8000e28:	330c      	adds	r3, #12
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	787a      	ldrb	r2, [r7, #1]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4812      	ldr	r0, [pc, #72]	; (8000e7c <OutputPaddedInteger+0x104>)
 8000e32:	f7ff ff19 	bl	8000c68 <OutputString>

    dec = dec % 10;
 8000e36:	78fa      	ldrb	r2, [r7, #3]
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <OutputPaddedInteger+0x108>)
 8000e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e3e:	08d9      	lsrs	r1, r3, #3
 8000e40:	460b      	mov	r3, r1
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	70fb      	strb	r3, [r7, #3]

    decplace[0] = "0123456789"[dec];
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <OutputPaddedInteger+0x100>)
 8000e50:	5cd3      	ldrb	r3, [r2, r3]
 8000e52:	733b      	strb	r3, [r7, #12]
    OutputString(decplace, x + 15, y);
 8000e54:	78bb      	ldrb	r3, [r7, #2]
 8000e56:	330f      	adds	r3, #15
 8000e58:	b2d9      	uxtb	r1, r3
 8000e5a:	787a      	ldrb	r2, [r7, #1]
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff01 	bl	8000c68 <OutputString>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	080034d8 	.word	0x080034d8
 8000e74:	66666667 	.word	0x66666667
 8000e78:	080034e0 	.word	0x080034e0
 8000e7c:	080034d4 	.word	0x080034d4
 8000e80:	cccccccd 	.word	0xcccccccd

08000e84 <DisplayScreen>:

/**
 * Displays all information in a single screen
 */
void DisplayScreen(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	//Clears the screen
    ClearScreen();
 8000e88:	f7ff fe69 	bl	8000b5e <ClearScreen>

	//COLUMN 1

	//Battery Pack Current(BMS)
	OutputString("-000.0", BATTERY_CURRENT_XPOS, BATTERY_CURRENT_YPOS);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	482f      	ldr	r0, [pc, #188]	; (8000f50 <DisplayScreen+0xcc>)
 8000e92:	f7ff fee9 	bl	8000c68 <OutputString>
	OutputString("A", BATTERY_CURRENT_UNIT_XPOS, BATTERY_CURRENT_UNIT_YPOS);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2112      	movs	r1, #18
 8000e9a:	482e      	ldr	r0, [pc, #184]	; (8000f54 <DisplayScreen+0xd0>)
 8000e9c:	f7ff fee4 	bl	8000c68 <OutputString>

	//Battery Pack Voltage(BMS)
	OutputString("-000.0", BATTERY_VOLTAGE_XPOS, BATTERY_VOLTAGE_YPOS);
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	482a      	ldr	r0, [pc, #168]	; (8000f50 <DisplayScreen+0xcc>)
 8000ea6:	f7ff fedf 	bl	8000c68 <OutputString>
	OutputString("V", BATTERY_VOLTAGE_UNIT_XPOS, BATTERY_VOLTAGE_UNIT_YPOS);
 8000eaa:	2203      	movs	r2, #3
 8000eac:	2112      	movs	r1, #18
 8000eae:	482a      	ldr	r0, [pc, #168]	; (8000f58 <DisplayScreen+0xd4>)
 8000eb0:	f7ff feda 	bl	8000c68 <OutputString>

	//Motor Current(Motor Controller)
	OutputString("-000.0", MOTOR_CURRENT_XPOS, MOTOR_CURRENT_YPOS);
 8000eb4:	2206      	movs	r2, #6
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4825      	ldr	r0, [pc, #148]	; (8000f50 <DisplayScreen+0xcc>)
 8000eba:	f7ff fed5 	bl	8000c68 <OutputString>
	OutputString("A", MOTOR_CURRENT_UNIT_XPOS, MOTOR_CURRENT_UNIT_YPOS);
 8000ebe:	2206      	movs	r2, #6
 8000ec0:	2112      	movs	r1, #18
 8000ec2:	4824      	ldr	r0, [pc, #144]	; (8000f54 <DisplayScreen+0xd0>)
 8000ec4:	f7ff fed0 	bl	8000c68 <OutputString>

	//MDU Temperature(Motor Controller)
	OutputString("-000.0", MOTOR_TEMP_XPOS, MOTOR_TEMP_YPOS);
 8000ec8:	2209      	movs	r2, #9
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4820      	ldr	r0, [pc, #128]	; (8000f50 <DisplayScreen+0xcc>)
 8000ece:	f7ff fecb 	bl	8000c68 <OutputString>
	OutputString("C", MOTOR_TEMP_UNIT_XPOS, MOTOR_TEMP_UNIT_YPOS);
 8000ed2:	2209      	movs	r2, #9
 8000ed4:	2112      	movs	r1, #18
 8000ed6:	4821      	ldr	r0, [pc, #132]	; (8000f5c <DisplayScreen+0xd8>)
 8000ed8:	f7ff fec6 	bl	8000c68 <OutputString>

	//Vehicle Speed(Motor Controller)
	OutputString("-000.0", MOTOR_SPEED_XPOS, MOTOR_SPEED_YPOS);
 8000edc:	220c      	movs	r2, #12
 8000ede:	2100      	movs	r1, #0
 8000ee0:	481b      	ldr	r0, [pc, #108]	; (8000f50 <DisplayScreen+0xcc>)
 8000ee2:	f7ff fec1 	bl	8000c68 <OutputString>
	OutputString("KH", MOTOR_SPEED_UNIT_XPOS, MOTOR_SPEED_UNIT_YPOS);
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	2112      	movs	r1, #18
 8000eea:	481d      	ldr	r0, [pc, #116]	; (8000f60 <DisplayScreen+0xdc>)
 8000eec:	f7ff febc 	bl	8000c68 <OutputString>

	//COLUMN 2

	//Minimum cell voltage in the Battery(BMS)
	OutputString("-000.0", BATTERY_MINVOLT_XPOS, BATTERY_MINVOLT_YPOS);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2114      	movs	r1, #20
 8000ef4:	4816      	ldr	r0, [pc, #88]	; (8000f50 <DisplayScreen+0xcc>)
 8000ef6:	f7ff feb7 	bl	8000c68 <OutputString>
	OutputString("V", BATTERY_MINVOLT_UNIT_XPOS, BATTERY_MINVOLT_UNIT_YPOS);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2125      	movs	r1, #37	; 0x25
 8000efe:	4816      	ldr	r0, [pc, #88]	; (8000f58 <DisplayScreen+0xd4>)
 8000f00:	f7ff feb2 	bl	8000c68 <OutputString>

	//Maximum cell voltage in the Battery(BMS)
	OutputString("-000.0", BATTERY_MAXVOLT_XPOS, BATTERY_MAXVOLT_YPOS);
 8000f04:	2203      	movs	r2, #3
 8000f06:	2114      	movs	r1, #20
 8000f08:	4811      	ldr	r0, [pc, #68]	; (8000f50 <DisplayScreen+0xcc>)
 8000f0a:	f7ff fead 	bl	8000c68 <OutputString>
	OutputString("V", BATTERY_MAXVOLT_UNIT_XPOS, BATTERY_MAXVOLT_UNIT_YPOS);
 8000f0e:	2203      	movs	r2, #3
 8000f10:	2125      	movs	r1, #37	; 0x25
 8000f12:	4811      	ldr	r0, [pc, #68]	; (8000f58 <DisplayScreen+0xd4>)
 8000f14:	f7ff fea8 	bl	8000c68 <OutputString>

	//Supplemental Battery Voltage(BMS)
	OutputString("-000.0", BATTERY_SUPPVOLT_XPOS, BATTERY_SUPPVOLT_YPOS);
 8000f18:	2206      	movs	r2, #6
 8000f1a:	2114      	movs	r1, #20
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <DisplayScreen+0xcc>)
 8000f1e:	f7ff fea3 	bl	8000c68 <OutputString>
	OutputString("V", BATTERY_SUPPVOLT_UNIT_XPOS, BATTERY_SUPPVOLT_UNIT_YPOS);
 8000f22:	2206      	movs	r2, #6
 8000f24:	2125      	movs	r1, #37	; 0x25
 8000f26:	480c      	ldr	r0, [pc, #48]	; (8000f58 <DisplayScreen+0xd4>)
 8000f28:	f7ff fe9e 	bl	8000c68 <OutputString>

	//Maximum Temperature in the Battery(BMS)
	OutputString("-000.0", BATTERY_MAXTEMP_XPOS, BATTERY_MAXTEMP_YPOS);
 8000f2c:	2209      	movs	r2, #9
 8000f2e:	2114      	movs	r1, #20
 8000f30:	4807      	ldr	r0, [pc, #28]	; (8000f50 <DisplayScreen+0xcc>)
 8000f32:	f7ff fe99 	bl	8000c68 <OutputString>
	OutputString("C", BATTERY_MAXTEMP_UNIT_XPOS, BATTERY_MAXTEMP_UNIT_YPOS);
 8000f36:	2209      	movs	r2, #9
 8000f38:	2125      	movs	r1, #37	; 0x25
 8000f3a:	4808      	ldr	r0, [pc, #32]	; (8000f5c <DisplayScreen+0xd8>)
 8000f3c:	f7ff fe94 	bl	8000c68 <OutputString>

	//State of charge percentage
	OutputString("-000.0", BATTERY_CHARGE_XPOS, BATTERY_CHARGE_YPOS);
 8000f40:	220c      	movs	r2, #12
 8000f42:	2116      	movs	r1, #22
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <DisplayScreen+0xcc>)
 8000f46:	f7ff fe8f 	bl	8000c68 <OutputString>

	//DEPRECATED
	//State of Charge Bar in percentage (BMS)
	//SetBar(100, 100, CHARGE_BAR_YPOS);

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	080034ec 	.word	0x080034ec
 8000f54:	080034f4 	.word	0x080034f4
 8000f58:	080034f8 	.word	0x080034f8
 8000f5c:	080034fc 	.word	0x080034fc
 8000f60:	08003500 	.word	0x08003500

08000f64 <UpdateScreenParameter>:
 * @Param y: The y value of the parameter on the screen
 * @Param integerValue: The integer value of the parameter(Between -999 to 999)
 * @Param decValue: The decimal component of the parameter
 */
void UpdateScreenParameter(uint8_t x, uint8_t y, int32_t integerValue, uint8_t decValue)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	603a      	str	r2, [r7, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	460b      	mov	r3, r1
 8000f74:	71bb      	strb	r3, [r7, #6]
 8000f76:	4613      	mov	r3, r2
 8000f78:	717b      	strb	r3, [r7, #5]
	//Clear a 6 x 2 rectangle to erase the previous number
	OutputString("     ", x, y);
 8000f7a:	79ba      	ldrb	r2, [r7, #6]
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4806      	ldr	r0, [pc, #24]	; (8000f9c <UpdateScreenParameter+0x38>)
 8000f82:	f7ff fe71 	bl	8000c68 <OutputString>

	//Insert the new number
	OutputPaddedInteger(integerValue, decValue, x, y);
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	79fa      	ldrb	r2, [r7, #7]
 8000f8a:	7979      	ldrb	r1, [r7, #5]
 8000f8c:	6838      	ldr	r0, [r7, #0]
 8000f8e:	f7ff fef3 	bl	8000d78 <OutputPaddedInteger>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	08003504 	.word	0x08003504

08000fa0 <WriteByteToDataBus>:
 * Write a byte of data through C3 to C10(Data Buses)
 * @Param byte: 1 byte code
 * Returns: nothing
 */
void WriteByteToDataBus(uint8_t byte)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = byte << 3;
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	00da      	lsls	r2, r3, #3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <WriteByteToDataBus+0x28>)
 8000fb0:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = ((uint8_t) (~byte)) << 3;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	00da      	lsls	r2, r3, #3
 8000fba:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <WriteByteToDataBus+0x28>)
 8000fbc:	615a      	str	r2, [r3, #20]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	40011000 	.word	0x40011000

08000fcc <TransmitCommand>:
 * Writes a byte of command code through ports C3 to C10(Data Buses)
 * @Param command_code: 1 byte command code
 * returns: nothing
 */
void TransmitCommand(uint8_t command_code)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = 0x1UL << 0;					//SET C0 to HIGH
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <TransmitCommand+0x38>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = 0x1UL << 1;					//SET C1 to LOW
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <TransmitCommand+0x38>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(command_code);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ffdb 	bl	8000fa0 <WriteByteToDataBus>
	MicrosecondDelay(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff fd74 	bl	8000ad8 <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;					//SET C1 to HIGH
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <TransmitCommand+0x38>)
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff fd6e 	bl	8000ad8 <MicrosecondDelay>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40011000 	.word	0x40011000

08001008 <TransmitCommandParameter>:
 * Writes a byte of parameter code through ports C3 to C10(Data Buses)
 * @Param parameter_code: 1 byte parameter code
 * returns: nothing
 */
void TransmitCommandParameter(uint8_t parameter_code)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	GPIOC->BRR = 0x1UL << 0;					//SET C0 to LOW
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <TransmitCommandParameter+0x38>)
 8001014:	2201      	movs	r2, #1
 8001016:	615a      	str	r2, [r3, #20]
	GPIOC->BRR = 0x1UL << 1;					//SET C1 to LOW
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <TransmitCommandParameter+0x38>)
 800101a:	2202      	movs	r2, #2
 800101c:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(parameter_code);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ffbd 	bl	8000fa0 <WriteByteToDataBus>
	MicrosecondDelay(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f7ff fd56 	bl	8000ad8 <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;					//SET C1 to HIGH
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <TransmitCommandParameter+0x38>)
 800102e:	2202      	movs	r2, #2
 8001030:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f7ff fd50 	bl	8000ad8 <MicrosecondDelay>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40011000 	.word	0x40011000

08001044 <ScreenSetup>:

/**
 * Initialise screen settings and character bit maps
 */
void ScreenSetup(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
    // system setup (section 6-2-1 on raio datasheet)
    TransmitCommand(0x40);
 8001048:	2040      	movs	r0, #64	; 0x40
 800104a:	f7ff ffbf 	bl	8000fcc <TransmitCommand>
        Delay(5);
 800104e:	2005      	movs	r0, #5
 8001050:	f7ff fd24 	bl	8000a9c <Delay>
        // 0 0 IV 1 W/S M2 M1 M0
        TransmitCommandParameter(0x34);
 8001054:	2034      	movs	r0, #52	; 0x34
 8001056:	f7ff ffd7 	bl	8001008 <TransmitCommandParameter>
        // WF 0 0 0 0 FX FX FX
        TransmitCommandParameter(0x87);
 800105a:	2087      	movs	r0, #135	; 0x87
 800105c:	f7ff ffd4 	bl	8001008 <TransmitCommandParameter>
        // 0 0 0 0 FY FY FY FY
        TransmitCommandParameter(0xF);
 8001060:	200f      	movs	r0, #15
 8001062:	f7ff ffd1 	bl	8001008 <TransmitCommandParameter>
        // C/R (horizontal bytes per line)
        TransmitCommandParameter(39);
 8001066:	2027      	movs	r0, #39	; 0x27
 8001068:	f7ff ffce 	bl	8001008 <TransmitCommandParameter>
        // TC/R (horizontal bytes per line, incl blanking)
        TransmitCommandParameter(47);
 800106c:	202f      	movs	r0, #47	; 0x2f
 800106e:	f7ff ffcb 	bl	8001008 <TransmitCommandParameter>
        // L/F (lines per frame)
        TransmitCommandParameter(239);
 8001072:	20ef      	movs	r0, #239	; 0xef
 8001074:	f7ff ffc8 	bl	8001008 <TransmitCommandParameter>
        // APL (horizontal address range, LSB)
        TransmitCommandParameter(40);
 8001078:	2028      	movs	r0, #40	; 0x28
 800107a:	f7ff ffc5 	bl	8001008 <TransmitCommandParameter>
        // APH (horizontal address range, MSB)
        TransmitCommandParameter(0);
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff ffc2 	bl	8001008 <TransmitCommandParameter>

    // scroll parameters
    TransmitCommand(0x44);
 8001084:	2044      	movs	r0, #68	; 0x44
 8001086:	f7ff ffa1 	bl	8000fcc <TransmitCommand>
        TransmitCommandParameter(0); // SAD 1L
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff ffbc 	bl	8001008 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 1H
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff ffb9 	bl	8001008 <TransmitCommandParameter>
        TransmitCommandParameter(240); // SL1
 8001096:	20f0      	movs	r0, #240	; 0xf0
 8001098:	f7ff ffb6 	bl	8001008 <TransmitCommandParameter>
        TransmitCommandParameter(176); // SAD 2L
 800109c:	20b0      	movs	r0, #176	; 0xb0
 800109e:	f7ff ffb3 	bl	8001008 <TransmitCommandParameter>
        TransmitCommandParameter(4); // SAD 2H
 80010a2:	2004      	movs	r0, #4
 80010a4:	f7ff ffb0 	bl	8001008 <TransmitCommandParameter>
        TransmitCommandParameter(240); // SL2
 80010a8:	20f0      	movs	r0, #240	; 0xf0
 80010aa:	f7ff ffad 	bl	8001008 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 3L
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff ffaa 	bl	8001008 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 3H
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff ffa7 	bl	8001008 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 4
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff ffa4 	bl	8001008 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 4
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff ffa1 	bl	8001008 <TransmitCommandParameter>

	TransmitCommand(0x5B);
 80010c6:	205b      	movs	r0, #91	; 0x5b
 80010c8:	f7ff ff80 	bl	8000fcc <TransmitCommand>
		TransmitCommandParameter(0);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff ff9b 	bl	8001008 <TransmitCommandParameter>

    // set horizontal scroll position
    TransmitCommand(0x5A);
 80010d2:	205a      	movs	r0, #90	; 0x5a
 80010d4:	f7ff ff7a 	bl	8000fcc <TransmitCommand>
        TransmitCommandParameter(0);
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ff95 	bl	8001008 <TransmitCommandParameter>

    // set display overlay format
    TransmitCommand(0x5B);
 80010de:	205b      	movs	r0, #91	; 0x5b
 80010e0:	f7ff ff74 	bl	8000fcc <TransmitCommand>
        TransmitCommandParameter(0);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff ff8f 	bl	8001008 <TransmitCommandParameter>

    // turn off the display and configure cursor
    TransmitCommand(0x58);
 80010ea:	2058      	movs	r0, #88	; 0x58
 80010ec:	f7ff ff6e 	bl	8000fcc <TransmitCommand>
        TransmitCommandParameter(0x57);
 80010f0:	2057      	movs	r0, #87	; 0x57
 80010f2:	f7ff ff89 	bl	8001008 <TransmitCommandParameter>

    // set cursor size & type
    TransmitCommand(0x5D);
 80010f6:	205d      	movs	r0, #93	; 0x5d
 80010f8:	f7ff ff68 	bl	8000fcc <TransmitCommand>
        TransmitCommandParameter(4);
 80010fc:	2004      	movs	r0, #4
 80010fe:	f7ff ff83 	bl	8001008 <TransmitCommandParameter>
        TransmitCommandParameter(0x84);
 8001102:	2084      	movs	r0, #132	; 0x84
 8001104:	f7ff ff80 	bl	8001008 <TransmitCommandParameter>

    // set cursor direction
    TransmitCommand(0x4C);
 8001108:	204c      	movs	r0, #76	; 0x4c
 800110a:	f7ff ff5f 	bl	8000fcc <TransmitCommand>

    // turn on the display and configure cursor
    TransmitCommand(0x59);
 800110e:	2059      	movs	r0, #89	; 0x59
 8001110:	f7ff ff5c 	bl	8000fcc <TransmitCommand>
        TransmitCommandParameter(0x7);
 8001114:	2007      	movs	r0, #7
 8001116:	f7ff ff77 	bl	8001008 <TransmitCommandParameter>

    CharacterBitMaps();
 800111a:	f7ff fd67 	bl	8000bec <CharacterBitMaps>
	DisplayScreen();
 800111e:	f7ff feb1 	bl	8000e84 <DisplayScreen>

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <CanFilterSetup>:
 * @brief Initialize CAN node for sending and receiving
 * @param: CAN filter structure
 * @retval: nothing
 */
void CanFilterSetup()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	// Use mask and list mode to filter IDs from the CAN ID BOM

	// Filter for 0x500 and 0x600 IDs
    CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <CanFilterSetup+0x94>)
 800112e:	f24a 0220 	movw	r2, #40992	; 0xa020
 8001132:	601a      	str	r2, [r3, #0]
    CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 8001134:	4b21      	ldr	r3, [pc, #132]	; (80011bc <CanFilterSetup+0x94>)
 8001136:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 800113a:	609a      	str	r2, [r3, #8]

    CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <CanFilterSetup+0x94>)
 800113e:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 8001142:	605a      	str	r2, [r3, #4]
    CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <CanFilterSetup+0x94>)
 8001146:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800114a:	60da      	str	r2, [r3, #12]

    CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <CanFilterSetup+0x94>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
    CAN_filter0.FilterBank = (uint32_t) 0;
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <CanFilterSetup+0x94>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
    CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <CanFilterSetup+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
    CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <CanFilterSetup+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
    CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <CanFilterSetup+0x94>)
 8001166:	2201      	movs	r2, #1
 8001168:	621a      	str	r2, [r3, #32]

    // Remaining IDs filtered with list mode
    CAN_filter1.FilterIdHigh = (uint16_t) (0x502 << 5);
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <CanFilterSetup+0x98>)
 800116c:	f24a 0240 	movw	r2, #41024	; 0xa040
 8001170:	601a      	str	r2, [r3, #0]
    CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <CanFilterSetup+0x98>)
 8001174:	f248 0220 	movw	r2, #32800	; 0x8020
 8001178:	609a      	str	r2, [r3, #8]

    CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <CanFilterSetup+0x98>)
 800117c:	f248 0220 	movw	r2, #32800	; 0x8020
 8001180:	605a      	str	r2, [r3, #4]
    CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <CanFilterSetup+0x98>)
 8001184:	f248 0220 	movw	r2, #32800	; 0x8020
 8001188:	60da      	str	r2, [r3, #12]

    CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <CanFilterSetup+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
    CAN_filter1.FilterBank = (uint32_t) 1;
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <CanFilterSetup+0x98>)
 8001192:	2201      	movs	r2, #1
 8001194:	615a      	str	r2, [r3, #20]
    CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <CanFilterSetup+0x98>)
 8001198:	2201      	movs	r2, #1
 800119a:	619a      	str	r2, [r3, #24]
    CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <CanFilterSetup+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
    CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <CanFilterSetup+0x98>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	621a      	str	r2, [r3, #32]

	// Configure reception filters
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 80011a8:	4904      	ldr	r1, [pc, #16]	; (80011bc <CanFilterSetup+0x94>)
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <CanFilterSetup+0x9c>)
 80011ac:	f000 fdc9 	bl	8001d42 <HAL_CAN_ConfigFilter>
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 80011b0:	4903      	ldr	r1, [pc, #12]	; (80011c0 <CanFilterSetup+0x98>)
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <CanFilterSetup+0x9c>)
 80011b4:	f000 fdc5 	bl	8001d42 <HAL_CAN_ConfigFilter>

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200000f4 	.word	0x200000f4
 80011c0:	2000011c 	.word	0x2000011c
 80011c4:	200000cc 	.word	0x200000cc

080011c8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_CAN_Init+0x64>)
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <MX_CAN_Init+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_CAN_Init+0x64>)
 80011d4:	2204      	movs	r2, #4
 80011d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_CAN_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_CAN_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_CAN_Init+0x64>)
 80011e6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80011ea:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_CAN_Init+0x64>)
 80011ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011f2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <MX_CAN_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_CAN_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_CAN_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_CAN_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_CAN_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_CAN_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_CAN_Init+0x64>)
 800121a:	f000 fc97 	bl	8001b4c <HAL_CAN_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001224:	f000 fb9b 	bl	800195e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200000cc 	.word	0x200000cc
 8001230:	40006400 	.word	0x40006400

08001234 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <HAL_CAN_MspInit+0xc0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d14b      	bne.n	80012ec <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <HAL_CAN_MspInit+0xc4>)
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	4a27      	ldr	r2, [pc, #156]	; (80012f8 <HAL_CAN_MspInit+0xc4>)
 800125a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800125e:	61d3      	str	r3, [r2, #28]
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <HAL_CAN_MspInit+0xc4>)
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_CAN_MspInit+0xc4>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <HAL_CAN_MspInit+0xc4>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_CAN_MspInit+0xc4>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4818      	ldr	r0, [pc, #96]	; (80012fc <HAL_CAN_MspInit+0xc8>)
 800129a:	f001 fad1 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800129e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	4812      	ldr	r0, [pc, #72]	; (80012fc <HAL_CAN_MspInit+0xc8>)
 80012b4:	f001 fac4 	bl	8002840 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_CAN_MspInit+0xcc>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_CAN_MspInit+0xcc>)
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	2014      	movs	r0, #20
 80012e2:	f001 fa76 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80012e6:	2014      	movs	r0, #20
 80012e8:	f001 fa8f 	bl	800280a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80012ec:	bf00      	nop
 80012ee:	3728      	adds	r7, #40	; 0x28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40006400 	.word	0x40006400
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010c00 	.word	0x40010c00
 8001300:	40010000 	.word	0x40010000

08001304 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001318:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <MX_GPIO_Init+0xb4>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a26      	ldr	r2, [pc, #152]	; (80013b8 <MX_GPIO_Init+0xb4>)
 800131e:	f043 0310 	orr.w	r3, r3, #16
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <MX_GPIO_Init+0xb4>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <MX_GPIO_Init+0xb4>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a20      	ldr	r2, [pc, #128]	; (80013b8 <MX_GPIO_Init+0xb4>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <MX_GPIO_Init+0xb4>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_GPIO_Init+0xb4>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <MX_GPIO_Init+0xb4>)
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_GPIO_Init+0xb4>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 8001360:	2200      	movs	r2, #0
 8001362:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001366:	4815      	ldr	r0, [pc, #84]	; (80013bc <MX_GPIO_Init+0xb8>)
 8001368:	f001 fbee 	bl	8002b48 <HAL_GPIO_WritePin>
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_Pin|A6_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2160      	movs	r1, #96	; 0x60
 8001370:	4813      	ldr	r0, [pc, #76]	; (80013c0 <MX_GPIO_Init+0xbc>)
 8001372:	f001 fbe9 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 8001376:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800137a:	613b      	str	r3, [r7, #16]
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2302      	movs	r3, #2
 8001386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4619      	mov	r1, r3
 800138e:	480b      	ldr	r0, [pc, #44]	; (80013bc <MX_GPIO_Init+0xb8>)
 8001390:	f001 fa56 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin|A6_Pin;
 8001394:	2360      	movs	r3, #96	; 0x60
 8001396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4619      	mov	r1, r3
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_GPIO_Init+0xbc>)
 80013ac:	f001 fa48 	bl	8002840 <HAL_GPIO_Init>

}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40011000 	.word	0x40011000
 80013c0:	40010800 	.word	0x40010800

080013c4 <InitLEDs>:

/**
 * Initialize Dashboard LED lights
 */
void InitLEDs(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= 0x1UL << 2; 		//Initialize clock for GPIOA, if it hasn't been initialized yet
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <InitLEDs+0x68>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a17      	ldr	r2, [pc, #92]	; (800142c <InitLEDs+0x68>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0;
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <InitLEDs+0x6c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <InitLEDs+0x6c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
	GPIOA->CRH &= 0;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <InitLEDs+0x6c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <InitLEDs+0x6c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]
	GPIOA->CRL |= 0x33330033UL;			//Set pins A1, A4, A5, A6, A7 to be Push-Pull Output, 50Mhz
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <InitLEDs+0x6c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a10      	ldr	r2, [pc, #64]	; (8001430 <InitLEDs+0x6c>)
 80013ee:	f043 534c 	orr.w	r3, r3, #855638016	; 0x33000000
 80013f2:	f043 1333 	orr.w	r3, r3, #3342387	; 0x330033
 80013f6:	6013      	str	r3, [r2, #0]
	GPIOA->CRH |= 0x30033333UL;			//SetBar pins A8, A9, A10 to be Push-Pull Output, 50Mhz
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <InitLEDs+0x6c>)
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <InitLEDs+0x6c>)
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <InitLEDs+0x70>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]

	RCC->APB2ENR |= 0x1;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <InitLEDs+0x68>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a08      	ldr	r2, [pc, #32]	; (800142c <InitLEDs+0x68>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= 0x2 << 24;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <InitLEDs+0x74>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4a08      	ldr	r2, [pc, #32]	; (8001438 <InitLEDs+0x74>)
 8001416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800141a:	6053      	str	r3, [r2, #4]
	//GPIOA->BSRR = 0xFFFF;

	//GPIOA->BSRR = 0x1 << 11;

	GPIOA->BRR = 0xFFFF;
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <InitLEDs+0x6c>)
 800141e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001422:	615a      	str	r2, [r3, #20]

}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	40021000 	.word	0x40021000
 8001430:	40010800 	.word	0x40010800
 8001434:	30033333 	.word	0x30033333
 8001438:	40010000 	.word	0x40010000
 800143c:	00000000 	.word	0x00000000

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  int32_t tempInt32;
  uint8_t c = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	71fb      	strb	r3, [r7, #7]
  uint8_t d = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144e:	f000 fb1b 	bl	8001a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001452:	f000 fa43 	bl	80018dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001456:	f7ff ff55 	bl	8001304 <MX_GPIO_Init>
  MX_CAN_Init();
 800145a:	f7ff feb5 	bl	80011c8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  CanFilterSetup();
 800145e:	f7ff fe63 	bl	8001128 <CanFilterSetup>
  HAL_CAN_Start(&hcan);
 8001462:	488a      	ldr	r0, [pc, #552]	; (800168c <main+0x24c>)
 8001464:	f000 fd36 	bl	8001ed4 <HAL_CAN_Start>

	//Setup System Clock C
  	RCC->APB2ENR &= 0;
 8001468:	4b89      	ldr	r3, [pc, #548]	; (8001690 <main+0x250>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4b88      	ldr	r3, [pc, #544]	; (8001690 <main+0x250>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
	RCC->APB2ENR |= 0x1UL << 4;
 8001472:	4b87      	ldr	r3, [pc, #540]	; (8001690 <main+0x250>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4a86      	ldr	r2, [pc, #536]	; (8001690 <main+0x250>)
 8001478:	f043 0310 	orr.w	r3, r3, #16
 800147c:	6193      	str	r3, [r2, #24]

	//Setup Pins C5 - C12 as OUTPUT
	GPIOC->CRL &= 0;
 800147e:	4b85      	ldr	r3, [pc, #532]	; (8001694 <main+0x254>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4b84      	ldr	r3, [pc, #528]	; (8001694 <main+0x254>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
	GPIOC->CRH &= 0;
 8001488:	4b82      	ldr	r3, [pc, #520]	; (8001694 <main+0x254>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4b81      	ldr	r3, [pc, #516]	; (8001694 <main+0x254>)
 800148e:	2200      	movs	r2, #0
 8001490:	605a      	str	r2, [r3, #4]
	GPIOC->CRL |= 0x33333333UL; //Initialise C0 to C7
 8001492:	4b80      	ldr	r3, [pc, #512]	; (8001694 <main+0x254>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a7f      	ldr	r2, [pc, #508]	; (8001694 <main+0x254>)
 8001498:	f043 3333 	orr.w	r3, r3, #858993459	; 0x33333333
 800149c:	6013      	str	r3, [r2, #0]
	GPIOC->CRH |= 0x33333UL; //Initialise C8 to C12
 800149e:	4b7d      	ldr	r3, [pc, #500]	; (8001694 <main+0x254>)
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	497c      	ldr	r1, [pc, #496]	; (8001694 <main+0x254>)
 80014a4:	4b7c      	ldr	r3, [pc, #496]	; (8001698 <main+0x258>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]

	//Set Pin initial values
	GPIOC->BSRR = 0x1UL << 0;	 // C0 HIGH
 80014aa:	4b7a      	ldr	r3, [pc, #488]	; (8001694 <main+0x254>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR = 0x1UL << 1;	 // C1 HIGH
 80014b0:	4b78      	ldr	r3, [pc, #480]	; (8001694 <main+0x254>)
 80014b2:	2202      	movs	r2, #2
 80014b4:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR = 0x1UL << 2;	 // C2 HIGH
 80014b6:	4b77      	ldr	r3, [pc, #476]	; (8001694 <main+0x254>)
 80014b8:	2204      	movs	r2, #4
 80014ba:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = 0x1UL << 11;	 // C11 LOW
 80014bc:	4b75      	ldr	r3, [pc, #468]	; (8001694 <main+0x254>)
 80014be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014c2:	615a      	str	r2, [r3, #20]
	GPIOC->BSRR = 0x1UL << 12;   //C12 HIGH
 80014c4:	4b73      	ldr	r3, [pc, #460]	; (8001694 <main+0x254>)
 80014c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ca:	611a      	str	r2, [r3, #16]

  ScreenSetup();
 80014cc:	f7ff fdba 	bl	8001044 <ScreenSetup>

  InitLEDs();
 80014d0:	f7ff ff78 	bl	80013c4 <InitLEDs>
//		HAL_Delay(1000);
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
//		HAL_Delay(1000);

	// Check if message is available
	if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0)
 80014d4:	2100      	movs	r1, #0
 80014d6:	486d      	ldr	r0, [pc, #436]	; (800168c <main+0x24c>)
 80014d8:	f000 fe51 	bl	800217e <HAL_CAN_GetRxFifoFillLevel>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 81ea 	beq.w	80018b8 <main+0x478>
	{
		// Populate CAN header and data variables
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &CAN_rx_header, CAN_rx_data);
 80014e4:	4b6d      	ldr	r3, [pc, #436]	; (800169c <main+0x25c>)
 80014e6:	4a6e      	ldr	r2, [pc, #440]	; (80016a0 <main+0x260>)
 80014e8:	2100      	movs	r1, #0
 80014ea:	4868      	ldr	r0, [pc, #416]	; (800168c <main+0x24c>)
 80014ec:	f000 fd36 	bl	8001f5c <HAL_CAN_GetRxMessage>


		switch(CAN_rx_header.StdId)
 80014f0:	4b6b      	ldr	r3, [pc, #428]	; (80016a0 <main+0x260>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f240 623e 	movw	r2, #1598	; 0x63e
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d8eb      	bhi.n	80014d4 <main+0x94>
 80014fc:	f240 6222 	movw	r2, #1570	; 0x622
 8001500:	4293      	cmp	r3, r2
 8001502:	d213      	bcs.n	800152c <main+0xec>
 8001504:	f240 520b 	movw	r2, #1291	; 0x50b
 8001508:	4293      	cmp	r3, r2
 800150a:	f000 812a 	beq.w	8001762 <main+0x322>
 800150e:	f240 520b 	movw	r2, #1291	; 0x50b
 8001512:	4293      	cmp	r3, r2
 8001514:	d8de      	bhi.n	80014d4 <main+0x94>
 8001516:	f240 5202 	movw	r2, #1282	; 0x502
 800151a:	4293      	cmp	r3, r2
 800151c:	f000 8164 	beq.w	80017e8 <main+0x3a8>
 8001520:	f240 5203 	movw	r2, #1283	; 0x503
 8001524:	4293      	cmp	r3, r2
 8001526:	f000 80bf 	beq.w	80016a8 <main+0x268>
 800152a:	e1c6      	b.n	80018ba <main+0x47a>
 800152c:	f2a3 6322 	subw	r3, r3, #1570	; 0x622
 8001530:	2b1c      	cmp	r3, #28
 8001532:	d8cf      	bhi.n	80014d4 <main+0x94>
 8001534:	a201      	add	r2, pc, #4	; (adr r2, 800153c <main+0xfc>)
 8001536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153a:	bf00      	nop
 800153c:	0800187d 	.word	0x0800187d
 8001540:	080015b1 	.word	0x080015b1
 8001544:	08001637 	.word	0x08001637
 8001548:	080014d5 	.word	0x080014d5
 800154c:	0800166b 	.word	0x0800166b
 8001550:	08001657 	.word	0x08001657
 8001554:	080014d5 	.word	0x080014d5
 8001558:	080014d5 	.word	0x080014d5
 800155c:	080014d5 	.word	0x080014d5
 8001560:	080014d5 	.word	0x080014d5
 8001564:	080014d5 	.word	0x080014d5
 8001568:	080014d5 	.word	0x080014d5
 800156c:	080014d5 	.word	0x080014d5
 8001570:	080014d5 	.word	0x080014d5
 8001574:	080014d5 	.word	0x080014d5
 8001578:	080014d5 	.word	0x080014d5
 800157c:	080014d5 	.word	0x080014d5
 8001580:	080014d5 	.word	0x080014d5
 8001584:	080014d5 	.word	0x080014d5
 8001588:	080014d5 	.word	0x080014d5
 800158c:	080014d5 	.word	0x080014d5
 8001590:	080014d5 	.word	0x080014d5
 8001594:	080014d5 	.word	0x080014d5
 8001598:	080014d5 	.word	0x080014d5
 800159c:	080014d5 	.word	0x080014d5
 80015a0:	080014d5 	.word	0x080014d5
 80015a4:	080014d5 	.word	0x080014d5
 80015a8:	080014d5 	.word	0x080014d5
 80015ac:	0800167f 	.word	0x0800167f

			//Battery: Pack Voltage(For LCD Display). Values are unsigned 16-bit integers in Volts (V). Period: 1s
			//Battery: Minimum Cell Voltage (For LCD Display). Values are unsigned 8-bit integers in 100mv intervals. Period: 1s
			//Battery: Maximum Cell Voltage (For LCD Display). Values are unsigned 8-bit integers in 100mv intervals. Period: 1s
			case BATT_BASE + 3:
				UpdateScreenParameter(BATTERY_VOLTAGE_XPOS, BATTERY_VOLTAGE_YPOS, (uint16_t) (CAN_rx_data[1] | CAN_rx_data[0] << 8), 0);
 80015b0:	4b3a      	ldr	r3, [pc, #232]	; (800169c <main+0x25c>)
 80015b2:	785b      	ldrb	r3, [r3, #1]
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	4b39      	ldr	r3, [pc, #228]	; (800169c <main+0x25c>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21b      	sxth	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	2300      	movs	r3, #0
 80015c8:	2103      	movs	r1, #3
 80015ca:	2000      	movs	r0, #0
 80015cc:	f7ff fcca 	bl	8000f64 <UpdateScreenParameter>

				UpdateScreenParameter(BATTERY_MINVOLT_XPOS, BATTERY_MINVOLT_YPOS, (uint8_t) CAN_rx_data[2] / 10, (uint8_t) CAN_rx_data[2] % 10);
 80015d0:	4b32      	ldr	r3, [pc, #200]	; (800169c <main+0x25c>)
 80015d2:	789b      	ldrb	r3, [r3, #2]
 80015d4:	4a33      	ldr	r2, [pc, #204]	; (80016a4 <main+0x264>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	08db      	lsrs	r3, r3, #3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	4b2e      	ldr	r3, [pc, #184]	; (800169c <main+0x25c>)
 80015e2:	789a      	ldrb	r2, [r3, #2]
 80015e4:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <main+0x264>)
 80015e6:	fba3 1302 	umull	r1, r3, r3, r2
 80015ea:	08d9      	lsrs	r1, r3, #3
 80015ec:	460b      	mov	r3, r1
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4602      	mov	r2, r0
 80015fa:	2100      	movs	r1, #0
 80015fc:	2014      	movs	r0, #20
 80015fe:	f7ff fcb1 	bl	8000f64 <UpdateScreenParameter>

				UpdateScreenParameter(BATTERY_MAXVOLT_XPOS, BATTERY_MAXVOLT_YPOS, (uint8_t) CAN_rx_data[4] / 10, (uint8_t) CAN_rx_data[4] % 10);
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <main+0x25c>)
 8001604:	791b      	ldrb	r3, [r3, #4]
 8001606:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <main+0x264>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	08db      	lsrs	r3, r3, #3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	4618      	mov	r0, r3
 8001612:	4b22      	ldr	r3, [pc, #136]	; (800169c <main+0x25c>)
 8001614:	791a      	ldrb	r2, [r3, #4]
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <main+0x264>)
 8001618:	fba3 1302 	umull	r1, r3, r3, r2
 800161c:	08d9      	lsrs	r1, r3, #3
 800161e:	460b      	mov	r3, r1
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4602      	mov	r2, r0
 800162c:	2103      	movs	r1, #3
 800162e:	2014      	movs	r0, #20
 8001630:	f7ff fc98 	bl	8000f64 <UpdateScreenParameter>

				//XBeeTransmitCan(&CAN_rx_msg);
				break;
 8001634:	e141      	b.n	80018ba <main+0x47a>

			//Battery: Pack Current(For LCD Display). Values are signed 16-bit integers in Amperes (A). Period: 1s
			case BATT_BASE + 4:

				UpdateScreenParameter(BATTERY_CURRENT_XPOS, BATTERY_CURRENT_YPOS, (int16_t) (CAN_rx_data[1] | CAN_rx_data[0] << 8), 0);
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <main+0x25c>)
 8001638:	785b      	ldrb	r3, [r3, #1]
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <main+0x25c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	b21b      	sxth	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b21b      	sxth	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	2300      	movs	r3, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff fc88 	bl	8000f64 <UpdateScreenParameter>

				//XBeeTransmitCan(&CAN_rx_msg);
				break;
 8001654:	e131      	b.n	80018ba <main+0x47a>

			//Battery: Pack Maximum Temperature (For LCD Display). Values are signed 8-bit integers in Celsius (C). Period: 1s
			case BATT_BASE + 7:
				UpdateScreenParameter(BATTERY_MAXTEMP_XPOS, BATTERY_MAXTEMP_YPOS, (int8_t) CAN_rx_data[4], 0);
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <main+0x25c>)
 8001658:	791b      	ldrb	r3, [r3, #4]
 800165a:	b25b      	sxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	2300      	movs	r3, #0
 8001660:	2109      	movs	r1, #9
 8001662:	2014      	movs	r0, #20
 8001664:	f7ff fc7e 	bl	8000f64 <UpdateScreenParameter>

				//XBeeTransmitCan(&CAN_rx_msg);
				break;
 8001668:	e127      	b.n	80018ba <main+0x47a>

			//Battery: State of Charge (For LCD Display). Values are unsigned 8-bit integers. Period: 1s
			case BATT_BASE + 6:

				UpdateScreenParameter(BATTERY_CHARGE_XPOS, BATTERY_CHARGE_YPOS, (int8_t) CAN_rx_data[0], 0);
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <main+0x25c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b25b      	sxtb	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	2300      	movs	r3, #0
 8001674:	210c      	movs	r1, #12
 8001676:	2016      	movs	r0, #22
 8001678:	f7ff fc74 	bl	8000f64 <UpdateScreenParameter>

				//This one is different; it is used to set a battery percentage bar
				//SetBar(0xFF & CAN_rx_data[0], 100, CHARGE_BAR_YPOS);

				//XBeeTransmitCan(&CAN_rx_msg);
				break;
 800167c:	e11d      	b.n	80018ba <main+0x47a>

			//NOT FULLY IMPLEMENTED
			case BATT_BASE + 30:

				UpdateScreenParameter(BATTERY_SUPPVOLT_XPOS, BATTERY_SUPPVOLT_YPOS, 0, 0);
 800167e:	2300      	movs	r3, #0
 8001680:	2200      	movs	r2, #0
 8001682:	2106      	movs	r1, #6
 8001684:	2014      	movs	r0, #20
 8001686:	f7ff fc6d 	bl	8000f64 <UpdateScreenParameter>

				break;
 800168a:	e116      	b.n	80018ba <main+0x47a>
 800168c:	200000cc 	.word	0x200000cc
 8001690:	40021000 	.word	0x40021000
 8001694:	40011000 	.word	0x40011000
 8001698:	00033333 	.word	0x00033333
 800169c:	20000160 	.word	0x20000160
 80016a0:	20000144 	.word	0x20000144
 80016a4:	cccccccd 	.word	0xcccccccd

			//Motor Drive Unit: Speed (For LCD Display). Values are IEEE 32-bit floating point in m/s. Period: 200ms
			case MC_BASE + 3:

				u.chars[0] = CAN_rx_data[4];
 80016a8:	4b87      	ldr	r3, [pc, #540]	; (80018c8 <main+0x488>)
 80016aa:	791a      	ldrb	r2, [r3, #4]
 80016ac:	4b87      	ldr	r3, [pc, #540]	; (80018cc <main+0x48c>)
 80016ae:	701a      	strb	r2, [r3, #0]
				u.chars[1] = CAN_rx_data[5];
 80016b0:	4b85      	ldr	r3, [pc, #532]	; (80018c8 <main+0x488>)
 80016b2:	795a      	ldrb	r2, [r3, #5]
 80016b4:	4b85      	ldr	r3, [pc, #532]	; (80018cc <main+0x48c>)
 80016b6:	705a      	strb	r2, [r3, #1]
				u.chars[2] = CAN_rx_data[6];
 80016b8:	4b83      	ldr	r3, [pc, #524]	; (80018c8 <main+0x488>)
 80016ba:	799a      	ldrb	r2, [r3, #6]
 80016bc:	4b83      	ldr	r3, [pc, #524]	; (80018cc <main+0x48c>)
 80016be:	709a      	strb	r2, [r3, #2]
				u.chars[3] = CAN_rx_data[7];
 80016c0:	4b81      	ldr	r3, [pc, #516]	; (80018c8 <main+0x488>)
 80016c2:	79da      	ldrb	r2, [r3, #7]
 80016c4:	4b81      	ldr	r3, [pc, #516]	; (80018cc <main+0x48c>)
 80016c6:	70da      	strb	r2, [r3, #3]

				u.float_var = u.float_var * -3.6;
 80016c8:	4b80      	ldr	r3, [pc, #512]	; (80018cc <main+0x48c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff f881 	bl	80007d4 <__aeabi_f2d>
 80016d2:	a37b      	add	r3, pc, #492	; (adr r3, 80018c0 <main+0x480>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7fe fd3a 	bl	8000150 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff f8ce 	bl	8000884 <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a78      	ldr	r2, [pc, #480]	; (80018cc <main+0x48c>)
 80016ec:	6013      	str	r3, [r2, #0]
				tempInt32 = (int32_t) u.float_var;
 80016ee:	4b77      	ldr	r3, [pc, #476]	; (80018cc <main+0x48c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff f98c 	bl	8000a10 <__aeabi_f2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	603b      	str	r3, [r7, #0]

				if (u.float_var < 0)
 80016fc:	4b73      	ldr	r3, [pc, #460]	; (80018cc <main+0x48c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f04f 0100 	mov.w	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff f95b 	bl	80009c0 <__aeabi_fcmplt>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <main+0x2dc>
				{
					u.float_var = u.float_var * -1;
 8001710:	4b6e      	ldr	r3, [pc, #440]	; (80018cc <main+0x48c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001718:	4a6c      	ldr	r2, [pc, #432]	; (80018cc <main+0x48c>)
 800171a:	6013      	str	r3, [r2, #0]
				}

				UpdateScreenParameter(MOTOR_SPEED_XPOS, MOTOR_SPEED_YPOS, tempInt32, ((uint32_t) (u.float_var * 10)) % 10 );
 800171c:	4b6b      	ldr	r3, [pc, #428]	; (80018cc <main+0x48c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	496b      	ldr	r1, [pc, #428]	; (80018d0 <main+0x490>)
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fe3e 	bl	80003a4 <__aeabi_fmul>
 8001728:	4603      	mov	r3, r0
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff f996 	bl	8000a5c <__aeabi_f2uiz>
 8001730:	4601      	mov	r1, r0
 8001732:	4b68      	ldr	r3, [pc, #416]	; (80018d4 <main+0x494>)
 8001734:	fba3 2301 	umull	r2, r3, r3, r1
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	1aca      	subs	r2, r1, r3
 8001744:	b2d3      	uxtb	r3, r2
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	210c      	movs	r1, #12
 800174a:	2000      	movs	r0, #0
 800174c:	f7ff fc0a 	bl	8000f64 <UpdateScreenParameter>

				//send the CAN message once every second
				if (d == 5)
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	2b05      	cmp	r3, #5
 8001754:	d101      	bne.n	800175a <main+0x31a>
				{
					//XBeeTransmitCan(&CAN_rx_msg);
					d = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	71bb      	strb	r3, [r7, #6]
				}
				d++;
 800175a:	79bb      	ldrb	r3, [r7, #6]
 800175c:	3301      	adds	r3, #1
 800175e:	71bb      	strb	r3, [r7, #6]

				break;
 8001760:	e0ab      	b.n	80018ba <main+0x47a>

			//Motor Drive Unit: Temperature (For LCD Display). Values are IEEE 32-bit floating point in Celsius (C). Period: 1s
			case MC_BASE + 0xB:


				u.chars[0] = CAN_rx_data[0];
 8001762:	4b59      	ldr	r3, [pc, #356]	; (80018c8 <main+0x488>)
 8001764:	781a      	ldrb	r2, [r3, #0]
 8001766:	4b59      	ldr	r3, [pc, #356]	; (80018cc <main+0x48c>)
 8001768:	701a      	strb	r2, [r3, #0]
				u.chars[1] = CAN_rx_data[1];
 800176a:	4b57      	ldr	r3, [pc, #348]	; (80018c8 <main+0x488>)
 800176c:	785a      	ldrb	r2, [r3, #1]
 800176e:	4b57      	ldr	r3, [pc, #348]	; (80018cc <main+0x48c>)
 8001770:	705a      	strb	r2, [r3, #1]
				u.chars[2] = CAN_rx_data[2];
 8001772:	4b55      	ldr	r3, [pc, #340]	; (80018c8 <main+0x488>)
 8001774:	789a      	ldrb	r2, [r3, #2]
 8001776:	4b55      	ldr	r3, [pc, #340]	; (80018cc <main+0x48c>)
 8001778:	709a      	strb	r2, [r3, #2]
				u.chars[3] = CAN_rx_data[3];
 800177a:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <main+0x488>)
 800177c:	78da      	ldrb	r2, [r3, #3]
 800177e:	4b53      	ldr	r3, [pc, #332]	; (80018cc <main+0x48c>)
 8001780:	70da      	strb	r2, [r3, #3]

				tempInt32 = (int32_t) u.float_var;
 8001782:	4b52      	ldr	r3, [pc, #328]	; (80018cc <main+0x48c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f942 	bl	8000a10 <__aeabi_f2iz>
 800178c:	4603      	mov	r3, r0
 800178e:	603b      	str	r3, [r7, #0]

				while(u.float_var < 0)
 8001790:	e005      	b.n	800179e <main+0x35e>
				{
					u.float_var = u.float_var * -1;
 8001792:	4b4e      	ldr	r3, [pc, #312]	; (80018cc <main+0x48c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800179a:	4a4c      	ldr	r2, [pc, #304]	; (80018cc <main+0x48c>)
 800179c:	6013      	str	r3, [r2, #0]
				while(u.float_var < 0)
 800179e:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <main+0x48c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f04f 0100 	mov.w	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff f90a 	bl	80009c0 <__aeabi_fcmplt>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ef      	bne.n	8001792 <main+0x352>
				}

				//XBeeTransmitCan(&CAN_rx_msg);

				UpdateScreenParameter(MOTOR_TEMP_XPOS, MOTOR_TEMP_YPOS, tempInt32, ((uint32_t) (u.float_var * 10)) % 10 );
 80017b2:	4b46      	ldr	r3, [pc, #280]	; (80018cc <main+0x48c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4946      	ldr	r1, [pc, #280]	; (80018d0 <main+0x490>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fdf3 	bl	80003a4 <__aeabi_fmul>
 80017be:	4603      	mov	r3, r0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff f94b 	bl	8000a5c <__aeabi_f2uiz>
 80017c6:	4601      	mov	r1, r0
 80017c8:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <main+0x494>)
 80017ca:	fba3 2301 	umull	r2, r3, r3, r1
 80017ce:	08da      	lsrs	r2, r3, #3
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	1aca      	subs	r2, r1, r3
 80017da:	b2d3      	uxtb	r3, r2
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	2109      	movs	r1, #9
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff fbbf 	bl	8000f64 <UpdateScreenParameter>
				break;
 80017e6:	e068      	b.n	80018ba <main+0x47a>

			//Motor Drive Unit: Current (For LCD Display). Values are IEEE 32-bit floating point in Amperes(A). Period: 200ms
			case MC_BASE + 2:

				u.chars[0] = CAN_rx_data[4];
 80017e8:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <main+0x488>)
 80017ea:	791a      	ldrb	r2, [r3, #4]
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <main+0x48c>)
 80017ee:	701a      	strb	r2, [r3, #0]
				u.chars[1] = CAN_rx_data[5];
 80017f0:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <main+0x488>)
 80017f2:	795a      	ldrb	r2, [r3, #5]
 80017f4:	4b35      	ldr	r3, [pc, #212]	; (80018cc <main+0x48c>)
 80017f6:	705a      	strb	r2, [r3, #1]
				u.chars[2] = CAN_rx_data[6];
 80017f8:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <main+0x488>)
 80017fa:	799a      	ldrb	r2, [r3, #6]
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <main+0x48c>)
 80017fe:	709a      	strb	r2, [r3, #2]
				u.chars[3] = CAN_rx_data[7];
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <main+0x488>)
 8001802:	79da      	ldrb	r2, [r3, #7]
 8001804:	4b31      	ldr	r3, [pc, #196]	; (80018cc <main+0x48c>)
 8001806:	70da      	strb	r2, [r3, #3]

				tempInt32 = (int32_t) u.float_var;
 8001808:	4b30      	ldr	r3, [pc, #192]	; (80018cc <main+0x48c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff f8ff 	bl	8000a10 <__aeabi_f2iz>
 8001812:	4603      	mov	r3, r0
 8001814:	603b      	str	r3, [r7, #0]

				if (u.float_var < 0)
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <main+0x48c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f04f 0100 	mov.w	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f8ce 	bl	80009c0 <__aeabi_fcmplt>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <main+0x3f6>
				{
					u.float_var = u.float_var * -1;
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <main+0x48c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001832:	4a26      	ldr	r2, [pc, #152]	; (80018cc <main+0x48c>)
 8001834:	6013      	str	r3, [r2, #0]
				}

				//Send the CAN message once every second
				if (c == 5)
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b05      	cmp	r3, #5
 800183a:	d101      	bne.n	8001840 <main+0x400>
				{
					//XBeeTransmitCan(&CAN_rx_msg);
					c = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	71fb      	strb	r3, [r7, #7]
				}
				c++;
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	3301      	adds	r3, #1
 8001844:	71fb      	strb	r3, [r7, #7]

				UpdateScreenParameter(MOTOR_CURRENT_XPOS, MOTOR_CURRENT_YPOS, tempInt32, ((uint32_t) (u.float_var * 10)) % 10 );
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <main+0x48c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4921      	ldr	r1, [pc, #132]	; (80018d0 <main+0x490>)
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fda9 	bl	80003a4 <__aeabi_fmul>
 8001852:	4603      	mov	r3, r0
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff f901 	bl	8000a5c <__aeabi_f2uiz>
 800185a:	4601      	mov	r1, r0
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <main+0x494>)
 800185e:	fba3 2301 	umull	r2, r3, r3, r1
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	1aca      	subs	r2, r1, r3
 800186e:	b2d3      	uxtb	r3, r2
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	2106      	movs	r1, #6
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff fb75 	bl	8000f64 <UpdateScreenParameter>
				break;
 800187a:	e01e      	b.n	80018ba <main+0x47a>
				//Battery discharge over-current: A7
				//Battery over-temperature: A8
				//Battery under-voltage: A9
				//Battery over-voltage: A10

				GPIOA->BSRR = (CAN_rx_data[6] & 0x3) || \
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <main+0x488>)
 800187e:	799b      	ldrb	r3, [r3, #6]
 8001880:	f003 0303 	and.w	r3, r3, #3
							( ( (CAN_rx_data[5] >> 2) & 0x1) << 4 ) || \
 8001884:	2b00      	cmp	r3, #0
 8001886:	d111      	bne.n	80018ac <main+0x46c>
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <main+0x488>)
 800188a:	795b      	ldrb	r3, [r3, #5]
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	b2db      	uxtb	r3, r3
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	f003 0310 	and.w	r3, r3, #16
				GPIOA->BSRR = (CAN_rx_data[6] & 0x3) || \
 8001896:	2b00      	cmp	r3, #0
 8001898:	d108      	bne.n	80018ac <main+0x46c>
							( ( (CAN_rx_data[5] >> 4) & 0x1F) << 6);
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <main+0x488>)
 800189c:	795b      	ldrb	r3, [r3, #5]
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	019b      	lsls	r3, r3, #6
 80018a4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
							( ( (CAN_rx_data[5] >> 2) & 0x1) << 4 ) || \
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <main+0x470>
 80018ac:	2201      	movs	r2, #1
 80018ae:	e000      	b.n	80018b2 <main+0x472>
 80018b0:	2200      	movs	r2, #0
				GPIOA->BSRR = (CAN_rx_data[6] & 0x3) || \
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <main+0x498>)
 80018b4:	611a      	str	r2, [r3, #16]
				}

				//XBeeTransmitCan(&newCanMsg);
				*/

				break;
 80018b6:	e000      	b.n	80018ba <main+0x47a>
		}
	}
 80018b8:	bf00      	nop
	if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0)
 80018ba:	e60b      	b.n	80014d4 <main+0x94>
 80018bc:	f3af 8000 	nop.w
 80018c0:	cccccccd 	.word	0xcccccccd
 80018c4:	c00ccccc 	.word	0xc00ccccc
 80018c8:	20000160 	.word	0x20000160
 80018cc:	20000168 	.word	0x20000168
 80018d0:	41200000 	.word	0x41200000
 80018d4:	cccccccd 	.word	0xcccccccd
 80018d8:	40010800 	.word	0x40010800

080018dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b090      	sub	sp, #64	; 0x40
 80018e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e2:	f107 0318 	add.w	r3, r7, #24
 80018e6:	2228      	movs	r2, #40	; 0x28
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 fd5e 	bl	80033ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018fe:	2302      	movs	r3, #2
 8001900:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001902:	2301      	movs	r3, #1
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001906:	2310      	movs	r3, #16
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190a:	2302      	movs	r3, #2
 800190c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800190e:	2300      	movs	r3, #0
 8001910:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001912:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001916:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001918:	f107 0318 	add.w	r3, r7, #24
 800191c:	4618      	mov	r0, r3
 800191e:	f001 f92b 	bl	8002b78 <HAL_RCC_OscConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001928:	f000 f819 	bl	800195e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192c:	230f      	movs	r3, #15
 800192e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001930:	2302      	movs	r3, #2
 8001932:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800193c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	2102      	movs	r1, #2
 8001946:	4618      	mov	r0, r3
 8001948:	f001 fb98 	bl	800307c <HAL_RCC_ClockConfig>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001952:	f000 f804 	bl	800195e <Error_Handler>
  }
}
 8001956:	bf00      	nop
 8001958:	3740      	adds	r7, #64	; 0x40
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001962:	b672      	cpsid	i
}
 8001964:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001966:	e7fe      	b.n	8001966 <Error_Handler+0x8>

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_MspInit+0x5c>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <HAL_MspInit+0x5c>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6193      	str	r3, [r2, #24]
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_MspInit+0x5c>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_MspInit+0x5c>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <HAL_MspInit+0x5c>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_MspInit+0x5c>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_MspInit+0x60>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_MspInit+0x60>)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a12:	f000 f87f 	bl	8001b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001a22:	f000 fbd3 	bl	80021cc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200000cc 	.word	0x200000cc

08001a30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a3e:	490d      	ldr	r1, [pc, #52]	; (8001a74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a44:	e002      	b.n	8001a4c <LoopCopyDataInit>

08001a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4a:	3304      	adds	r3, #4

08001a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a50:	d3f9      	bcc.n	8001a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a54:	4c0a      	ldr	r4, [pc, #40]	; (8001a80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a58:	e001      	b.n	8001a5e <LoopFillZerobss>

08001a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a5c:	3204      	adds	r2, #4

08001a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a60:	d3fb      	bcc.n	8001a5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a62:	f7ff ffe5 	bl	8001a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a66:	f001 fc6f 	bl	8003348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a6a:	f7ff fce9 	bl	8001440 <main>
  bx lr
 8001a6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a74:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001a78:	08003534 	.word	0x08003534
  ldr r2, =_sbss
 8001a7c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001a80:	20000170 	.word	0x20000170

08001a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC1_2_IRQHandler>
	...

08001a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_Init+0x28>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_Init+0x28>)
 8001a92:	f043 0310 	orr.w	r3, r3, #16
 8001a96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f000 fe8f 	bl	80027bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9e:	200f      	movs	r0, #15
 8001aa0:	f000 f808 	bl	8001ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa4:	f7ff ff60 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40022000 	.word	0x40022000

08001ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x54>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_InitTick+0x58>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fea7 	bl	8002826 <HAL_SYSTICK_Config>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00e      	b.n	8001b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b0f      	cmp	r3, #15
 8001ae6:	d80a      	bhi.n	8001afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f000 fe6f 	bl	80027d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af4:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <HAL_InitTick+0x5c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200000a4 	.word	0x200000a4
 8001b0c:	200000ac 	.word	0x200000ac
 8001b10:	200000a8 	.word	0x200000a8

08001b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_IncTick+0x1c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_IncTick+0x20>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a03      	ldr	r2, [pc, #12]	; (8001b34 <HAL_IncTick+0x20>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	200000ac 	.word	0x200000ac
 8001b34:	2000016c 	.word	0x2000016c

08001b38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <HAL_GetTick+0x10>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	2000016c 	.word	0x2000016c

08001b4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0ed      	b.n	8001d3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fb62 	bl	8001234 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b80:	f7ff ffda 	bl	8001b38 <HAL_GetTick>
 8001b84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b86:	e012      	b.n	8001bae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b88:	f7ff ffd6 	bl	8001b38 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b0a      	cmp	r3, #10
 8001b94:	d90b      	bls.n	8001bae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2205      	movs	r2, #5
 8001ba6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0c5      	b.n	8001d3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0e5      	beq.n	8001b88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0202 	bic.w	r2, r2, #2
 8001bca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bcc:	f7ff ffb4 	bl	8001b38 <HAL_GetTick>
 8001bd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bd2:	e012      	b.n	8001bfa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bd4:	f7ff ffb0 	bl	8001b38 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b0a      	cmp	r3, #10
 8001be0:	d90b      	bls.n	8001bfa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2205      	movs	r2, #5
 8001bf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e09f      	b.n	8001d3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1e5      	bne.n	8001bd4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7e1b      	ldrb	r3, [r3, #24]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d108      	bne.n	8001c22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	e007      	b.n	8001c32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	7e5b      	ldrb	r3, [r3, #25]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d108      	bne.n	8001c4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	e007      	b.n	8001c5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7e9b      	ldrb	r3, [r3, #26]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d108      	bne.n	8001c76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0220 	orr.w	r2, r2, #32
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	e007      	b.n	8001c86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0220 	bic.w	r2, r2, #32
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7edb      	ldrb	r3, [r3, #27]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d108      	bne.n	8001ca0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0210 	bic.w	r2, r2, #16
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	e007      	b.n	8001cb0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0210 	orr.w	r2, r2, #16
 8001cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7f1b      	ldrb	r3, [r3, #28]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d108      	bne.n	8001cca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0208 	orr.w	r2, r2, #8
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e007      	b.n	8001cda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0208 	bic.w	r2, r2, #8
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7f5b      	ldrb	r3, [r3, #29]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d108      	bne.n	8001cf4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0204 	orr.w	r2, r2, #4
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e007      	b.n	8001d04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0204 	bic.w	r2, r2, #4
 8001d02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	ea42 0103 	orr.w	r1, r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	1e5a      	subs	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b087      	sub	sp, #28
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d58:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d5a:	7cfb      	ldrb	r3, [r7, #19]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d003      	beq.n	8001d68 <HAL_CAN_ConfigFilter+0x26>
 8001d60:	7cfb      	ldrb	r3, [r7, #19]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	f040 80aa 	bne.w	8001ebc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d6e:	f043 0201 	orr.w	r2, r3, #1
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	2201      	movs	r2, #1
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d123      	bne.n	8001dea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001dc4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3248      	adds	r2, #72	; 0x48
 8001dca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dde:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001de0:	6979      	ldr	r1, [r7, #20]
 8001de2:	3348      	adds	r3, #72	; 0x48
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d122      	bne.n	8001e38 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	3248      	adds	r2, #72	; 0x48
 8001e18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e2e:	6979      	ldr	r1, [r7, #20]
 8001e30:	3348      	adds	r3, #72	; 0x48
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	440b      	add	r3, r1
 8001e36:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d109      	bne.n	8001e54 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e52:	e007      	b.n	8001e64 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d109      	bne.n	8001e80 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001e7e:	e007      	b.n	8001e90 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d107      	bne.n	8001ea8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eae:	f023 0201 	bic.w	r2, r3, #1
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e006      	b.n	8001eca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
  }
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	371c      	adds	r7, #28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d12e      	bne.n	8001f46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f00:	f7ff fe1a 	bl	8001b38 <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f06:	e012      	b.n	8001f2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f08:	f7ff fe16 	bl	8001b38 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b0a      	cmp	r3, #10
 8001f14:	d90b      	bls.n	8001f2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2205      	movs	r2, #5
 8001f26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e012      	b.n	8001f54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e5      	bne.n	8001f08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e006      	b.n	8001f54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
  }
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f70:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d003      	beq.n	8001f80 <HAL_CAN_GetRxMessage+0x24>
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	f040 80f3 	bne.w	8002166 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10e      	bne.n	8001fa4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d116      	bne.n	8001fc2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0e7      	b.n	8002174 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d107      	bne.n	8001fc2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0d8      	b.n	8002174 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	331b      	adds	r3, #27
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	4413      	add	r3, r2
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0204 	and.w	r2, r3, #4
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10c      	bne.n	8001ffa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	331b      	adds	r3, #27
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	4413      	add	r3, r2
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	0d5b      	lsrs	r3, r3, #21
 8001ff0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e00b      	b.n	8002012 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	331b      	adds	r3, #27
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4413      	add	r3, r2
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	08db      	lsrs	r3, r3, #3
 800200a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	331b      	adds	r3, #27
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	4413      	add	r3, r2
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0202 	and.w	r2, r3, #2
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	331b      	adds	r3, #27
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4413      	add	r3, r2
 8002034:	3304      	adds	r3, #4
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 020f 	and.w	r2, r3, #15
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	331b      	adds	r3, #27
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b2da      	uxtb	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	331b      	adds	r3, #27
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	4413      	add	r3, r2
 8002064:	3304      	adds	r3, #4
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0c1b      	lsrs	r3, r3, #16
 800206a:	b29a      	uxth	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	4413      	add	r3, r2
 800207a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	4413      	add	r3, r2
 8002090:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	0a1a      	lsrs	r2, r3, #8
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	3301      	adds	r3, #1
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0c1a      	lsrs	r2, r3, #16
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	3302      	adds	r3, #2
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	0e1a      	lsrs	r2, r3, #24
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	3303      	adds	r3, #3
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	4413      	add	r3, r2
 80020de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	3304      	adds	r3, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0a1a      	lsrs	r2, r3, #8
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	3305      	adds	r3, #5
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	4413      	add	r3, r2
 8002110:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	0c1a      	lsrs	r2, r3, #16
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	3306      	adds	r3, #6
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4413      	add	r3, r2
 800212a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0e1a      	lsrs	r2, r3, #24
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	3307      	adds	r3, #7
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d108      	bne.n	8002152 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0220 	orr.w	r2, r2, #32
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	e007      	b.n	8002162 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0220 	orr.w	r2, r2, #32
 8002160:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	e006      	b.n	8002174 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
  }
}
 8002174:	4618      	mov	r0, r3
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002192:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002194:	7afb      	ldrb	r3, [r7, #11]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d002      	beq.n	80021a0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800219a:	7afb      	ldrb	r3, [r7, #11]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d10f      	bne.n	80021c0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e005      	b.n	80021c0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80021c0:	68fb      	ldr	r3, [r7, #12]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d07c      	beq.n	800230c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d023      	beq.n	8002264 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2201      	movs	r2, #1
 8002222:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f983 	bl	800253a <HAL_CAN_TxMailbox0CompleteCallback>
 8002234:	e016      	b.n	8002264 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d004      	beq.n	800224a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
 8002248:	e00c      	b.n	8002264 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d004      	beq.n	800225e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
 800225c:	e002      	b.n	8002264 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f986 	bl	8002570 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d024      	beq.n	80022b8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002276:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f962 	bl	800254c <HAL_CAN_TxMailbox1CompleteCallback>
 8002288:	e016      	b.n	80022b8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
 800229c:	e00c      	b.n	80022b8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
 80022b0:	e002      	b.n	80022b8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f965 	bl	8002582 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d024      	beq.n	800230c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f941 	bl	800255e <HAL_CAN_TxMailbox2CompleteCallback>
 80022dc:	e016      	b.n	800230c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d004      	beq.n	80022f2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	e00c      	b.n	800230c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d004      	beq.n	8002306 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
 8002304:	e002      	b.n	800230c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f944 	bl	8002594 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00c      	beq.n	8002330 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	d007      	beq.n	8002330 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002326:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2210      	movs	r2, #16
 800232e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2208      	movs	r2, #8
 800234a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f933 	bl	80025b8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f91b 	bl	80025a6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00c      	beq.n	8002394 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800238a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2210      	movs	r2, #16
 8002392:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2208      	movs	r2, #8
 80023ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f913 	bl	80025dc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d009      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f8fb 	bl	80025ca <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2210      	movs	r2, #16
 80023ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f8fc 	bl	80025ee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00b      	beq.n	8002418 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2208      	movs	r2, #8
 8002410:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f8f4 	bl	8002600 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d07b      	beq.n	800251a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d072      	beq.n	8002512 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	f043 0302 	orr.w	r3, r3, #2
 8002462:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002486:	2b00      	cmp	r3, #0
 8002488:	d043      	beq.n	8002512 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002490:	2b00      	cmp	r3, #0
 8002492:	d03e      	beq.n	8002512 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800249a:	2b60      	cmp	r3, #96	; 0x60
 800249c:	d02b      	beq.n	80024f6 <HAL_CAN_IRQHandler+0x32a>
 800249e:	2b60      	cmp	r3, #96	; 0x60
 80024a0:	d82e      	bhi.n	8002500 <HAL_CAN_IRQHandler+0x334>
 80024a2:	2b50      	cmp	r3, #80	; 0x50
 80024a4:	d022      	beq.n	80024ec <HAL_CAN_IRQHandler+0x320>
 80024a6:	2b50      	cmp	r3, #80	; 0x50
 80024a8:	d82a      	bhi.n	8002500 <HAL_CAN_IRQHandler+0x334>
 80024aa:	2b40      	cmp	r3, #64	; 0x40
 80024ac:	d019      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x316>
 80024ae:	2b40      	cmp	r3, #64	; 0x40
 80024b0:	d826      	bhi.n	8002500 <HAL_CAN_IRQHandler+0x334>
 80024b2:	2b30      	cmp	r3, #48	; 0x30
 80024b4:	d010      	beq.n	80024d8 <HAL_CAN_IRQHandler+0x30c>
 80024b6:	2b30      	cmp	r3, #48	; 0x30
 80024b8:	d822      	bhi.n	8002500 <HAL_CAN_IRQHandler+0x334>
 80024ba:	2b10      	cmp	r3, #16
 80024bc:	d002      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x2f8>
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d005      	beq.n	80024ce <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80024c2:	e01d      	b.n	8002500 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	f043 0308 	orr.w	r3, r3, #8
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024cc:	e019      	b.n	8002502 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	f043 0310 	orr.w	r3, r3, #16
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024d6:	e014      	b.n	8002502 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	f043 0320 	orr.w	r3, r3, #32
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024e0:	e00f      	b.n	8002502 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024ea:	e00a      	b.n	8002502 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024f4:	e005      	b.n	8002502 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024fe:	e000      	b.n	8002502 <HAL_CAN_IRQHandler+0x336>
            break;
 8002500:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002510:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2204      	movs	r2, #4
 8002518:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f870 	bl	8002612 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002532:	bf00      	nop
 8002534:	3728      	adds	r7, #40	; 0x28
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002640:	4013      	ands	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800264c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002656:	4a04      	ldr	r2, [pc, #16]	; (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	60d3      	str	r3, [r2, #12]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <__NVIC_GetPriorityGrouping+0x18>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	f003 0307 	and.w	r3, r3, #7
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	2b00      	cmp	r3, #0
 8002698:	db0b      	blt.n	80026b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	f003 021f 	and.w	r2, r3, #31
 80026a0:	4906      	ldr	r1, [pc, #24]	; (80026bc <__NVIC_EnableIRQ+0x34>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	2001      	movs	r0, #1
 80026aa:	fa00 f202 	lsl.w	r2, r0, r2
 80026ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100

080026c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	6039      	str	r1, [r7, #0]
 80026ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	db0a      	blt.n	80026ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	490c      	ldr	r1, [pc, #48]	; (800270c <__NVIC_SetPriority+0x4c>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	0112      	lsls	r2, r2, #4
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	440b      	add	r3, r1
 80026e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e8:	e00a      	b.n	8002700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4908      	ldr	r1, [pc, #32]	; (8002710 <__NVIC_SetPriority+0x50>)
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	3b04      	subs	r3, #4
 80026f8:	0112      	lsls	r2, r2, #4
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	440b      	add	r3, r1
 80026fe:	761a      	strb	r2, [r3, #24]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	e000e100 	.word	0xe000e100
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f1c3 0307 	rsb	r3, r3, #7
 800272e:	2b04      	cmp	r3, #4
 8002730:	bf28      	it	cs
 8002732:	2304      	movcs	r3, #4
 8002734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3304      	adds	r3, #4
 800273a:	2b06      	cmp	r3, #6
 800273c:	d902      	bls.n	8002744 <NVIC_EncodePriority+0x30>
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3b03      	subs	r3, #3
 8002742:	e000      	b.n	8002746 <NVIC_EncodePriority+0x32>
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	f04f 32ff 	mov.w	r2, #4294967295
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43da      	mvns	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	401a      	ands	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800275c:	f04f 31ff 	mov.w	r1, #4294967295
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	43d9      	mvns	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	4313      	orrs	r3, r2
         );
}
 800276e:	4618      	mov	r0, r3
 8002770:	3724      	adds	r7, #36	; 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002788:	d301      	bcc.n	800278e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800278a:	2301      	movs	r3, #1
 800278c:	e00f      	b.n	80027ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <SysTick_Config+0x40>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002796:	210f      	movs	r1, #15
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	f7ff ff90 	bl	80026c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <SysTick_Config+0x40>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a6:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <SysTick_Config+0x40>)
 80027a8:	2207      	movs	r2, #7
 80027aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	e000e010 	.word	0xe000e010

080027bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ff2d 	bl	8002624 <__NVIC_SetPriorityGrouping>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e4:	f7ff ff42 	bl	800266c <__NVIC_GetPriorityGrouping>
 80027e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	6978      	ldr	r0, [r7, #20]
 80027f0:	f7ff ff90 	bl	8002714 <NVIC_EncodePriority>
 80027f4:	4602      	mov	r2, r0
 80027f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff5f 	bl	80026c0 <__NVIC_SetPriority>
}
 8002802:	bf00      	nop
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff35 	bl	8002688 <__NVIC_EnableIRQ>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ffa2 	bl	8002778 <SysTick_Config>
 8002834:	4603      	mov	r3, r0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	b480      	push	{r7}
 8002842:	b08b      	sub	sp, #44	; 0x2c
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002852:	e169      	b.n	8002b28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002854:	2201      	movs	r2, #1
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8158 	bne.w	8002b22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a9a      	ldr	r2, [pc, #616]	; (8002ae0 <HAL_GPIO_Init+0x2a0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d05e      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 800287c:	4a98      	ldr	r2, [pc, #608]	; (8002ae0 <HAL_GPIO_Init+0x2a0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d875      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 8002882:	4a98      	ldr	r2, [pc, #608]	; (8002ae4 <HAL_GPIO_Init+0x2a4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d058      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 8002888:	4a96      	ldr	r2, [pc, #600]	; (8002ae4 <HAL_GPIO_Init+0x2a4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d86f      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 800288e:	4a96      	ldr	r2, [pc, #600]	; (8002ae8 <HAL_GPIO_Init+0x2a8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d052      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 8002894:	4a94      	ldr	r2, [pc, #592]	; (8002ae8 <HAL_GPIO_Init+0x2a8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d869      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 800289a:	4a94      	ldr	r2, [pc, #592]	; (8002aec <HAL_GPIO_Init+0x2ac>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d04c      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 80028a0:	4a92      	ldr	r2, [pc, #584]	; (8002aec <HAL_GPIO_Init+0x2ac>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d863      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 80028a6:	4a92      	ldr	r2, [pc, #584]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d046      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 80028ac:	4a90      	ldr	r2, [pc, #576]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d85d      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 80028b2:	2b12      	cmp	r3, #18
 80028b4:	d82a      	bhi.n	800290c <HAL_GPIO_Init+0xcc>
 80028b6:	2b12      	cmp	r3, #18
 80028b8:	d859      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 80028ba:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <HAL_GPIO_Init+0x80>)
 80028bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c0:	0800293b 	.word	0x0800293b
 80028c4:	08002915 	.word	0x08002915
 80028c8:	08002927 	.word	0x08002927
 80028cc:	08002969 	.word	0x08002969
 80028d0:	0800296f 	.word	0x0800296f
 80028d4:	0800296f 	.word	0x0800296f
 80028d8:	0800296f 	.word	0x0800296f
 80028dc:	0800296f 	.word	0x0800296f
 80028e0:	0800296f 	.word	0x0800296f
 80028e4:	0800296f 	.word	0x0800296f
 80028e8:	0800296f 	.word	0x0800296f
 80028ec:	0800296f 	.word	0x0800296f
 80028f0:	0800296f 	.word	0x0800296f
 80028f4:	0800296f 	.word	0x0800296f
 80028f8:	0800296f 	.word	0x0800296f
 80028fc:	0800296f 	.word	0x0800296f
 8002900:	0800296f 	.word	0x0800296f
 8002904:	0800291d 	.word	0x0800291d
 8002908:	08002931 	.word	0x08002931
 800290c:	4a79      	ldr	r2, [pc, #484]	; (8002af4 <HAL_GPIO_Init+0x2b4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002912:	e02c      	b.n	800296e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	623b      	str	r3, [r7, #32]
          break;
 800291a:	e029      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	3304      	adds	r3, #4
 8002922:	623b      	str	r3, [r7, #32]
          break;
 8002924:	e024      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	3308      	adds	r3, #8
 800292c:	623b      	str	r3, [r7, #32]
          break;
 800292e:	e01f      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	330c      	adds	r3, #12
 8002936:	623b      	str	r3, [r7, #32]
          break;
 8002938:	e01a      	b.n	8002970 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002942:	2304      	movs	r3, #4
 8002944:	623b      	str	r3, [r7, #32]
          break;
 8002946:	e013      	b.n	8002970 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002950:	2308      	movs	r3, #8
 8002952:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	611a      	str	r2, [r3, #16]
          break;
 800295a:	e009      	b.n	8002970 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800295c:	2308      	movs	r3, #8
 800295e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	615a      	str	r2, [r3, #20]
          break;
 8002966:	e003      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002968:	2300      	movs	r3, #0
 800296a:	623b      	str	r3, [r7, #32]
          break;
 800296c:	e000      	b.n	8002970 <HAL_GPIO_Init+0x130>
          break;
 800296e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2bff      	cmp	r3, #255	; 0xff
 8002974:	d801      	bhi.n	800297a <HAL_GPIO_Init+0x13a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	e001      	b.n	800297e <HAL_GPIO_Init+0x13e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3304      	adds	r3, #4
 800297e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	d802      	bhi.n	800298c <HAL_GPIO_Init+0x14c>
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	e002      	b.n	8002992 <HAL_GPIO_Init+0x152>
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	3b08      	subs	r3, #8
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	210f      	movs	r1, #15
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	fa01 f303 	lsl.w	r3, r1, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	401a      	ands	r2, r3
 80029a4:	6a39      	ldr	r1, [r7, #32]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	431a      	orrs	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80b1 	beq.w	8002b22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029c0:	4b4d      	ldr	r3, [pc, #308]	; (8002af8 <HAL_GPIO_Init+0x2b8>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	4a4c      	ldr	r2, [pc, #304]	; (8002af8 <HAL_GPIO_Init+0x2b8>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6193      	str	r3, [r2, #24]
 80029cc:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_GPIO_Init+0x2b8>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029d8:	4a48      	ldr	r2, [pc, #288]	; (8002afc <HAL_GPIO_Init+0x2bc>)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	3302      	adds	r3, #2
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	220f      	movs	r2, #15
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a40      	ldr	r2, [pc, #256]	; (8002b00 <HAL_GPIO_Init+0x2c0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d013      	beq.n	8002a2c <HAL_GPIO_Init+0x1ec>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a3f      	ldr	r2, [pc, #252]	; (8002b04 <HAL_GPIO_Init+0x2c4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00d      	beq.n	8002a28 <HAL_GPIO_Init+0x1e8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a3e      	ldr	r2, [pc, #248]	; (8002b08 <HAL_GPIO_Init+0x2c8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <HAL_GPIO_Init+0x1e4>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a3d      	ldr	r2, [pc, #244]	; (8002b0c <HAL_GPIO_Init+0x2cc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_GPIO_Init+0x1e0>
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e006      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a20:	2304      	movs	r3, #4
 8002a22:	e004      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e002      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a30:	f002 0203 	and.w	r2, r2, #3
 8002a34:	0092      	lsls	r2, r2, #2
 8002a36:	4093      	lsls	r3, r2
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a3e:	492f      	ldr	r1, [pc, #188]	; (8002afc <HAL_GPIO_Init+0x2bc>)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d006      	beq.n	8002a66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a58:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	492c      	ldr	r1, [pc, #176]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]
 8002a64:	e006      	b.n	8002a74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a66:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	4928      	ldr	r1, [pc, #160]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d006      	beq.n	8002a8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a80:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4922      	ldr	r1, [pc, #136]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	491e      	ldr	r1, [pc, #120]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	4918      	ldr	r1, [pc, #96]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]
 8002ab4:	e006      	b.n	8002ac4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	4914      	ldr	r1, [pc, #80]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d021      	beq.n	8002b14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	490e      	ldr	r1, [pc, #56]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60cb      	str	r3, [r1, #12]
 8002adc:	e021      	b.n	8002b22 <HAL_GPIO_Init+0x2e2>
 8002ade:	bf00      	nop
 8002ae0:	10320000 	.word	0x10320000
 8002ae4:	10310000 	.word	0x10310000
 8002ae8:	10220000 	.word	0x10220000
 8002aec:	10210000 	.word	0x10210000
 8002af0:	10120000 	.word	0x10120000
 8002af4:	10110000 	.word	0x10110000
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010000 	.word	0x40010000
 8002b00:	40010800 	.word	0x40010800
 8002b04:	40010c00 	.word	0x40010c00
 8002b08:	40011000 	.word	0x40011000
 8002b0c:	40011400 	.word	0x40011400
 8002b10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	4909      	ldr	r1, [pc, #36]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	3301      	adds	r3, #1
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f47f ae8e 	bne.w	8002854 <HAL_GPIO_Init+0x14>
  }
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	372c      	adds	r7, #44	; 0x2c
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	40010400 	.word	0x40010400

08002b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
 8002b54:	4613      	mov	r3, r2
 8002b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b58:	787b      	ldrb	r3, [r7, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b64:	e003      	b.n	8002b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	041a      	lsls	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e272      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8087 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b98:	4b92      	ldr	r3, [pc, #584]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d00c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ba4:	4b8f      	ldr	r3, [pc, #572]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d112      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x5e>
 8002bb0:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	4b89      	ldr	r3, [pc, #548]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d06c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x12c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d168      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e24c      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x76>
 8002be0:	4b80      	ldr	r3, [pc, #512]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a7f      	ldr	r2, [pc, #508]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e02e      	b.n	8002c4c <HAL_RCC_OscConfig+0xd4>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x98>
 8002bf6:	4b7b      	ldr	r3, [pc, #492]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7a      	ldr	r2, [pc, #488]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b78      	ldr	r3, [pc, #480]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a77      	ldr	r2, [pc, #476]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e01d      	b.n	8002c4c <HAL_RCC_OscConfig+0xd4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0xbc>
 8002c1a:	4b72      	ldr	r3, [pc, #456]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a71      	ldr	r2, [pc, #452]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b6f      	ldr	r3, [pc, #444]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a6e      	ldr	r2, [pc, #440]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0xd4>
 8002c34:	4b6b      	ldr	r3, [pc, #428]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a6a      	ldr	r2, [pc, #424]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b68      	ldr	r3, [pc, #416]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a67      	ldr	r2, [pc, #412]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fe ff70 	bl	8001b38 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe ff6c 	bl	8001b38 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e200      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b5d      	ldr	r3, [pc, #372]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0xe4>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fe ff5c 	bl	8001b38 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe ff58 	bl	8001b38 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e1ec      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x10c>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d063      	beq.n	8002d7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb2:	4b4c      	ldr	r3, [pc, #304]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cbe:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d11c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x18c>
 8002cca:	4b46      	ldr	r3, [pc, #280]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d116      	bne.n	8002d04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x176>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e1c0      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4939      	ldr	r1, [pc, #228]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	e03a      	b.n	8002d7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d020      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0c:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7fe ff11 	bl	8001b38 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1a:	f7fe ff0d 	bl	8001b38 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e1a1      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	4b2d      	ldr	r3, [pc, #180]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4927      	ldr	r1, [pc, #156]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
 8002d4c:	e015      	b.n	8002d7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_RCC_OscConfig+0x270>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fef0 	bl	8001b38 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fe feec 	bl	8001b38 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e180      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d03a      	beq.n	8002dfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d019      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8e:	4b17      	ldr	r3, [pc, #92]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d94:	f7fe fed0 	bl	8001b38 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9c:	f7fe fecc 	bl	8001b38 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e160      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f000 faa6 	bl	800330c <RCC_Delay>
 8002dc0:	e01c      	b.n	8002dfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc8:	f7fe feb6 	bl	8001b38 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dce:	e00f      	b.n	8002df0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fe feb2 	bl	8001b38 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d908      	bls.n	8002df0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e146      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	42420000 	.word	0x42420000
 8002dec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df0:	4b92      	ldr	r3, [pc, #584]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e9      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80a6 	beq.w	8002f56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0e:	4b8b      	ldr	r3, [pc, #556]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10d      	bne.n	8002e36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	4b88      	ldr	r3, [pc, #544]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4a87      	ldr	r2, [pc, #540]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e24:	61d3      	str	r3, [r2, #28]
 8002e26:	4b85      	ldr	r3, [pc, #532]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e32:	2301      	movs	r3, #1
 8002e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	4b82      	ldr	r3, [pc, #520]	; (8003040 <HAL_RCC_OscConfig+0x4c8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d118      	bne.n	8002e74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e42:	4b7f      	ldr	r3, [pc, #508]	; (8003040 <HAL_RCC_OscConfig+0x4c8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7e      	ldr	r2, [pc, #504]	; (8003040 <HAL_RCC_OscConfig+0x4c8>)
 8002e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4e:	f7fe fe73 	bl	8001b38 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e56:	f7fe fe6f 	bl	8001b38 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b64      	cmp	r3, #100	; 0x64
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e103      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	4b75      	ldr	r3, [pc, #468]	; (8003040 <HAL_RCC_OscConfig+0x4c8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d106      	bne.n	8002e8a <HAL_RCC_OscConfig+0x312>
 8002e7c:	4b6f      	ldr	r3, [pc, #444]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4a6e      	ldr	r2, [pc, #440]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6213      	str	r3, [r2, #32]
 8002e88:	e02d      	b.n	8002ee6 <HAL_RCC_OscConfig+0x36e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10c      	bne.n	8002eac <HAL_RCC_OscConfig+0x334>
 8002e92:	4b6a      	ldr	r3, [pc, #424]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a69      	ldr	r2, [pc, #420]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	6213      	str	r3, [r2, #32]
 8002e9e:	4b67      	ldr	r3, [pc, #412]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a66      	ldr	r2, [pc, #408]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	f023 0304 	bic.w	r3, r3, #4
 8002ea8:	6213      	str	r3, [r2, #32]
 8002eaa:	e01c      	b.n	8002ee6 <HAL_RCC_OscConfig+0x36e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	d10c      	bne.n	8002ece <HAL_RCC_OscConfig+0x356>
 8002eb4:	4b61      	ldr	r3, [pc, #388]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4a60      	ldr	r2, [pc, #384]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	6213      	str	r3, [r2, #32]
 8002ec0:	4b5e      	ldr	r3, [pc, #376]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a5d      	ldr	r2, [pc, #372]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	e00b      	b.n	8002ee6 <HAL_RCC_OscConfig+0x36e>
 8002ece:	4b5b      	ldr	r3, [pc, #364]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a5a      	ldr	r2, [pc, #360]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6213      	str	r3, [r2, #32]
 8002eda:	4b58      	ldr	r3, [pc, #352]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a57      	ldr	r2, [pc, #348]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d015      	beq.n	8002f1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eee:	f7fe fe23 	bl	8001b38 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef6:	f7fe fe1f 	bl	8001b38 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e0b1      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	4b4b      	ldr	r3, [pc, #300]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ee      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x37e>
 8002f18:	e014      	b.n	8002f44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fe0d 	bl	8001b38 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fe fe09 	bl	8001b38 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e09b      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f38:	4b40      	ldr	r3, [pc, #256]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ee      	bne.n	8002f22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d105      	bne.n	8002f56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4a:	4b3c      	ldr	r3, [pc, #240]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4a3b      	ldr	r2, [pc, #236]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8087 	beq.w	800306e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d061      	beq.n	8003030 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d146      	bne.n	8003002 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f74:	4b33      	ldr	r3, [pc, #204]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fe fddd 	bl	8001b38 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fe fdd9 	bl	8001b38 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e06d      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f94:	4b29      	ldr	r3, [pc, #164]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa8:	d108      	bne.n	8002fbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	4921      	ldr	r1, [pc, #132]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a19      	ldr	r1, [r3, #32]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	491b      	ldr	r1, [pc, #108]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fda:	f7fe fdad 	bl	8001b38 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe2:	f7fe fda9 	bl	8001b38 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e03d      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x46a>
 8003000:	e035      	b.n	800306e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_RCC_OscConfig+0x4cc>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe fd96 	bl	8001b38 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003010:	f7fe fd92 	bl	8001b38 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e026      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCC_OscConfig+0x4c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x498>
 800302e:	e01e      	b.n	800306e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d107      	bne.n	8003048 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e019      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
 800303c:	40021000 	.word	0x40021000
 8003040:	40007000 	.word	0x40007000
 8003044:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_OscConfig+0x500>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	429a      	cmp	r2, r3
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000

0800307c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0d0      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003090:	4b6a      	ldr	r3, [pc, #424]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d910      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b67      	ldr	r3, [pc, #412]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 0207 	bic.w	r2, r3, #7
 80030a6:	4965      	ldr	r1, [pc, #404]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b63      	ldr	r3, [pc, #396]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0b8      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d8:	4b59      	ldr	r3, [pc, #356]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4a58      	ldr	r2, [pc, #352]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f0:	4b53      	ldr	r3, [pc, #332]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b50      	ldr	r3, [pc, #320]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	494d      	ldr	r1, [pc, #308]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d040      	beq.n	800319c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b47      	ldr	r3, [pc, #284]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d115      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e07f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313a:	4b41      	ldr	r3, [pc, #260]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e073      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314a:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e06b      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800315a:	4b39      	ldr	r3, [pc, #228]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f023 0203 	bic.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4936      	ldr	r1, [pc, #216]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800316c:	f7fe fce4 	bl	8001b38 <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	e00a      	b.n	800318a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003174:	f7fe fce0 	bl	8001b38 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e053      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	4b2d      	ldr	r3, [pc, #180]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 020c 	and.w	r2, r3, #12
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	429a      	cmp	r2, r3
 800319a:	d1eb      	bne.n	8003174 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800319c:	4b27      	ldr	r3, [pc, #156]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d210      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 0207 	bic.w	r2, r3, #7
 80031b2:	4922      	ldr	r1, [pc, #136]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e032      	b.n	8003232 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4916      	ldr	r1, [pc, #88]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	490e      	ldr	r1, [pc, #56]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800320a:	f000 f821 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	490a      	ldr	r1, [pc, #40]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_RCC_ClockConfig+0x1cc>)
 8003224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCC_ClockConfig+0x1d0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fc42 	bl	8001ab4 <HAL_InitTick>

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40022000 	.word	0x40022000
 8003240:	40021000 	.word	0x40021000
 8003244:	0800351c 	.word	0x0800351c
 8003248:	200000a4 	.word	0x200000a4
 800324c:	200000a8 	.word	0x200000a8

08003250 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003250:	b490      	push	{r4, r7}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003256:	4b29      	ldr	r3, [pc, #164]	; (80032fc <HAL_RCC_GetSysClockFreq+0xac>)
 8003258:	1d3c      	adds	r4, r7, #4
 800325a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800325c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003260:	f240 2301 	movw	r3, #513	; 0x201
 8003264:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	2300      	movs	r3, #0
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800327a:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_RCC_GetSysClockFreq+0xb0>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b04      	cmp	r3, #4
 8003288:	d002      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x40>
 800328a:	2b08      	cmp	r3, #8
 800328c:	d003      	beq.n	8003296 <HAL_RCC_GetSysClockFreq+0x46>
 800328e:	e02b      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003290:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003292:	623b      	str	r3, [r7, #32]
      break;
 8003294:	e02b      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	0c9b      	lsrs	r3, r3, #18
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	3328      	adds	r3, #40	; 0x28
 80032a0:	443b      	add	r3, r7
 80032a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d012      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032b2:	4b13      	ldr	r3, [pc, #76]	; (8003300 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	0c5b      	lsrs	r3, r3, #17
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	3328      	adds	r3, #40	; 0x28
 80032be:	443b      	add	r3, r7
 80032c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	4a0e      	ldr	r2, [pc, #56]	; (8003304 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ca:	fb03 f202 	mul.w	r2, r3, r2
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
 80032d6:	e004      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	4a0b      	ldr	r2, [pc, #44]	; (8003308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032dc:	fb02 f303 	mul.w	r3, r2, r3
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	623b      	str	r3, [r7, #32]
      break;
 80032e6:	e002      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ea:	623b      	str	r3, [r7, #32]
      break;
 80032ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ee:	6a3b      	ldr	r3, [r7, #32]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3728      	adds	r7, #40	; 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc90      	pop	{r4, r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	0800350c 	.word	0x0800350c
 8003300:	40021000 	.word	0x40021000
 8003304:	007a1200 	.word	0x007a1200
 8003308:	003d0900 	.word	0x003d0900

0800330c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <RCC_Delay+0x34>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <RCC_Delay+0x38>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	0a5b      	lsrs	r3, r3, #9
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003328:	bf00      	nop
  }
  while (Delay --);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1e5a      	subs	r2, r3, #1
 800332e:	60fa      	str	r2, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f9      	bne.n	8003328 <RCC_Delay+0x1c>
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	200000a4 	.word	0x200000a4
 8003344:	10624dd3 	.word	0x10624dd3

08003348 <__libc_init_array>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	2600      	movs	r6, #0
 800334c:	4d0c      	ldr	r5, [pc, #48]	; (8003380 <__libc_init_array+0x38>)
 800334e:	4c0d      	ldr	r4, [pc, #52]	; (8003384 <__libc_init_array+0x3c>)
 8003350:	1b64      	subs	r4, r4, r5
 8003352:	10a4      	asrs	r4, r4, #2
 8003354:	42a6      	cmp	r6, r4
 8003356:	d109      	bne.n	800336c <__libc_init_array+0x24>
 8003358:	f000 f830 	bl	80033bc <_init>
 800335c:	2600      	movs	r6, #0
 800335e:	4d0a      	ldr	r5, [pc, #40]	; (8003388 <__libc_init_array+0x40>)
 8003360:	4c0a      	ldr	r4, [pc, #40]	; (800338c <__libc_init_array+0x44>)
 8003362:	1b64      	subs	r4, r4, r5
 8003364:	10a4      	asrs	r4, r4, #2
 8003366:	42a6      	cmp	r6, r4
 8003368:	d105      	bne.n	8003376 <__libc_init_array+0x2e>
 800336a:	bd70      	pop	{r4, r5, r6, pc}
 800336c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003370:	4798      	blx	r3
 8003372:	3601      	adds	r6, #1
 8003374:	e7ee      	b.n	8003354 <__libc_init_array+0xc>
 8003376:	f855 3b04 	ldr.w	r3, [r5], #4
 800337a:	4798      	blx	r3
 800337c:	3601      	adds	r6, #1
 800337e:	e7f2      	b.n	8003366 <__libc_init_array+0x1e>
 8003380:	0800352c 	.word	0x0800352c
 8003384:	0800352c 	.word	0x0800352c
 8003388:	0800352c 	.word	0x0800352c
 800338c:	08003530 	.word	0x08003530

08003390 <memcpy>:
 8003390:	440a      	add	r2, r1
 8003392:	4291      	cmp	r1, r2
 8003394:	f100 33ff 	add.w	r3, r0, #4294967295
 8003398:	d100      	bne.n	800339c <memcpy+0xc>
 800339a:	4770      	bx	lr
 800339c:	b510      	push	{r4, lr}
 800339e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033a2:	4291      	cmp	r1, r2
 80033a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033a8:	d1f9      	bne.n	800339e <memcpy+0xe>
 80033aa:	bd10      	pop	{r4, pc}

080033ac <memset>:
 80033ac:	4603      	mov	r3, r0
 80033ae:	4402      	add	r2, r0
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d100      	bne.n	80033b6 <memset+0xa>
 80033b4:	4770      	bx	lr
 80033b6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ba:	e7f9      	b.n	80033b0 <memset+0x4>

080033bc <_init>:
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	bf00      	nop
 80033c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c2:	bc08      	pop	{r3}
 80033c4:	469e      	mov	lr, r3
 80033c6:	4770      	bx	lr

080033c8 <_fini>:
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ca:	bf00      	nop
 80033cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ce:	bc08      	pop	{r3}
 80033d0:	469e      	mov	lr, r3
 80033d2:	4770      	bx	lr
