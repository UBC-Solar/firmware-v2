
telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006880  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006990  08006990  00016990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad0  08006ad0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006ad0  08006ad0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ad0  08006ad0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ad0  08006ad0  00016ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ad4  08006ad4  00016ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b68  20000078  08006b4c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002be0  08006b4c  00022be0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b91e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004830  00000000  00000000  0003ba62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  00040298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd7  00000000  00000000  000418d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7fd  00000000  00000000  000424a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f63  00000000  00000000  0005cca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009625c  00000000  00000000  00072c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005910  00000000  00000000  00108e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000668  00000000  00000000  0010e774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000028  00000000  00000000  0010eddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 000004f3  00000000  00000000  0010ee04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <deregister_tm_clones>:
 8000110:	4803      	ldr	r0, [pc, #12]	; (8000120 <deregister_tm_clones+0x10>)
 8000112:	4b04      	ldr	r3, [pc, #16]	; (8000124 <deregister_tm_clones+0x14>)
 8000114:	4283      	cmp	r3, r0
 8000116:	d002      	beq.n	800011e <deregister_tm_clones+0xe>
 8000118:	4b03      	ldr	r3, [pc, #12]	; (8000128 <deregister_tm_clones+0x18>)
 800011a:	b103      	cbz	r3, 800011e <deregister_tm_clones+0xe>
 800011c:	4718      	bx	r3
 800011e:	4770      	bx	lr
 8000120:	20000074 	.word	0x20000074
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000

0800012c <register_tm_clones>:
 800012c:	4805      	ldr	r0, [pc, #20]	; (8000144 <register_tm_clones+0x18>)
 800012e:	4b06      	ldr	r3, [pc, #24]	; (8000148 <register_tm_clones+0x1c>)
 8000130:	1a1b      	subs	r3, r3, r0
 8000132:	0fd9      	lsrs	r1, r3, #31
 8000134:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000138:	1049      	asrs	r1, r1, #1
 800013a:	d002      	beq.n	8000142 <register_tm_clones+0x16>
 800013c:	4b03      	ldr	r3, [pc, #12]	; (800014c <register_tm_clones+0x20>)
 800013e:	b103      	cbz	r3, 8000142 <register_tm_clones+0x16>
 8000140:	4718      	bx	r3
 8000142:	4770      	bx	lr
 8000144:	20000074 	.word	0x20000074
 8000148:	20000074 	.word	0x20000074
 800014c:	00000000 	.word	0x00000000

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c06      	ldr	r4, [pc, #24]	; (800016c <__do_global_dtors_aux+0x1c>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b943      	cbnz	r3, 800016a <__do_global_dtors_aux+0x1a>
 8000158:	f7ff ffda 	bl	8000110 <deregister_tm_clones>
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	b113      	cbz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000160:	4804      	ldr	r0, [pc, #16]	; (8000174 <__do_global_dtors_aux+0x24>)
 8000162:	f3af 8000 	nop.w
 8000166:	2301      	movs	r3, #1
 8000168:	7023      	strb	r3, [r4, #0]
 800016a:	bd10      	pop	{r4, pc}
 800016c:	20000078 	.word	0x20000078
 8000170:	00000000 	.word	0x00000000
 8000174:	08006978 	.word	0x08006978

08000178 <frame_dummy>:
 8000178:	b508      	push	{r3, lr}
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <frame_dummy+0x18>)
 800017c:	b11b      	cbz	r3, 8000186 <frame_dummy+0xe>
 800017e:	4905      	ldr	r1, [pc, #20]	; (8000194 <frame_dummy+0x1c>)
 8000180:	4805      	ldr	r0, [pc, #20]	; (8000198 <frame_dummy+0x20>)
 8000182:	f3af 8000 	nop.w
 8000186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800018a:	f7ff bfcf 	b.w	800012c <register_tm_clones>
 800018e:	bf00      	nop
 8000190:	00000000 	.word	0x00000000
 8000194:	2000007c 	.word	0x2000007c
 8000198:	08006978 	.word	0x08006978

0800019c <CanFilterSetup>:
 * @brief Initialize CAN node for sending and receiving
 * @param: CAN filter structure
 * @retval: nothing
 */
void CanFilterSetup(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	// Use mask and list mode to filter IDs from the CAN ID BOM

	// Filter for 0x500 and 0x600 IDs
    CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 80001a0:	4b23      	ldr	r3, [pc, #140]	; (8000230 <CanFilterSetup+0x94>)
 80001a2:	f24a 0220 	movw	r2, #40992	; 0xa020
 80001a6:	601a      	str	r2, [r3, #0]
    CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 80001a8:	4b21      	ldr	r3, [pc, #132]	; (8000230 <CanFilterSetup+0x94>)
 80001aa:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 80001ae:	609a      	str	r2, [r3, #8]

    CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 80001b0:	4b1f      	ldr	r3, [pc, #124]	; (8000230 <CanFilterSetup+0x94>)
 80001b2:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 80001b6:	605a      	str	r2, [r3, #4]
    CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 80001b8:	4b1d      	ldr	r3, [pc, #116]	; (8000230 <CanFilterSetup+0x94>)
 80001ba:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80001be:	60da      	str	r2, [r3, #12]

    CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001c0:	4b1b      	ldr	r3, [pc, #108]	; (8000230 <CanFilterSetup+0x94>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	611a      	str	r2, [r3, #16]
    CAN_filter0.FilterBank = (uint32_t) 0;
 80001c6:	4b1a      	ldr	r3, [pc, #104]	; (8000230 <CanFilterSetup+0x94>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	615a      	str	r2, [r3, #20]
    CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 80001cc:	4b18      	ldr	r3, [pc, #96]	; (8000230 <CanFilterSetup+0x94>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	619a      	str	r2, [r3, #24]
    CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 80001d2:	4b17      	ldr	r3, [pc, #92]	; (8000230 <CanFilterSetup+0x94>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	61da      	str	r2, [r3, #28]
    CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 80001d8:	4b15      	ldr	r3, [pc, #84]	; (8000230 <CanFilterSetup+0x94>)
 80001da:	2201      	movs	r2, #1
 80001dc:	621a      	str	r2, [r3, #32]

    // Remaining IDs filtered with list mode
    CAN_filter1.FilterIdHigh = (uint16_t) (0x502 << 5);
 80001de:	4b15      	ldr	r3, [pc, #84]	; (8000234 <CanFilterSetup+0x98>)
 80001e0:	f24a 0240 	movw	r2, #41024	; 0xa040
 80001e4:	601a      	str	r2, [r3, #0]
    CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 80001e6:	4b13      	ldr	r3, [pc, #76]	; (8000234 <CanFilterSetup+0x98>)
 80001e8:	f248 0220 	movw	r2, #32800	; 0x8020
 80001ec:	609a      	str	r2, [r3, #8]

    CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 80001ee:	4b11      	ldr	r3, [pc, #68]	; (8000234 <CanFilterSetup+0x98>)
 80001f0:	f248 0220 	movw	r2, #32800	; 0x8020
 80001f4:	605a      	str	r2, [r3, #4]
    CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <CanFilterSetup+0x98>)
 80001f8:	f248 0220 	movw	r2, #32800	; 0x8020
 80001fc:	60da      	str	r2, [r3, #12]

    CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001fe:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <CanFilterSetup+0x98>)
 8000200:	2200      	movs	r2, #0
 8000202:	611a      	str	r2, [r3, #16]
    CAN_filter1.FilterBank = (uint32_t) 1;
 8000204:	4b0b      	ldr	r3, [pc, #44]	; (8000234 <CanFilterSetup+0x98>)
 8000206:	2201      	movs	r2, #1
 8000208:	615a      	str	r2, [r3, #20]
    CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <CanFilterSetup+0x98>)
 800020c:	2201      	movs	r2, #1
 800020e:	619a      	str	r2, [r3, #24]
    CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <CanFilterSetup+0x98>)
 8000212:	2200      	movs	r2, #0
 8000214:	61da      	str	r2, [r3, #28]
    CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <CanFilterSetup+0x98>)
 8000218:	2201      	movs	r2, #1
 800021a:	621a      	str	r2, [r3, #32]

	// Configure reception filters
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 800021c:	4904      	ldr	r1, [pc, #16]	; (8000230 <CanFilterSetup+0x94>)
 800021e:	4806      	ldr	r0, [pc, #24]	; (8000238 <CanFilterSetup+0x9c>)
 8000220:	f000 fd5b 	bl	8000cda <HAL_CAN_ConfigFilter>
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 8000224:	4903      	ldr	r1, [pc, #12]	; (8000234 <CanFilterSetup+0x98>)
 8000226:	4804      	ldr	r0, [pc, #16]	; (8000238 <CanFilterSetup+0x9c>)
 8000228:	f000 fd57 	bl	8000cda <HAL_CAN_ConfigFilter>

}
 800022c:	bf00      	nop
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000114 	.word	0x20000114
 8000234:	2000013c 	.word	0x2000013c
 8000238:	20000094 	.word	0x20000094

0800023c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <MX_CAN_Init+0x64>)
 8000242:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <MX_CAN_Init+0x68>)
 8000244:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000246:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <MX_CAN_Init+0x64>)
 8000248:	2204      	movs	r2, #4
 800024a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800024c:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <MX_CAN_Init+0x64>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <MX_CAN_Init+0x64>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <MX_CAN_Init+0x64>)
 800025a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800025e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <MX_CAN_Init+0x64>)
 8000262:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000266:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000268:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <MX_CAN_Init+0x64>)
 800026a:	2200      	movs	r2, #0
 800026c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <MX_CAN_Init+0x64>)
 8000270:	2200      	movs	r2, #0
 8000272:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <MX_CAN_Init+0x64>)
 8000276:	2200      	movs	r2, #0
 8000278:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <MX_CAN_Init+0x64>)
 800027c:	2200      	movs	r2, #0
 800027e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <MX_CAN_Init+0x64>)
 8000282:	2200      	movs	r2, #0
 8000284:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <MX_CAN_Init+0x64>)
 8000288:	2200      	movs	r2, #0
 800028a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <MX_CAN_Init+0x64>)
 800028e:	f000 fc29 	bl	8000ae4 <HAL_CAN_Init>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000298:	f000 fa80 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000094 	.word	0x20000094
 80002a4:	40006400 	.word	0x40006400

080002a8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b08a      	sub	sp, #40	; 0x28
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a29      	ldr	r2, [pc, #164]	; (8000368 <HAL_CAN_MspInit+0xc0>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d14b      	bne.n	8000360 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002c8:	4b28      	ldr	r3, [pc, #160]	; (800036c <HAL_CAN_MspInit+0xc4>)
 80002ca:	69db      	ldr	r3, [r3, #28]
 80002cc:	4a27      	ldr	r2, [pc, #156]	; (800036c <HAL_CAN_MspInit+0xc4>)
 80002ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002d2:	61d3      	str	r3, [r2, #28]
 80002d4:	4b25      	ldr	r3, [pc, #148]	; (800036c <HAL_CAN_MspInit+0xc4>)
 80002d6:	69db      	ldr	r3, [r3, #28]
 80002d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002dc:	613b      	str	r3, [r7, #16]
 80002de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <HAL_CAN_MspInit+0xc4>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a21      	ldr	r2, [pc, #132]	; (800036c <HAL_CAN_MspInit+0xc4>)
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b1f      	ldr	r3, [pc, #124]	; (800036c <HAL_CAN_MspInit+0xc4>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0308 	and.w	r3, r3, #8
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80002f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002fe:	2300      	movs	r3, #0
 8000300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000302:	2300      	movs	r3, #0
 8000304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000306:	f107 0314 	add.w	r3, r7, #20
 800030a:	4619      	mov	r1, r3
 800030c:	4818      	ldr	r0, [pc, #96]	; (8000370 <HAL_CAN_MspInit+0xc8>)
 800030e:	f001 fb27 	bl	8001960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000318:	2302      	movs	r3, #2
 800031a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800031c:	2303      	movs	r3, #3
 800031e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000320:	f107 0314 	add.w	r3, r7, #20
 8000324:	4619      	mov	r1, r3
 8000326:	4812      	ldr	r0, [pc, #72]	; (8000370 <HAL_CAN_MspInit+0xc8>)
 8000328:	f001 fb1a 	bl	8001960 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <HAL_CAN_MspInit+0xcc>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	627b      	str	r3, [r7, #36]	; 0x24
 8000332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000334:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000338:	627b      	str	r3, [r7, #36]	; 0x24
 800033a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800033c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000340:	627b      	str	r3, [r7, #36]	; 0x24
 8000342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000348:	627b      	str	r3, [r7, #36]	; 0x24
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <HAL_CAN_MspInit+0xcc>)
 800034c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800034e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000350:	2200      	movs	r2, #0
 8000352:	2105      	movs	r1, #5
 8000354:	2014      	movs	r0, #20
 8000356:	f001 fa28 	bl	80017aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800035a:	2014      	movs	r0, #20
 800035c:	f001 fa41 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000360:	bf00      	nop
 8000362:	3728      	adds	r7, #40	; 0x28
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40006400 	.word	0x40006400
 800036c:	40021000 	.word	0x40021000
 8000370:	40010c00 	.word	0x40010c00
 8000374:	40010000 	.word	0x40010000

08000378 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_CAN_DeactivateNotification(hcan,
 8000380:	2102      	movs	r1, #2
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f000 ff13 	bl	80011ae <HAL_CAN_DeactivateNotification>
 8000388:	4603      	mov	r3, r0
 800038a:	73fb      	strb	r3, [r7, #15]
    CAN_IT_RX_FIFO0_MSG_PENDING);
    assert_param(status == HAL_OK);

    // osThreadFlagsClear(canReadMessagesTaskHandle);
    osThreadFlagsSet(readCANTaskHandle, CAN_READY);
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2101      	movs	r1, #1
 8000392:	4618      	mov	r0, r3
 8000394:	f003 f94a 	bl	800362c <osThreadFlagsSet>
}
 8000398:	bf00      	nop
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	200000bc 	.word	0x200000bc

080003a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */

  canMessageQueueHandle = osMessageQueueNew(CAN_MESSAGE_QUEUE_SIZE, sizeof(CAN_msg_t), &canMessageQueue_attributes);
 80003a8:	4a0c      	ldr	r2, [pc, #48]	; (80003dc <MX_FREERTOS_Init+0x38>)
 80003aa:	2124      	movs	r1, #36	; 0x24
 80003ac:	200a      	movs	r0, #10
 80003ae:	f003 fa31 	bl	8003814 <osMessageQueueNew>
 80003b2:	4603      	mov	r3, r0
 80003b4:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <MX_FREERTOS_Init+0x3c>)
 80003b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // kernelLEDTaskHandle = osThreadNew(kernelLEDTask, NULL, &kernelLEDTask_attributes);
  
  readCANTaskHandle = osThreadNew(readCANTask, NULL, &readCANTask_attributes);
 80003b8:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <MX_FREERTOS_Init+0x40>)
 80003ba:	2100      	movs	r1, #0
 80003bc:	480a      	ldr	r0, [pc, #40]	; (80003e8 <MX_FREERTOS_Init+0x44>)
 80003be:	f003 f857 	bl	8003470 <osThreadNew>
 80003c2:	4603      	mov	r3, r0
 80003c4:	4a09      	ldr	r2, [pc, #36]	; (80003ec <MX_FREERTOS_Init+0x48>)
 80003c6:	6013      	str	r3, [r2, #0]
  transmitMessageTaskHandle = osThreadNew(transmitMessageTask, NULL, &transmitMessageTask_attributes);
 80003c8:	4a09      	ldr	r2, [pc, #36]	; (80003f0 <MX_FREERTOS_Init+0x4c>)
 80003ca:	2100      	movs	r1, #0
 80003cc:	4809      	ldr	r0, [pc, #36]	; (80003f4 <MX_FREERTOS_Init+0x50>)
 80003ce:	f003 f84f 	bl	8003470 <osThreadNew>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <MX_FREERTOS_Init+0x54>)
 80003d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	08006aa0 	.word	0x08006aa0
 80003e0:	200000c4 	.word	0x200000c4
 80003e4:	08006a58 	.word	0x08006a58
 80003e8:	080003fd 	.word	0x080003fd
 80003ec:	200000bc 	.word	0x200000bc
 80003f0:	08006a7c 	.word	0x08006a7c
 80003f4:	080004a9 	.word	0x080004a9
 80003f8:	200000c0 	.word	0x200000c0

080003fc <readCANTask>:

    osDelay(KERNEL_LED_DELAY);
  }
}

__NO_RETURN void readCANTask(void *argument) {
 80003fc:	b5b0      	push	{r4, r5, r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  static HAL_StatusTypeDef rx_status;
  static CAN_msg_t current_can_message;

  while (1) {
    // wait for thread flags to be set
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 8000404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000408:	2101      	movs	r1, #1
 800040a:	2001      	movs	r0, #1
 800040c:	f003 f96e 	bl	80036ec <osThreadFlagsWait>

    if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 8000410:	2100      	movs	r1, #0
 8000412:	481e      	ldr	r0, [pc, #120]	; (800048c <readCANTask+0x90>)
 8000414:	f000 fe7f 	bl	8001116 <HAL_CAN_GetRxFifoFillLevel>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d030      	beq.n	8000480 <readCANTask+0x84>
      // there are multiple CAN IDs being passed through the filter, pull out the current message
      rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, current_can_data);
 800041e:	4b1c      	ldr	r3, [pc, #112]	; (8000490 <readCANTask+0x94>)
 8000420:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <readCANTask+0x98>)
 8000422:	2100      	movs	r1, #0
 8000424:	4819      	ldr	r0, [pc, #100]	; (800048c <readCANTask+0x90>)
 8000426:	f000 fd65 	bl	8000ef4 <HAL_CAN_GetRxMessage>
 800042a:	4603      	mov	r3, r0
 800042c:	461a      	mov	r2, r3
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <readCANTask+0x9c>)
 8000430:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin);
 8000432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000436:	4819      	ldr	r0, [pc, #100]	; (800049c <readCANTask+0xa0>)
 8000438:	f001 fc2e 	bl	8001c98 <HAL_GPIO_TogglePin>

      // package into CAN_msg_t
      current_can_message.header = can_rx_header;
 800043c:	4a18      	ldr	r2, [pc, #96]	; (80004a0 <readCANTask+0xa4>)
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <readCANTask+0x98>)
 8000440:	4614      	mov	r4, r2
 8000442:	461d      	mov	r5, r3
 8000444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000448:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800044c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      for (uint8_t i=0; i<8; i++) {
 8000450:	2300      	movs	r3, #0
 8000452:	73fb      	strb	r3, [r7, #15]
 8000454:	e00a      	b.n	800046c <readCANTask+0x70>
        current_can_message.data[i] = current_can_data[i];
 8000456:	7bfa      	ldrb	r2, [r7, #15]
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	490d      	ldr	r1, [pc, #52]	; (8000490 <readCANTask+0x94>)
 800045c:	5c89      	ldrb	r1, [r1, r2]
 800045e:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <readCANTask+0xa4>)
 8000460:	4413      	add	r3, r2
 8000462:	460a      	mov	r2, r1
 8000464:	771a      	strb	r2, [r3, #28]
      for (uint8_t i=0; i<8; i++) {
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	3301      	adds	r3, #1
 800046a:	73fb      	strb	r3, [r7, #15]
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	2b07      	cmp	r3, #7
 8000470:	d9f1      	bls.n	8000456 <readCANTask+0x5a>
      }

      // priority=0, timeout=0
      osMessageQueuePut(canMessageQueueHandle, &current_can_message, 0U, 0U);
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <readCANTask+0xa8>)
 8000474:	6818      	ldr	r0, [r3, #0]
 8000476:	2300      	movs	r3, #0
 8000478:	2200      	movs	r2, #0
 800047a:	4909      	ldr	r1, [pc, #36]	; (80004a0 <readCANTask+0xa4>)
 800047c:	f003 fa50 	bl	8003920 <osMessageQueuePut>
    }

    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000480:	2102      	movs	r1, #2
 8000482:	4802      	ldr	r0, [pc, #8]	; (800048c <readCANTask+0x90>)
 8000484:	f000 fe6e 	bl	8001164 <HAL_CAN_ActivateNotification>
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 8000488:	e7bc      	b.n	8000404 <readCANTask+0x8>
 800048a:	bf00      	nop
 800048c:	20000094 	.word	0x20000094
 8000490:	20000184 	.word	0x20000184
 8000494:	20000164 	.word	0x20000164
 8000498:	200000c8 	.word	0x200000c8
 800049c:	40011000 	.word	0x40011000
 80004a0:	200000cc 	.word	0x200000cc
 80004a4:	200000c4 	.word	0x200000c4

080004a8 <transmitMessageTask>:

  }
}

__NO_RETURN void transmitMessageTask(void *argument) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  static CAN_msg_t can_message;
  osStatus_t queue_status;

  while (1) {
    // retrieve CAN message from queue
    queue_status = osMessageQueueGet(canMessageQueueHandle, &can_message, NULL, osWaitForever);
 80004b0:	4b31      	ldr	r3, [pc, #196]	; (8000578 <transmitMessageTask+0xd0>)
 80004b2:	6818      	ldr	r0, [r3, #0]
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004b8:	2200      	movs	r2, #0
 80004ba:	4930      	ldr	r1, [pc, #192]	; (800057c <transmitMessageTask+0xd4>)
 80004bc:	f003 faa4 	bl	8003a08 <osMessageQueueGet>
 80004c0:	61b8      	str	r0, [r7, #24]

    if (queue_status != osOK) {
 80004c2:	69bb      	ldr	r3, [r7, #24]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <transmitMessageTask+0x24>
        osThreadYield();
 80004c8:	f003 f87e 	bl	80035c8 <osThreadYield>
    }

    uint8_t c[1] = "D";
 80004cc:	2344      	movs	r3, #68	; 0x44
 80004ce:	753b      	strb	r3, [r7, #20]

    // TIMESTAMP: 8 ASCII characters
    for (uint8_t i=0; i<8; i++) {
 80004d0:	2300      	movs	r3, #0
 80004d2:	77fb      	strb	r3, [r7, #31]
 80004d4:	e00a      	b.n	80004ec <transmitMessageTask+0x44>
      // send 'D' as placeholder
      HAL_UART_Transmit(&huart3, c, sizeof(c), 1000);
 80004d6:	f107 0114 	add.w	r1, r7, #20
 80004da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004de:	2201      	movs	r2, #1
 80004e0:	4827      	ldr	r0, [pc, #156]	; (8000580 <transmitMessageTask+0xd8>)
 80004e2:	f002 fad4 	bl	8002a8e <HAL_UART_Transmit>
    for (uint8_t i=0; i<8; i++) {
 80004e6:	7ffb      	ldrb	r3, [r7, #31]
 80004e8:	3301      	adds	r3, #1
 80004ea:	77fb      	strb	r3, [r7, #31]
 80004ec:	7ffb      	ldrb	r3, [r7, #31]
 80004ee:	2b07      	cmp	r3, #7
 80004f0:	d9f1      	bls.n	80004d6 <transmitMessageTask+0x2e>
    }

    // CAN ID: 4 ASCII characters
    uint8_t id_h = 0xFFUL & (can_message.header.StdId >> 8);
 80004f2:	4b22      	ldr	r3, [pc, #136]	; (800057c <transmitMessageTask+0xd4>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	0a1b      	lsrs	r3, r3, #8
 80004f8:	75fb      	strb	r3, [r7, #23]
    uint8_t id_l = 0xFFUL & (can_message.header.StdId);
 80004fa:	4b20      	ldr	r3, [pc, #128]	; (800057c <transmitMessageTask+0xd4>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	75bb      	strb	r3, [r7, #22]

    sendChar(id_h);
 8000500:	7dfb      	ldrb	r3, [r7, #23]
 8000502:	4618      	mov	r0, r3
 8000504:	f000 f840 	bl	8000588 <sendChar>
    sendChar(id_l);
 8000508:	7dbb      	ldrb	r3, [r7, #22]
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f83c 	bl	8000588 <sendChar>

    // CAN DATA: 16 ASCII characters
    for (uint8_t i=0; i<8; i++) {
 8000510:	2300      	movs	r3, #0
 8000512:	77bb      	strb	r3, [r7, #30]
 8000514:	e009      	b.n	800052a <transmitMessageTask+0x82>
      // can_stream[2+i] = 0xFFUL & (can_message.data[i]);
      sendChar(can_message.data[i]);
 8000516:	7fbb      	ldrb	r3, [r7, #30]
 8000518:	4a18      	ldr	r2, [pc, #96]	; (800057c <transmitMessageTask+0xd4>)
 800051a:	4413      	add	r3, r2
 800051c:	7f1b      	ldrb	r3, [r3, #28]
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f832 	bl	8000588 <sendChar>
    for (uint8_t i=0; i<8; i++) {
 8000524:	7fbb      	ldrb	r3, [r7, #30]
 8000526:	3301      	adds	r3, #1
 8000528:	77bb      	strb	r3, [r7, #30]
 800052a:	7fbb      	ldrb	r3, [r7, #30]
 800052c:	2b07      	cmp	r3, #7
 800052e:	d9f2      	bls.n	8000516 <transmitMessageTask+0x6e>
    }

    // CAN DATA LENGTH: 1 ASCII character
    uint8_t length = "0123456789ABCDEF"[ can_message.header.DLC & 0xFUL];
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <transmitMessageTask+0xd4>)
 8000532:	691b      	ldr	r3, [r3, #16]
 8000534:	f003 030f 	and.w	r3, r3, #15
 8000538:	4a12      	ldr	r2, [pc, #72]	; (8000584 <transmitMessageTask+0xdc>)
 800053a:	5cd3      	ldrb	r3, [r2, r3]
 800053c:	74fb      	strb	r3, [r7, #19]
    HAL_UART_Transmit(&huart3, &length, 1, 1000);
 800053e:	f107 0113 	add.w	r1, r7, #19
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	2201      	movs	r2, #1
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <transmitMessageTask+0xd8>)
 800054a:	f002 faa0 	bl	8002a8e <HAL_UART_Transmit>

    // NEW LINE: 1 ASCII character
    uint8_t newline[1] = "\n";
 800054e:	230a      	movs	r3, #10
 8000550:	743b      	strb	r3, [r7, #16]
    HAL_UART_Transmit(&huart3, newline, sizeof(newline), 1000);
 8000552:	f107 0110 	add.w	r1, r7, #16
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	2201      	movs	r2, #1
 800055c:	4808      	ldr	r0, [pc, #32]	; (8000580 <transmitMessageTask+0xd8>)
 800055e:	f002 fa96 	bl	8002a8e <HAL_UART_Transmit>

    // CARRIAGE RETURN: 1 ASCII character
    uint8_t carriage[1] = "\r";
 8000562:	230d      	movs	r3, #13
 8000564:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(&huart3, carriage, sizeof(carriage), 1000);
 8000566:	f107 010c 	add.w	r1, r7, #12
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	2201      	movs	r2, #1
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <transmitMessageTask+0xd8>)
 8000572:	f002 fa8c 	bl	8002a8e <HAL_UART_Transmit>
  while (1) {
 8000576:	e79b      	b.n	80004b0 <transmitMessageTask+0x8>
 8000578:	200000c4 	.word	0x200000c4
 800057c:	200000f0 	.word	0x200000f0
 8000580:	200001d4 	.word	0x200001d4
 8000584:	080069f0 	.word	0x080069f0

08000588 <sendChar>:
    osThreadExit();
  }
}

void sendChar(char c)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_tx_status;

  //Convert to ASCII
  uint8_t c_H = "0123456789ABCDEF"[(c >> 4) & 0xFUL];
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	091b      	lsrs	r3, r3, #4
 8000596:	b2db      	uxtb	r3, r3
 8000598:	f003 030f 	and.w	r3, r3, #15
 800059c:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <sendChar+0x58>)
 800059e:	5cd3      	ldrb	r3, [r2, r3]
 80005a0:	73bb      	strb	r3, [r7, #14]
  uint8_t c_L = "0123456789ABCDEF"[ c & 0xFUL];
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	f003 030f 	and.w	r3, r3, #15
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <sendChar+0x58>)
 80005aa:	5cd3      	ldrb	r3, [r2, r3]
 80005ac:	737b      	strb	r3, [r7, #13]

  uart_tx_status = HAL_UART_Transmit(&huart3, &c_H, 1, 1000);
 80005ae:	f107 010e 	add.w	r1, r7, #14
 80005b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b6:	2201      	movs	r2, #1
 80005b8:	480a      	ldr	r0, [pc, #40]	; (80005e4 <sendChar+0x5c>)
 80005ba:	f002 fa68 	bl	8002a8e <HAL_UART_Transmit>
 80005be:	4603      	mov	r3, r0
 80005c0:	73fb      	strb	r3, [r7, #15]
  uart_tx_status = HAL_UART_Transmit(&huart3, &c_L, 1, 1000);
 80005c2:	f107 010d 	add.w	r1, r7, #13
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	2201      	movs	r2, #1
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <sendChar+0x5c>)
 80005ce:	f002 fa5e 	bl	8002a8e <HAL_UART_Transmit>
 80005d2:	4603      	mov	r3, r0
 80005d4:	73fb      	strb	r3, [r7, #15]
}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	080069f0 	.word	0x080069f0
 80005e4:	200001d4 	.word	0x200001d4

080005e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MX_GPIO_Init+0xa8>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a23      	ldr	r2, [pc, #140]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <MX_GPIO_Init+0xa8>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0310 	and.w	r3, r3, #16
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a1d      	ldr	r2, [pc, #116]	; (8000690 <MX_GPIO_Init+0xa8>)
 800061a:	f043 0320 	orr.w	r3, r3, #32
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0320 	and.w	r3, r3, #32
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_GPIO_Init+0xa8>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a17      	ldr	r2, [pc, #92]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000632:	f043 0308 	orr.w	r3, r3, #8
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_GPIO_Init+0xa8>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0308 	and.w	r3, r3, #8
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a11      	ldr	r2, [pc, #68]	; (8000690 <MX_GPIO_Init+0xa8>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <MX_GPIO_Init+0xac>)
 8000664:	f001 fb00 	bl	8001c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KERNEL_LED_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2302      	movs	r3, #2
 8000678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KERNEL_LED_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4619      	mov	r1, r3
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_GPIO_Init+0xac>)
 8000682:	f001 f96d 	bl	8001960 <HAL_GPIO_Init>

}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000
 8000694:	40011000 	.word	0x40011000

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069e:	2003      	movs	r0, #3
 80006a0:	f001 f878 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 f9ec 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f820 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f7ff ff9c 	bl	80005e8 <MX_GPIO_Init>
  MX_CAN_Init();
 80006b0:	f7ff fdc4 	bl	800023c <MX_CAN_Init>
  MX_USART3_UART_Init();
 80006b4:	f000 f940 	bl	8000938 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // <----- CAN set-up ------>
  CanFilterSetup();
 80006b8:	f7ff fd70 	bl	800019c <CanFilterSetup>
  can_start = HAL_CAN_Start(&hcan);
 80006bc:	4809      	ldr	r0, [pc, #36]	; (80006e4 <main+0x4c>)
 80006be:	f000 fbd5 	bl	8000e6c <HAL_CAN_Start>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <main+0x50>)
 80006c8:	701a      	strb	r2, [r3, #0]
  assert_param(can_start == HAL_OK);

  HAL_StatusTypeDef can_notification_status = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80006ca:	2102      	movs	r1, #2
 80006cc:	4805      	ldr	r0, [pc, #20]	; (80006e4 <main+0x4c>)
 80006ce:	f000 fd49 	bl	8001164 <HAL_CAN_ActivateNotification>
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  assert_param(can_notification_status == HAL_OK);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006d6:	f002 fe65 	bl	80033a4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80006da:	f7ff fe63 	bl	80003a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006de:	f002 fe93 	bl	8003408 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <main+0x4a>
 80006e4:	20000094 	.word	0x20000094
 80006e8:	20000180 	.word	0x20000180

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b090      	sub	sp, #64	; 0x40
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0318 	add.w	r3, r7, #24
 80006f6:	2228      	movs	r2, #40	; 0x28
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f006 f880 	bl	8006800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070e:	2301      	movs	r3, #1
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800072a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0318 	add.w	r3, r7, #24
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fac9 	bl	8001ccc <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000740:	f000 f82c 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2102      	movs	r1, #2
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fd36 	bl	80021d0 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800076a:	f000 f817 	bl	800079c <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3740      	adds	r7, #64	; 0x40
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d101      	bne.n	800078e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800078a:	f000 f98f 	bl	8000aac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40012c00 	.word	0x40012c00

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_MspInit+0x68>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <HAL_MspInit+0x68>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6193      	str	r3, [r2, #24]
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <HAL_MspInit+0x68>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_MspInit+0x68>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a11      	ldr	r2, [pc, #68]	; (8000810 <HAL_MspInit+0x68>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <HAL_MspInit+0x68>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	210f      	movs	r1, #15
 80007e2:	f06f 0001 	mvn.w	r0, #1
 80007e6:	f000 ffe0 	bl	80017aa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <HAL_MspInit+0x6c>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	4a04      	ldr	r2, [pc, #16]	; (8000814 <HAL_MspInit+0x6c>)
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000
 8000814:	40010000 	.word	0x40010000

08000818 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000828:	2200      	movs	r2, #0
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	2019      	movs	r0, #25
 800082e:	f000 ffbc 	bl	80017aa <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000832:	2019      	movs	r0, #25
 8000834:	f000 ffd5 	bl	80017e2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <HAL_InitTick+0x9c>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <HAL_InitTick+0x9c>)
 800083e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <HAL_InitTick+0x9c>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000850:	f107 0210 	add.w	r2, r7, #16
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fe32 	bl	80024c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000860:	f001 fe1c 	bl	800249c <HAL_RCC_GetPCLK2Freq>
 8000864:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000868:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <HAL_InitTick+0xa0>)
 800086a:	fba2 2303 	umull	r2, r3, r2, r3
 800086e:	0c9b      	lsrs	r3, r3, #18
 8000870:	3b01      	subs	r3, #1
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_InitTick+0xa4>)
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <HAL_InitTick+0xa8>)
 8000878:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_InitTick+0xa4>)
 800087c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000880:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_InitTick+0xa4>)
 8000884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000886:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_InitTick+0xa4>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HAL_InitTick+0xa4>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <HAL_InitTick+0xa4>)
 8000896:	f001 fe63 	bl	8002560 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d104      	bne.n	80008aa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <HAL_InitTick+0xa4>)
 80008a2:	f001 feb5 	bl	8002610 <HAL_TIM_Base_Start_IT>
 80008a6:	4603      	mov	r3, r0
 80008a8:	e000      	b.n	80008ac <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3730      	adds	r7, #48	; 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000
 80008b8:	431bde83 	.word	0x431bde83
 80008bc:	2000018c 	.word	0x2000018c
 80008c0:	40012c00 	.word	0x40012c00

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
	...

080008f0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008f6:	f000 fc80 	bl	80011fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000094 	.word	0x20000094

08000904 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM1_UP_IRQHandler+0x10>)
 800090a:	f001 fed3 	bl	80026b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000018c 	.word	0x2000018c

08000918 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <USART3_IRQHandler+0x10>)
 800091e:	f002 f949 	bl	8002bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200001d4 	.word	0x200001d4

0800092c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_USART3_UART_Init+0x50>)
 8000940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 8000944:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART3_UART_Init+0x4c>)
 8000970:	f002 f840 	bl	80029f4 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800097a:	f7ff ff0f 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200001d4 	.word	0x200001d4
 8000988:	40004800 	.word	0x40004800

0800098c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a20      	ldr	r2, [pc, #128]	; (8000a28 <HAL_UART_MspInit+0x9c>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d139      	bne.n	8000a20 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <HAL_UART_MspInit+0xa0>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	4a1e      	ldr	r2, [pc, #120]	; (8000a2c <HAL_UART_MspInit+0xa0>)
 80009b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b6:	61d3      	str	r3, [r2, #28]
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <HAL_UART_MspInit+0xa0>)
 80009ba:	69db      	ldr	r3, [r3, #28]
 80009bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <HAL_UART_MspInit+0xa0>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0xa0>)
 80009ca:	f043 0308 	orr.w	r3, r3, #8
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <HAL_UART_MspInit+0xa0>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0308 	and.w	r3, r3, #8
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	4619      	mov	r1, r3
 80009f0:	480f      	ldr	r0, [pc, #60]	; (8000a30 <HAL_UART_MspInit+0xa4>)
 80009f2:	f000 ffb5 	bl	8001960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4809      	ldr	r0, [pc, #36]	; (8000a30 <HAL_UART_MspInit+0xa4>)
 8000a0c:	f000 ffa8 	bl	8001960 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2105      	movs	r1, #5
 8000a14:	2027      	movs	r0, #39	; 0x27
 8000a16:	f000 fec8 	bl	80017aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a1a:	2027      	movs	r0, #39	; 0x27
 8000a1c:	f000 fee1 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40004800 	.word	0x40004800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010c00 	.word	0x40010c00

08000a34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	; (8000a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	; (8000a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a5a:	f7ff ff67 	bl	800092c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f005 fe9d 	bl	800679c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a62:	f7ff fe19 	bl	8000698 <main>
  bx lr
 8000a66:	4770      	bx	lr
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a70:	08006ad8 	.word	0x08006ad8
  ldr r2, =_sbss
 8000a74:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a78:	20002be0 	.word	0x20002be0

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_Init+0x28>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_Init+0x28>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 fe7f 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	200f      	movs	r0, #15
 8000a98:	f7ff febe 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff fe84 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40022000 	.word	0x40022000

08000aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x1c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x20>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a03      	ldr	r2, [pc, #12]	; (8000acc <HAL_IncTick+0x20>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000218 	.word	0x20000218

08000ad0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <HAL_GetTick+0x10>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	20000218 	.word	0x20000218

08000ae4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e0ed      	b.n	8000cd2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d102      	bne.n	8000b08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff fbd0 	bl	80002a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f042 0201 	orr.w	r2, r2, #1
 8000b16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b18:	f7ff ffda 	bl	8000ad0 <HAL_GetTick>
 8000b1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b1e:	e012      	b.n	8000b46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b20:	f7ff ffd6 	bl	8000ad0 <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	d90b      	bls.n	8000b46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2205      	movs	r2, #5
 8000b3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e0c5      	b.n	8000cd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0e5      	beq.n	8000b20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f022 0202 	bic.w	r2, r2, #2
 8000b62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b64:	f7ff ffb4 	bl	8000ad0 <HAL_GetTick>
 8000b68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b6a:	e012      	b.n	8000b92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b6c:	f7ff ffb0 	bl	8000ad0 <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	2b0a      	cmp	r3, #10
 8000b78:	d90b      	bls.n	8000b92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2205      	movs	r2, #5
 8000b8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e09f      	b.n	8000cd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0302 	and.w	r3, r3, #2
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1e5      	bne.n	8000b6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7e1b      	ldrb	r3, [r3, #24]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d108      	bne.n	8000bba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	e007      	b.n	8000bca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7e5b      	ldrb	r3, [r3, #25]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d108      	bne.n	8000be4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	e007      	b.n	8000bf4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7e9b      	ldrb	r3, [r3, #26]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d108      	bne.n	8000c0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f042 0220 	orr.w	r2, r2, #32
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	e007      	b.n	8000c1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 0220 	bic.w	r2, r2, #32
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	7edb      	ldrb	r3, [r3, #27]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d108      	bne.n	8000c38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 0210 	bic.w	r2, r2, #16
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e007      	b.n	8000c48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f042 0210 	orr.w	r2, r2, #16
 8000c46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7f1b      	ldrb	r3, [r3, #28]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d108      	bne.n	8000c62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f042 0208 	orr.w	r2, r2, #8
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	e007      	b.n	8000c72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f022 0208 	bic.w	r2, r2, #8
 8000c70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	7f5b      	ldrb	r3, [r3, #29]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d108      	bne.n	8000c8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f042 0204 	orr.w	r2, r2, #4
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	e007      	b.n	8000c9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f022 0204 	bic.w	r2, r2, #4
 8000c9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	431a      	orrs	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	ea42 0103 	orr.w	r1, r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b087      	sub	sp, #28
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cf0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cf2:	7cfb      	ldrb	r3, [r7, #19]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d003      	beq.n	8000d00 <HAL_CAN_ConfigFilter+0x26>
 8000cf8:	7cfb      	ldrb	r3, [r7, #19]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	f040 80aa 	bne.w	8000e54 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d06:	f043 0201 	orr.w	r2, r3, #1
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	f003 031f 	and.w	r3, r3, #31
 8000d18:	2201      	movs	r2, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d123      	bne.n	8000d82 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	401a      	ands	r2, r3
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3248      	adds	r2, #72	; 0x48
 8000d62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d78:	6979      	ldr	r1, [r7, #20]
 8000d7a:	3348      	adds	r3, #72	; 0x48
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	440b      	add	r3, r1
 8000d80:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d122      	bne.n	8000dd0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	431a      	orrs	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000daa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3248      	adds	r2, #72	; 0x48
 8000db0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dc4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dc6:	6979      	ldr	r1, [r7, #20]
 8000dc8:	3348      	adds	r3, #72	; 0x48
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	440b      	add	r3, r1
 8000dce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d109      	bne.n	8000dec <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000dea:	e007      	b.n	8000dfc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	431a      	orrs	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d109      	bne.n	8000e18 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e16:	e007      	b.n	8000e28 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	431a      	orrs	r2, r3
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d107      	bne.n	8000e40 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e46:	f023 0201 	bic.w	r2, r3, #1
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	e006      	b.n	8000e62 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
  }
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	371c      	adds	r7, #28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d12e      	bne.n	8000ede <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2202      	movs	r2, #2
 8000e84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e98:	f7ff fe1a 	bl	8000ad0 <HAL_GetTick>
 8000e9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e9e:	e012      	b.n	8000ec6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ea0:	f7ff fe16 	bl	8000ad0 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b0a      	cmp	r3, #10
 8000eac:	d90b      	bls.n	8000ec6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2205      	movs	r2, #5
 8000ebe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e012      	b.n	8000eec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1e5      	bne.n	8000ea0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e006      	b.n	8000eec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
  }
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f08:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f0a:	7dfb      	ldrb	r3, [r7, #23]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d003      	beq.n	8000f18 <HAL_CAN_GetRxMessage+0x24>
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	f040 80f3 	bne.w	80010fe <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10e      	bne.n	8000f3c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d116      	bne.n	8000f5a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e0e7      	b.n	800110c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d107      	bne.n	8000f5a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e0d8      	b.n	800110c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	331b      	adds	r3, #27
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	4413      	add	r3, r2
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0204 	and.w	r2, r3, #4
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10c      	bne.n	8000f92 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	331b      	adds	r3, #27
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	4413      	add	r3, r2
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	0d5b      	lsrs	r3, r3, #21
 8000f88:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e00b      	b.n	8000faa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	331b      	adds	r3, #27
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4413      	add	r3, r2
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	331b      	adds	r3, #27
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	4413      	add	r3, r2
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0202 	and.w	r2, r3, #2
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	331b      	adds	r3, #27
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	4413      	add	r3, r2
 8000fcc:	3304      	adds	r3, #4
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 020f 	and.w	r2, r3, #15
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	331b      	adds	r3, #27
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	4413      	add	r3, r2
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	331b      	adds	r3, #27
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0c1b      	lsrs	r3, r3, #16
 8001002:	b29a      	uxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	4413      	add	r3, r2
 8001012:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	0a1a      	lsrs	r2, r3, #8
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	4413      	add	r3, r2
 8001042:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	0c1a      	lsrs	r2, r3, #16
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	3302      	adds	r3, #2
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	4413      	add	r3, r2
 800105c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	0e1a      	lsrs	r2, r3, #24
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	3303      	adds	r3, #3
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	3304      	adds	r3, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	4413      	add	r3, r2
 800108e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	0a1a      	lsrs	r2, r3, #8
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3305      	adds	r3, #5
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	4413      	add	r3, r2
 80010a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	0c1a      	lsrs	r2, r3, #16
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	3306      	adds	r3, #6
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4413      	add	r3, r2
 80010c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	0e1a      	lsrs	r2, r3, #24
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3307      	adds	r3, #7
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d108      	bne.n	80010ea <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0220 	orr.w	r2, r2, #32
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	e007      	b.n	80010fa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0220 	orr.w	r2, r2, #32
 80010f8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e006      	b.n	800110c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
  }
}
 800110c:	4618      	mov	r0, r3
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001116:	b480      	push	{r7}
 8001118:	b085      	sub	sp, #20
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800112a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800112c:	7afb      	ldrb	r3, [r7, #11]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d002      	beq.n	8001138 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001132:	7afb      	ldrb	r3, [r7, #11]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d10f      	bne.n	8001158 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d106      	bne.n	800114c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	e005      	b.n	8001158 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001158:	68fb      	ldr	r3, [r7, #12]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001174:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d002      	beq.n	8001182 <HAL_CAN_ActivateNotification+0x1e>
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d109      	bne.n	8001196 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6959      	ldr	r1, [r3, #20]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e006      	b.n	80011a4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
  }
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b085      	sub	sp, #20
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011be:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d002      	beq.n	80011cc <HAL_CAN_DeactivateNotification+0x1e>
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d10a      	bne.n	80011e2 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6959      	ldr	r1, [r3, #20]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	43da      	mvns	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	400a      	ands	r2, r1
 80011dc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e006      	b.n	80011f0 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
  }
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b08a      	sub	sp, #40	; 0x28
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d07c      	beq.n	800133a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d023      	beq.n	8001292 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2201      	movs	r2, #1
 8001250:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 f983 	bl	8001568 <HAL_CAN_TxMailbox0CompleteCallback>
 8001262:	e016      	b.n	8001292 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	d004      	beq.n	8001278 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
 8001276:	e00c      	b.n	8001292 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d004      	beq.n	800128c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
 800128a:	e002      	b.n	8001292 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f986 	bl	800159e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001298:	2b00      	cmp	r3, #0
 800129a:	d024      	beq.n	80012e6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 f962 	bl	800157a <HAL_CAN_TxMailbox1CompleteCallback>
 80012b6:	e016      	b.n	80012e6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ca:	e00c      	b.n	80012e6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d004      	beq.n	80012e0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
 80012de:	e002      	b.n	80012e6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 f965 	bl	80015b0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d024      	beq.n	800133a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 f941 	bl	800158c <HAL_CAN_TxMailbox2CompleteCallback>
 800130a:	e016      	b.n	800133a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d004      	beq.n	8001320 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
 800131e:	e00c      	b.n	800133a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
 8001332:	e002      	b.n	800133a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f944 	bl	80015c2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00c      	beq.n	800135e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001354:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2210      	movs	r2, #16
 800135c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00b      	beq.n	8001380 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d006      	beq.n	8001380 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2208      	movs	r2, #8
 8001378:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f92a 	bl	80015d4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d009      	beq.n	800139e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7fe ffed 	bl	8000378 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00c      	beq.n	80013c2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2210      	movs	r2, #16
 80013c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013c2:	6a3b      	ldr	r3, [r7, #32]
 80013c4:	f003 0320 	and.w	r3, r3, #32
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00b      	beq.n	80013e4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2208      	movs	r2, #8
 80013dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f90a 	bl	80015f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d009      	beq.n	8001402 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 f8f2 	bl	80015e6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00b      	beq.n	8001424 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2210      	movs	r2, #16
 800141c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f8f3 	bl	800160a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00b      	beq.n	8001446 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2208      	movs	r2, #8
 800143e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f8eb 	bl	800161c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d07b      	beq.n	8001548 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	2b00      	cmp	r3, #0
 8001458:	d072      	beq.n	8001540 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001492:	6a3b      	ldr	r3, [r7, #32]
 8001494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d043      	beq.n	8001540 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d03e      	beq.n	8001540 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014c8:	2b60      	cmp	r3, #96	; 0x60
 80014ca:	d02b      	beq.n	8001524 <HAL_CAN_IRQHandler+0x32a>
 80014cc:	2b60      	cmp	r3, #96	; 0x60
 80014ce:	d82e      	bhi.n	800152e <HAL_CAN_IRQHandler+0x334>
 80014d0:	2b50      	cmp	r3, #80	; 0x50
 80014d2:	d022      	beq.n	800151a <HAL_CAN_IRQHandler+0x320>
 80014d4:	2b50      	cmp	r3, #80	; 0x50
 80014d6:	d82a      	bhi.n	800152e <HAL_CAN_IRQHandler+0x334>
 80014d8:	2b40      	cmp	r3, #64	; 0x40
 80014da:	d019      	beq.n	8001510 <HAL_CAN_IRQHandler+0x316>
 80014dc:	2b40      	cmp	r3, #64	; 0x40
 80014de:	d826      	bhi.n	800152e <HAL_CAN_IRQHandler+0x334>
 80014e0:	2b30      	cmp	r3, #48	; 0x30
 80014e2:	d010      	beq.n	8001506 <HAL_CAN_IRQHandler+0x30c>
 80014e4:	2b30      	cmp	r3, #48	; 0x30
 80014e6:	d822      	bhi.n	800152e <HAL_CAN_IRQHandler+0x334>
 80014e8:	2b10      	cmp	r3, #16
 80014ea:	d002      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x2f8>
 80014ec:	2b20      	cmp	r3, #32
 80014ee:	d005      	beq.n	80014fc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80014f0:	e01d      	b.n	800152e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	f043 0308 	orr.w	r3, r3, #8
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014fa:	e019      	b.n	8001530 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	f043 0310 	orr.w	r3, r3, #16
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001504:	e014      	b.n	8001530 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	f043 0320 	orr.w	r3, r3, #32
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800150e:	e00f      	b.n	8001530 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001518:	e00a      	b.n	8001530 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001522:	e005      	b.n	8001530 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800152c:	e000      	b.n	8001530 <HAL_CAN_IRQHandler+0x336>
            break;
 800152e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699a      	ldr	r2, [r3, #24]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800153e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2204      	movs	r2, #4
 8001546:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	2b00      	cmp	r3, #0
 800154c:	d008      	beq.n	8001560 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f867 	bl	800162e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800165c:	4013      	ands	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	60d3      	str	r3, [r2, #12]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <__NVIC_GetPriorityGrouping+0x18>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	f003 0307 	and.w	r3, r3, #7
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	db0b      	blt.n	80016ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f003 021f 	and.w	r2, r3, #31
 80016bc:	4906      	ldr	r1, [pc, #24]	; (80016d8 <__NVIC_EnableIRQ+0x34>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	2001      	movs	r0, #1
 80016c6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff4f 	bl	8001640 <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff64 	bl	8001688 <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ffb2 	bl	8001730 <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff81 	bl	80016dc <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff57 	bl	80016a4 <__NVIC_EnableIRQ>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001810:	2b02      	cmp	r3, #2
 8001812:	d008      	beq.n	8001826 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2204      	movs	r2, #4
 8001818:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e020      	b.n	8001868 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 020e 	bic.w	r2, r2, #14
 8001834:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184e:	2101      	movs	r1, #1
 8001850:	fa01 f202 	lsl.w	r2, r1, r2
 8001854:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001866:	7bfb      	ldrb	r3, [r7, #15]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
	...

08001874 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001886:	2b02      	cmp	r3, #2
 8001888:	d005      	beq.n	8001896 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2204      	movs	r2, #4
 800188e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e051      	b.n	800193a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 020e 	bic.w	r2, r2, #14
 80018a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a22      	ldr	r2, [pc, #136]	; (8001944 <HAL_DMA_Abort_IT+0xd0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d029      	beq.n	8001914 <HAL_DMA_Abort_IT+0xa0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a20      	ldr	r2, [pc, #128]	; (8001948 <HAL_DMA_Abort_IT+0xd4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d022      	beq.n	8001910 <HAL_DMA_Abort_IT+0x9c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a1f      	ldr	r2, [pc, #124]	; (800194c <HAL_DMA_Abort_IT+0xd8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d01a      	beq.n	800190a <HAL_DMA_Abort_IT+0x96>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <HAL_DMA_Abort_IT+0xdc>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d012      	beq.n	8001904 <HAL_DMA_Abort_IT+0x90>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a1c      	ldr	r2, [pc, #112]	; (8001954 <HAL_DMA_Abort_IT+0xe0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d00a      	beq.n	80018fe <HAL_DMA_Abort_IT+0x8a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1a      	ldr	r2, [pc, #104]	; (8001958 <HAL_DMA_Abort_IT+0xe4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d102      	bne.n	80018f8 <HAL_DMA_Abort_IT+0x84>
 80018f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018f6:	e00e      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 80018f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018fc:	e00b      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 80018fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001902:	e008      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	e005      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 800190a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190e:	e002      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 8001910:	2310      	movs	r3, #16
 8001912:	e000      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 8001914:	2301      	movs	r3, #1
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <HAL_DMA_Abort_IT+0xe8>)
 8001918:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
    } 
  }
  return status;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40020008 	.word	0x40020008
 8001948:	4002001c 	.word	0x4002001c
 800194c:	40020030 	.word	0x40020030
 8001950:	40020044 	.word	0x40020044
 8001954:	40020058 	.word	0x40020058
 8001958:	4002006c 	.word	0x4002006c
 800195c:	40020000 	.word	0x40020000

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b08b      	sub	sp, #44	; 0x2c
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001972:	e169      	b.n	8001c48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001974:	2201      	movs	r2, #1
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 8158 	bne.w	8001c42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4a9a      	ldr	r2, [pc, #616]	; (8001c00 <HAL_GPIO_Init+0x2a0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d05e      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 800199c:	4a98      	ldr	r2, [pc, #608]	; (8001c00 <HAL_GPIO_Init+0x2a0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d875      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019a2:	4a98      	ldr	r2, [pc, #608]	; (8001c04 <HAL_GPIO_Init+0x2a4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d058      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019a8:	4a96      	ldr	r2, [pc, #600]	; (8001c04 <HAL_GPIO_Init+0x2a4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d86f      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019ae:	4a96      	ldr	r2, [pc, #600]	; (8001c08 <HAL_GPIO_Init+0x2a8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d052      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019b4:	4a94      	ldr	r2, [pc, #592]	; (8001c08 <HAL_GPIO_Init+0x2a8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d869      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019ba:	4a94      	ldr	r2, [pc, #592]	; (8001c0c <HAL_GPIO_Init+0x2ac>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d04c      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019c0:	4a92      	ldr	r2, [pc, #584]	; (8001c0c <HAL_GPIO_Init+0x2ac>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d863      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019c6:	4a92      	ldr	r2, [pc, #584]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d046      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019cc:	4a90      	ldr	r2, [pc, #576]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d85d      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019d2:	2b12      	cmp	r3, #18
 80019d4:	d82a      	bhi.n	8001a2c <HAL_GPIO_Init+0xcc>
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d859      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019da:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <HAL_GPIO_Init+0x80>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	08001a5b 	.word	0x08001a5b
 80019e4:	08001a35 	.word	0x08001a35
 80019e8:	08001a47 	.word	0x08001a47
 80019ec:	08001a89 	.word	0x08001a89
 80019f0:	08001a8f 	.word	0x08001a8f
 80019f4:	08001a8f 	.word	0x08001a8f
 80019f8:	08001a8f 	.word	0x08001a8f
 80019fc:	08001a8f 	.word	0x08001a8f
 8001a00:	08001a8f 	.word	0x08001a8f
 8001a04:	08001a8f 	.word	0x08001a8f
 8001a08:	08001a8f 	.word	0x08001a8f
 8001a0c:	08001a8f 	.word	0x08001a8f
 8001a10:	08001a8f 	.word	0x08001a8f
 8001a14:	08001a8f 	.word	0x08001a8f
 8001a18:	08001a8f 	.word	0x08001a8f
 8001a1c:	08001a8f 	.word	0x08001a8f
 8001a20:	08001a8f 	.word	0x08001a8f
 8001a24:	08001a3d 	.word	0x08001a3d
 8001a28:	08001a51 	.word	0x08001a51
 8001a2c:	4a79      	ldr	r2, [pc, #484]	; (8001c14 <HAL_GPIO_Init+0x2b4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a32:	e02c      	b.n	8001a8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	623b      	str	r3, [r7, #32]
          break;
 8001a3a:	e029      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	3304      	adds	r3, #4
 8001a42:	623b      	str	r3, [r7, #32]
          break;
 8001a44:	e024      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	3308      	adds	r3, #8
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e01f      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	330c      	adds	r3, #12
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e01a      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a62:	2304      	movs	r3, #4
 8001a64:	623b      	str	r3, [r7, #32]
          break;
 8001a66:	e013      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a70:	2308      	movs	r3, #8
 8001a72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	611a      	str	r2, [r3, #16]
          break;
 8001a7a:	e009      	b.n	8001a90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	615a      	str	r2, [r3, #20]
          break;
 8001a86:	e003      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          break;
 8001a8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2bff      	cmp	r3, #255	; 0xff
 8001a94:	d801      	bhi.n	8001a9a <HAL_GPIO_Init+0x13a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	e001      	b.n	8001a9e <HAL_GPIO_Init+0x13e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2bff      	cmp	r3, #255	; 0xff
 8001aa4:	d802      	bhi.n	8001aac <HAL_GPIO_Init+0x14c>
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	e002      	b.n	8001ab2 <HAL_GPIO_Init+0x152>
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	3b08      	subs	r3, #8
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	210f      	movs	r1, #15
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	6a39      	ldr	r1, [r7, #32]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	431a      	orrs	r2, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80b1 	beq.w	8001c42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae0:	4b4d      	ldr	r3, [pc, #308]	; (8001c18 <HAL_GPIO_Init+0x2b8>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a4c      	ldr	r2, [pc, #304]	; (8001c18 <HAL_GPIO_Init+0x2b8>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <HAL_GPIO_Init+0x2b8>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001af8:	4a48      	ldr	r2, [pc, #288]	; (8001c1c <HAL_GPIO_Init+0x2bc>)
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	220f      	movs	r2, #15
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a40      	ldr	r2, [pc, #256]	; (8001c20 <HAL_GPIO_Init+0x2c0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <HAL_GPIO_Init+0x1ec>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a3f      	ldr	r2, [pc, #252]	; (8001c24 <HAL_GPIO_Init+0x2c4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d00d      	beq.n	8001b48 <HAL_GPIO_Init+0x1e8>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a3e      	ldr	r2, [pc, #248]	; (8001c28 <HAL_GPIO_Init+0x2c8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d007      	beq.n	8001b44 <HAL_GPIO_Init+0x1e4>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a3d      	ldr	r2, [pc, #244]	; (8001c2c <HAL_GPIO_Init+0x2cc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d101      	bne.n	8001b40 <HAL_GPIO_Init+0x1e0>
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e006      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b40:	2304      	movs	r3, #4
 8001b42:	e004      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e002      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b50:	f002 0203 	and.w	r2, r2, #3
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	4093      	lsls	r3, r2
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b5e:	492f      	ldr	r1, [pc, #188]	; (8001c1c <HAL_GPIO_Init+0x2bc>)
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b78:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	492c      	ldr	r1, [pc, #176]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	4928      	ldr	r1, [pc, #160]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba0:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4922      	ldr	r1, [pc, #136]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	491e      	ldr	r1, [pc, #120]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4918      	ldr	r1, [pc, #96]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4914      	ldr	r1, [pc, #80]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d021      	beq.n	8001c34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	490e      	ldr	r1, [pc, #56]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60cb      	str	r3, [r1, #12]
 8001bfc:	e021      	b.n	8001c42 <HAL_GPIO_Init+0x2e2>
 8001bfe:	bf00      	nop
 8001c00:	10320000 	.word	0x10320000
 8001c04:	10310000 	.word	0x10310000
 8001c08:	10220000 	.word	0x10220000
 8001c0c:	10210000 	.word	0x10210000
 8001c10:	10120000 	.word	0x10120000
 8001c14:	10110000 	.word	0x10110000
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	40010800 	.word	0x40010800
 8001c24:	40010c00 	.word	0x40010c00
 8001c28:	40011000 	.word	0x40011000
 8001c2c:	40011400 	.word	0x40011400
 8001c30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_GPIO_Init+0x304>)
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	4909      	ldr	r1, [pc, #36]	; (8001c64 <HAL_GPIO_Init+0x304>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	3301      	adds	r3, #1
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f47f ae8e 	bne.w	8001974 <HAL_GPIO_Init+0x14>
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	372c      	adds	r7, #44	; 0x2c
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40010400 	.word	0x40010400

08001c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
 8001c74:	4613      	mov	r3, r2
 8001c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c78:	787b      	ldrb	r3, [r7, #1]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c84:	e003      	b.n	8001c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	041a      	lsls	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	611a      	str	r2, [r3, #16]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001caa:	887a      	ldrh	r2, [r7, #2]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	041a      	lsls	r2, r3, #16
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	43d9      	mvns	r1, r3
 8001cb6:	887b      	ldrh	r3, [r7, #2]
 8001cb8:	400b      	ands	r3, r1
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	611a      	str	r2, [r3, #16]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e272      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 8087 	beq.w	8001dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cec:	4b92      	ldr	r3, [pc, #584]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d00c      	beq.n	8001d12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cf8:	4b8f      	ldr	r3, [pc, #572]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 030c 	and.w	r3, r3, #12
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d112      	bne.n	8001d2a <HAL_RCC_OscConfig+0x5e>
 8001d04:	4b8c      	ldr	r3, [pc, #560]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d10:	d10b      	bne.n	8001d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d12:	4b89      	ldr	r3, [pc, #548]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d06c      	beq.n	8001df8 <HAL_RCC_OscConfig+0x12c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d168      	bne.n	8001df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e24c      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x76>
 8001d34:	4b80      	ldr	r3, [pc, #512]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a7f      	ldr	r2, [pc, #508]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	e02e      	b.n	8001da0 <HAL_RCC_OscConfig+0xd4>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x98>
 8001d4a:	4b7b      	ldr	r3, [pc, #492]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a7a      	ldr	r2, [pc, #488]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	4b78      	ldr	r3, [pc, #480]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a77      	ldr	r2, [pc, #476]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e01d      	b.n	8001da0 <HAL_RCC_OscConfig+0xd4>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0xbc>
 8001d6e:	4b72      	ldr	r3, [pc, #456]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a71      	ldr	r2, [pc, #452]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b6f      	ldr	r3, [pc, #444]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6e      	ldr	r2, [pc, #440]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0xd4>
 8001d88:	4b6b      	ldr	r3, [pc, #428]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a6a      	ldr	r2, [pc, #424]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b68      	ldr	r3, [pc, #416]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a67      	ldr	r2, [pc, #412]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7fe fe92 	bl	8000ad0 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db0:	f7fe fe8e 	bl	8000ad0 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e200      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0xe4>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7fe fe7e 	bl	8000ad0 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7fe fe7a 	bl	8000ad0 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e1ec      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x10c>
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d063      	beq.n	8001ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e06:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e12:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d11c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x18c>
 8001e1e:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d116      	bne.n	8001e58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	4b43      	ldr	r3, [pc, #268]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_RCC_OscConfig+0x176>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e1c0      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4939      	ldr	r1, [pc, #228]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	e03a      	b.n	8001ece <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d020      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7fe fe33 	bl	8000ad0 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7fe fe2f 	bl	8000ad0 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e1a1      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4927      	ldr	r1, [pc, #156]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
 8001ea0:	e015      	b.n	8001ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7fe fe12 	bl	8000ad0 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb0:	f7fe fe0e 	bl	8000ad0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e180      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d03a      	beq.n	8001f50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d019      	beq.n	8001f16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_RCC_OscConfig+0x274>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7fe fdf2 	bl	8000ad0 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7fe fdee 	bl	8000ad0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e160      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f000 fb08 	bl	8002524 <RCC_Delay>
 8001f14:	e01c      	b.n	8001f50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_RCC_OscConfig+0x274>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1c:	f7fe fdd8 	bl	8000ad0 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f22:	e00f      	b.n	8001f44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f24:	f7fe fdd4 	bl	8000ad0 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d908      	bls.n	8001f44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e146      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	42420000 	.word	0x42420000
 8001f40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f44:	4b92      	ldr	r3, [pc, #584]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1e9      	bne.n	8001f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80a6 	beq.w	80020aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f62:	4b8b      	ldr	r3, [pc, #556]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10d      	bne.n	8001f8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	4b88      	ldr	r3, [pc, #544]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a87      	ldr	r2, [pc, #540]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	61d3      	str	r3, [r2, #28]
 8001f7a:	4b85      	ldr	r3, [pc, #532]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f86:	2301      	movs	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8a:	4b82      	ldr	r3, [pc, #520]	; (8002194 <HAL_RCC_OscConfig+0x4c8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d118      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f96:	4b7f      	ldr	r3, [pc, #508]	; (8002194 <HAL_RCC_OscConfig+0x4c8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a7e      	ldr	r2, [pc, #504]	; (8002194 <HAL_RCC_OscConfig+0x4c8>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fd95 	bl	8000ad0 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7fe fd91 	bl	8000ad0 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b64      	cmp	r3, #100	; 0x64
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e103      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b75      	ldr	r3, [pc, #468]	; (8002194 <HAL_RCC_OscConfig+0x4c8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x312>
 8001fd0:	4b6f      	ldr	r3, [pc, #444]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a6e      	ldr	r2, [pc, #440]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6213      	str	r3, [r2, #32]
 8001fdc:	e02d      	b.n	800203a <HAL_RCC_OscConfig+0x36e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x334>
 8001fe6:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a69      	ldr	r2, [pc, #420]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	6213      	str	r3, [r2, #32]
 8001ff2:	4b67      	ldr	r3, [pc, #412]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4a66      	ldr	r2, [pc, #408]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	f023 0304 	bic.w	r3, r3, #4
 8001ffc:	6213      	str	r3, [r2, #32]
 8001ffe:	e01c      	b.n	800203a <HAL_RCC_OscConfig+0x36e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b05      	cmp	r3, #5
 8002006:	d10c      	bne.n	8002022 <HAL_RCC_OscConfig+0x356>
 8002008:	4b61      	ldr	r3, [pc, #388]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4a60      	ldr	r2, [pc, #384]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	6213      	str	r3, [r2, #32]
 8002014:	4b5e      	ldr	r3, [pc, #376]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a5d      	ldr	r2, [pc, #372]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6213      	str	r3, [r2, #32]
 8002020:	e00b      	b.n	800203a <HAL_RCC_OscConfig+0x36e>
 8002022:	4b5b      	ldr	r3, [pc, #364]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4a5a      	ldr	r2, [pc, #360]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	6213      	str	r3, [r2, #32]
 800202e:	4b58      	ldr	r3, [pc, #352]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4a57      	ldr	r2, [pc, #348]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d015      	beq.n	800206e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002042:	f7fe fd45 	bl	8000ad0 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7fe fd41 	bl	8000ad0 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	; 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0b1      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	4b4b      	ldr	r3, [pc, #300]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ee      	beq.n	800204a <HAL_RCC_OscConfig+0x37e>
 800206c:	e014      	b.n	8002098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7fe fd2f 	bl	8000ad0 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe fd2b 	bl	8000ad0 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e09b      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208c:	4b40      	ldr	r3, [pc, #256]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ee      	bne.n	8002076 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002098:	7dfb      	ldrb	r3, [r7, #23]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d105      	bne.n	80020aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209e:	4b3c      	ldr	r3, [pc, #240]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4a3b      	ldr	r2, [pc, #236]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8087 	beq.w	80021c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b4:	4b36      	ldr	r3, [pc, #216]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d061      	beq.n	8002184 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d146      	bne.n	8002156 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c8:	4b33      	ldr	r3, [pc, #204]	; (8002198 <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7fe fcff 	bl	8000ad0 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d6:	f7fe fcfb 	bl	8000ad0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e06d      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e8:	4b29      	ldr	r3, [pc, #164]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fc:	d108      	bne.n	8002110 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020fe:	4b24      	ldr	r3, [pc, #144]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4921      	ldr	r1, [pc, #132]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a19      	ldr	r1, [r3, #32]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	430b      	orrs	r3, r1
 8002122:	491b      	ldr	r1, [pc, #108]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_RCC_OscConfig+0x4cc>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7fe fccf 	bl	8000ad0 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002136:	f7fe fccb 	bl	8000ad0 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e03d      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x46a>
 8002154:	e035      	b.n	80021c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <HAL_RCC_OscConfig+0x4cc>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe fcb8 	bl	8000ad0 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002164:	f7fe fcb4 	bl	8000ad0 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e026      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x498>
 8002182:	e01e      	b.n	80021c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e019      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
 8002190:	40021000 	.word	0x40021000
 8002194:	40007000 	.word	0x40007000
 8002198:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_OscConfig+0x500>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000

080021d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0d0      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e4:	4b6a      	ldr	r3, [pc, #424]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d910      	bls.n	8002214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b67      	ldr	r3, [pc, #412]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 0207 	bic.w	r2, r3, #7
 80021fa:	4965      	ldr	r1, [pc, #404]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b63      	ldr	r3, [pc, #396]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0b8      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800222c:	4b59      	ldr	r3, [pc, #356]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a58      	ldr	r2, [pc, #352]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002236:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002244:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a52      	ldr	r2, [pc, #328]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800224e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002250:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	494d      	ldr	r1, [pc, #308]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d040      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d115      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e07f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228e:	4b41      	ldr	r3, [pc, #260]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e073      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229e:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06b      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ae:	4b39      	ldr	r3, [pc, #228]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f023 0203 	bic.w	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4936      	ldr	r1, [pc, #216]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c0:	f7fe fc06 	bl	8000ad0 <HAL_GetTick>
 80022c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	e00a      	b.n	80022de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c8:	f7fe fc02 	bl	8000ad0 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e053      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 020c 	and.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d1eb      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d210      	bcs.n	8002320 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 0207 	bic.w	r2, r3, #7
 8002306:	4922      	ldr	r1, [pc, #136]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e032      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4916      	ldr	r1, [pc, #88]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	490e      	ldr	r1, [pc, #56]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800235e:	f000 f821 	bl	80023a4 <HAL_RCC_GetSysClockFreq>
 8002362:	4602      	mov	r2, r0
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	490a      	ldr	r1, [pc, #40]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 8002370:	5ccb      	ldrb	r3, [r1, r3]
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <HAL_RCC_ClockConfig+0x1cc>)
 8002378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x1d0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fa4a 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40022000 	.word	0x40022000
 8002394:	40021000 	.word	0x40021000
 8002398:	08006ab8 	.word	0x08006ab8
 800239c:	20000000 	.word	0x20000000
 80023a0:	20000004 	.word	0x20000004

080023a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a4:	b490      	push	{r4, r7}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023aa:	4b29      	ldr	r3, [pc, #164]	; (8002450 <HAL_RCC_GetSysClockFreq+0xac>)
 80023ac:	1d3c      	adds	r4, r7, #4
 80023ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023b4:	f240 2301 	movw	r3, #513	; 0x201
 80023b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	2300      	movs	r3, #0
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ce:	4b21      	ldr	r3, [pc, #132]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d002      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x40>
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0x46>
 80023e2:	e02b      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e4:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023e6:	623b      	str	r3, [r7, #32]
      break;
 80023e8:	e02b      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	0c9b      	lsrs	r3, r3, #18
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	3328      	adds	r3, #40	; 0x28
 80023f4:	443b      	add	r3, r7
 80023f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d012      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	0c5b      	lsrs	r3, r3, #17
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	3328      	adds	r3, #40	; 0x28
 8002412:	443b      	add	r3, r7
 8002414:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002418:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <HAL_RCC_GetSysClockFreq+0xb4>)
 800241e:	fb03 f202 	mul.w	r2, r3, r2
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
 800242a:	e004      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	4a0b      	ldr	r2, [pc, #44]	; (800245c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002430:	fb02 f303 	mul.w	r3, r2, r3
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	623b      	str	r3, [r7, #32]
      break;
 800243a:	e002      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCC_GetSysClockFreq+0xb4>)
 800243e:	623b      	str	r3, [r7, #32]
      break;
 8002440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002442:	6a3b      	ldr	r3, [r7, #32]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3728      	adds	r7, #40	; 0x28
 8002448:	46bd      	mov	sp, r7
 800244a:	bc90      	pop	{r4, r7}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	08006a30 	.word	0x08006a30
 8002454:	40021000 	.word	0x40021000
 8002458:	007a1200 	.word	0x007a1200
 800245c:	003d0900 	.word	0x003d0900

08002460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002464:	4b02      	ldr	r3, [pc, #8]	; (8002470 <HAL_RCC_GetHCLKFreq+0x10>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	20000000 	.word	0x20000000

08002474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002478:	f7ff fff2 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4903      	ldr	r1, [pc, #12]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	08006ac8 	.word	0x08006ac8

0800249c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024a0:	f7ff ffde 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	0adb      	lsrs	r3, r3, #11
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4903      	ldr	r1, [pc, #12]	; (80024c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	08006ac8 	.word	0x08006ac8

080024c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	220f      	movs	r2, #15
 80024d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_RCC_GetClockConfig+0x58>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0203 	and.w	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024e0:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_RCC_GetClockConfig+0x58>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_GetClockConfig+0x58>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_RCC_GetClockConfig+0x58>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	08db      	lsrs	r3, r3, #3
 80024fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_RCC_GetClockConfig+0x5c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0207 	and.w	r2, r3, #7
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	40021000 	.word	0x40021000
 8002520:	40022000 	.word	0x40022000

08002524 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <RCC_Delay+0x34>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <RCC_Delay+0x38>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	0a5b      	lsrs	r3, r3, #9
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002540:	bf00      	nop
  }
  while (Delay --);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1e5a      	subs	r2, r3, #1
 8002546:	60fa      	str	r2, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f9      	bne.n	8002540 <RCC_Delay+0x1c>
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	20000000 	.word	0x20000000
 800255c:	10624dd3 	.word	0x10624dd3

08002560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e041      	b.n	80025f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f839 	bl	80025fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3304      	adds	r3, #4
 800259c:	4619      	mov	r1, r3
 800259e:	4610      	mov	r0, r2
 80025a0:	f000 f9b4 	bl	800290c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d001      	beq.n	8002628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e03a      	b.n	800269e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a18      	ldr	r2, [pc, #96]	; (80026a8 <HAL_TIM_Base_Start_IT+0x98>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00e      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x58>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002652:	d009      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x58>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a14      	ldr	r2, [pc, #80]	; (80026ac <HAL_TIM_Base_Start_IT+0x9c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d004      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x58>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a13      	ldr	r2, [pc, #76]	; (80026b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d111      	bne.n	800268c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b06      	cmp	r3, #6
 8002678:	d010      	beq.n	800269c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0201 	orr.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268a:	e007      	b.n	800269c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	40012c00 	.word	0x40012c00
 80026ac:	40000400 	.word	0x40000400
 80026b0:	40000800 	.word	0x40000800

080026b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d122      	bne.n	8002710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d11b      	bne.n	8002710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0202 	mvn.w	r2, #2
 80026e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f8ed 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 80026fc:	e005      	b.n	800270a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f8e0 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f8ef 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b04      	cmp	r3, #4
 800271c:	d122      	bne.n	8002764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b04      	cmp	r3, #4
 800272a:	d11b      	bne.n	8002764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0204 	mvn.w	r2, #4
 8002734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f8c3 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f8b6 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f8c5 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b08      	cmp	r3, #8
 8002770:	d122      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d11b      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0208 	mvn.w	r2, #8
 8002788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2204      	movs	r2, #4
 800278e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f899 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f88c 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f89b 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d122      	bne.n	800280c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d11b      	bne.n	800280c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0210 	mvn.w	r2, #16
 80027dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2208      	movs	r2, #8
 80027e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f86f 	bl	80028d6 <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f862 	bl	80028c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f871 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d10e      	bne.n	8002838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0201 	mvn.w	r2, #1
 8002830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fd ffa0 	bl	8000778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002842:	2b80      	cmp	r3, #128	; 0x80
 8002844:	d10e      	bne.n	8002864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d107      	bne.n	8002864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800285c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8bf 	bl	80029e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	d10e      	bne.n	8002890 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d107      	bne.n	8002890 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f835 	bl	80028fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b20      	cmp	r3, #32
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d107      	bne.n	80028bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0220 	mvn.w	r2, #32
 80028b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f88a 	bl	80029d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a29      	ldr	r2, [pc, #164]	; (80029c4 <TIM_Base_SetConfig+0xb8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00b      	beq.n	800293c <TIM_Base_SetConfig+0x30>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292a:	d007      	beq.n	800293c <TIM_Base_SetConfig+0x30>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a26      	ldr	r2, [pc, #152]	; (80029c8 <TIM_Base_SetConfig+0xbc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d003      	beq.n	800293c <TIM_Base_SetConfig+0x30>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a25      	ldr	r2, [pc, #148]	; (80029cc <TIM_Base_SetConfig+0xc0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d108      	bne.n	800294e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <TIM_Base_SetConfig+0xb8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00b      	beq.n	800296e <TIM_Base_SetConfig+0x62>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295c:	d007      	beq.n	800296e <TIM_Base_SetConfig+0x62>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <TIM_Base_SetConfig+0xbc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0x62>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a18      	ldr	r2, [pc, #96]	; (80029cc <TIM_Base_SetConfig+0xc0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d108      	bne.n	8002980 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <TIM_Base_SetConfig+0xb8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	615a      	str	r2, [r3, #20]
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	40012c00 	.word	0x40012c00
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40000800 	.word	0x40000800

080029d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e03f      	b.n	8002a86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fd ffb6 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2224      	movs	r2, #36	; 0x24
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fc25 	bl	8003288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b08a      	sub	sp, #40	; 0x28
 8002a92:	af02      	add	r7, sp, #8
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	d17c      	bne.n	8002ba8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_UART_Transmit+0x2c>
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e075      	b.n	8002baa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Transmit+0x3e>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e06e      	b.n	8002baa <HAL_UART_Transmit+0x11c>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2221      	movs	r2, #33	; 0x21
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ae2:	f7fd fff5 	bl	8000ad0 <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	88fa      	ldrh	r2, [r7, #6]
 8002aec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	88fa      	ldrh	r2, [r7, #6]
 8002af2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afc:	d108      	bne.n	8002b10 <HAL_UART_Transmit+0x82>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d104      	bne.n	8002b10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	e003      	b.n	8002b18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b20:	e02a      	b.n	8002b78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2180      	movs	r1, #128	; 0x80
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fa11 	bl	8002f54 <UART_WaitOnFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e036      	b.n	8002baa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10b      	bne.n	8002b5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	3302      	adds	r3, #2
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	e007      	b.n	8002b6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	781a      	ldrb	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	3301      	adds	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1cf      	bne.n	8002b22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2140      	movs	r1, #64	; 0x40
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f9e1 	bl	8002f54 <UART_WaitOnFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e006      	b.n	8002baa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10d      	bne.n	8002c06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_UART_IRQHandler+0x52>
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fa99 	bl	8003136 <UART_Receive_IT>
      return;
 8002c04:	e17b      	b.n	8002efe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80b1 	beq.w	8002d70 <HAL_UART_IRQHandler+0x1bc>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <HAL_UART_IRQHandler+0x70>
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80a6 	beq.w	8002d70 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_UART_IRQHandler+0x90>
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	f043 0201 	orr.w	r2, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_UART_IRQHandler+0xb0>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f043 0202 	orr.w	r2, r3, #2
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_UART_IRQHandler+0xd0>
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f043 0204 	orr.w	r2, r3, #4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00f      	beq.n	8002cae <HAL_UART_IRQHandler+0xfa>
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d104      	bne.n	8002ca2 <HAL_UART_IRQHandler+0xee>
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f043 0208 	orr.w	r2, r3, #8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 811e 	beq.w	8002ef4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x11e>
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fa32 	bl	8003136 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bf14      	ite	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	2300      	moveq	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d102      	bne.n	8002cfa <HAL_UART_IRQHandler+0x146>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d031      	beq.n	8002d5e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f974 	bl	8002fe8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d023      	beq.n	8002d56 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d1c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d013      	beq.n	8002d4e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	4a76      	ldr	r2, [pc, #472]	; (8002f04 <HAL_UART_IRQHandler+0x350>)
 8002d2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe fd9e 	bl	8001874 <HAL_DMA_Abort_IT>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d016      	beq.n	8002d6c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d4c:	e00e      	b.n	8002d6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f8ec 	bl	8002f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d54:	e00a      	b.n	8002d6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f8e8 	bl	8002f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d5c:	e006      	b.n	8002d6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f8e4 	bl	8002f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d6a:	e0c3      	b.n	8002ef4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	bf00      	nop
    return;
 8002d6e:	e0c1      	b.n	8002ef4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	f040 80a1 	bne.w	8002ebc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 809b 	beq.w	8002ebc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8095 	beq.w	8002ebc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d04e      	beq.n	8002e54 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002dc0:	8a3b      	ldrh	r3, [r7, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8098 	beq.w	8002ef8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dcc:	8a3a      	ldrh	r2, [r7, #16]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	f080 8092 	bcs.w	8002ef8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	8a3a      	ldrh	r2, [r7, #16]
 8002dd8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d02b      	beq.n	8002e3c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002df2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e12:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0210 	bic.w	r2, r2, #16
 8002e30:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe fce1 	bl	80017fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f876 	bl	8002f3e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e52:	e051      	b.n	8002ef8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d047      	beq.n	8002efc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002e6c:	8a7b      	ldrh	r3, [r7, #18]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d044      	beq.n	8002efc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e80:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0210 	bic.w	r2, r2, #16
 8002eae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002eb0:	8a7b      	ldrh	r3, [r7, #18]
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f842 	bl	8002f3e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002eba:	e01f      	b.n	8002efc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x324>
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f8c9 	bl	8003068 <UART_Transmit_IT>
    return;
 8002ed6:	e012      	b.n	8002efe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <HAL_UART_IRQHandler+0x34a>
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f90a 	bl	8003106 <UART_EndTransmit_IT>
    return;
 8002ef2:	e004      	b.n	8002efe <HAL_UART_IRQHandler+0x34a>
    return;
 8002ef4:	bf00      	nop
 8002ef6:	e002      	b.n	8002efe <HAL_UART_IRQHandler+0x34a>
      return;
 8002ef8:	bf00      	nop
 8002efa:	e000      	b.n	8002efe <HAL_UART_IRQHandler+0x34a>
      return;
 8002efc:	bf00      	nop
  }
}
 8002efe:	3728      	adds	r7, #40	; 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	08003041 	.word	0x08003041

08002f08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	4613      	mov	r3, r2
 8002f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f64:	e02c      	b.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f6c:	d028      	beq.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f74:	f7fd fdac 	bl	8000ad0 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d21d      	bcs.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f92:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e00f      	b.n	8002fe0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d0c3      	beq.n	8002f66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ffe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	2b01      	cmp	r3, #1
 8003016:	d107      	bne.n	8003028 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0210 	bic.w	r2, r2, #16
 8003026:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f7ff ff66 	bl	8002f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b21      	cmp	r3, #33	; 0x21
 800307a:	d13e      	bne.n	80030fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003084:	d114      	bne.n	80030b0 <UART_Transmit_IT+0x48>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d110      	bne.n	80030b0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	1c9a      	adds	r2, r3, #2
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	621a      	str	r2, [r3, #32]
 80030ae:	e008      	b.n	80030c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	1c59      	adds	r1, r3, #1
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6211      	str	r1, [r2, #32]
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4619      	mov	r1, r3
 80030d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800311c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff feee 	bl	8002f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b22      	cmp	r3, #34	; 0x22
 8003148:	f040 8099 	bne.w	800327e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003154:	d117      	bne.n	8003186 <UART_Receive_IT+0x50>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d113      	bne.n	8003186 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	b29b      	uxth	r3, r3
 8003170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003174:	b29a      	uxth	r2, r3
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	1c9a      	adds	r2, r3, #2
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	629a      	str	r2, [r3, #40]	; 0x28
 8003184:	e026      	b.n	80031d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003198:	d007      	beq.n	80031aa <UART_Receive_IT+0x74>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <UART_Receive_IT+0x82>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e008      	b.n	80031ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29b      	uxth	r3, r3
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4619      	mov	r1, r3
 80031e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d148      	bne.n	800327a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0220 	bic.w	r2, r2, #32
 80031f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003206:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	2b01      	cmp	r3, #1
 8003226:	d123      	bne.n	8003270 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0210 	bic.w	r2, r2, #16
 800323c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	2b10      	cmp	r3, #16
 800324a:	d10a      	bne.n	8003262 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003266:	4619      	mov	r1, r3
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff fe68 	bl	8002f3e <HAL_UARTEx_RxEventCallback>
 800326e:	e002      	b.n	8003276 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff fe52 	bl	8002f1a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e002      	b.n	8003280 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e000      	b.n	8003280 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800327e:	2302      	movs	r3, #2
  }
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032c2:	f023 030c 	bic.w	r3, r3, #12
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	430b      	orrs	r3, r1
 80032ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2c      	ldr	r2, [pc, #176]	; (800339c <UART_SetConfig+0x114>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d103      	bne.n	80032f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032f0:	f7ff f8d4 	bl	800249c <HAL_RCC_GetPCLK2Freq>
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	e002      	b.n	80032fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032f8:	f7ff f8bc 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 80032fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009a      	lsls	r2, r3, #2
 8003308:	441a      	add	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <UART_SetConfig+0x118>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	0119      	lsls	r1, r3, #4
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009a      	lsls	r2, r3, #2
 8003328:	441a      	add	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	fbb2 f2f3 	udiv	r2, r2, r3
 8003334:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <UART_SetConfig+0x118>)
 8003336:	fba3 0302 	umull	r0, r3, r3, r2
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2064      	movs	r0, #100	; 0x64
 800333e:	fb00 f303 	mul.w	r3, r0, r3
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	3332      	adds	r3, #50	; 0x32
 8003348:	4a15      	ldr	r2, [pc, #84]	; (80033a0 <UART_SetConfig+0x118>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003354:	4419      	add	r1, r3
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	009a      	lsls	r2, r3, #2
 8003360:	441a      	add	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	fbb2 f2f3 	udiv	r2, r2, r3
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <UART_SetConfig+0x118>)
 800336e:	fba3 0302 	umull	r0, r3, r3, r2
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	2064      	movs	r0, #100	; 0x64
 8003376:	fb00 f303 	mul.w	r3, r0, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	3332      	adds	r3, #50	; 0x32
 8003380:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <UART_SetConfig+0x118>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	f003 020f 	and.w	r2, r3, #15
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	440a      	add	r2, r1
 8003392:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40013800 	.word	0x40013800
 80033a0:	51eb851f 	.word	0x51eb851f

080033a4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033aa:	f3ef 8305 	mrs	r3, IPSR
 80033ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80033b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10f      	bne.n	80033d6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b6:	f3ef 8310 	mrs	r3, PRIMASK
 80033ba:	607b      	str	r3, [r7, #4]
  return(result);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <osKernelInitialize+0x32>
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <osKernelInitialize+0x60>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d109      	bne.n	80033de <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033ca:	f3ef 8311 	mrs	r3, BASEPRI
 80033ce:	603b      	str	r3, [r7, #0]
  return(result);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80033d6:	f06f 0305 	mvn.w	r3, #5
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e00c      	b.n	80033f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <osKernelInitialize+0x60>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d105      	bne.n	80033f2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <osKernelInitialize+0x60>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e002      	b.n	80033f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80033f8:	68fb      	ldr	r3, [r7, #12]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	2000021c 	.word	0x2000021c

08003408 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800340e:	f3ef 8305 	mrs	r3, IPSR
 8003412:	60bb      	str	r3, [r7, #8]
  return(result);
 8003414:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10f      	bne.n	800343a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341a:	f3ef 8310 	mrs	r3, PRIMASK
 800341e:	607b      	str	r3, [r7, #4]
  return(result);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <osKernelStart+0x32>
 8003426:	4b11      	ldr	r3, [pc, #68]	; (800346c <osKernelStart+0x64>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d109      	bne.n	8003442 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800342e:	f3ef 8311 	mrs	r3, BASEPRI
 8003432:	603b      	str	r3, [r7, #0]
  return(result);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <osKernelStart+0x3a>
    stat = osErrorISR;
 800343a:	f06f 0305 	mvn.w	r3, #5
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e00e      	b.n	8003460 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <osKernelStart+0x64>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d107      	bne.n	800345a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <osKernelStart+0x64>)
 800344c:	2202      	movs	r2, #2
 800344e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003450:	f001 fbac 	bl	8004bac <vTaskStartScheduler>
      stat = osOK;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e002      	b.n	8003460 <osKernelStart+0x58>
    } else {
      stat = osError;
 800345a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800345e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003460:	68fb      	ldr	r3, [r7, #12]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2000021c 	.word	0x2000021c

08003470 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b092      	sub	sp, #72	; 0x48
 8003474:	af04      	add	r7, sp, #16
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003480:	f3ef 8305 	mrs	r3, IPSR
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003488:	2b00      	cmp	r3, #0
 800348a:	f040 8095 	bne.w	80035b8 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348e:	f3ef 8310 	mrs	r3, PRIMASK
 8003492:	623b      	str	r3, [r7, #32]
  return(result);
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 808e 	bne.w	80035b8 <osThreadNew+0x148>
 800349c:	4b49      	ldr	r3, [pc, #292]	; (80035c4 <osThreadNew+0x154>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d106      	bne.n	80034b2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034a4:	f3ef 8311 	mrs	r3, BASEPRI
 80034a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f040 8083 	bne.w	80035b8 <osThreadNew+0x148>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d07f      	beq.n	80035b8 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80034bc:	2318      	movs	r3, #24
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80034c0:	2300      	movs	r3, #0
 80034c2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80034c4:	f107 031b 	add.w	r3, r7, #27
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80034ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d046      	beq.n	8003564 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <osThreadNew+0x74>
        name = attr->name;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <osThreadNew+0x9a>
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	2b38      	cmp	r3, #56	; 0x38
 80034fc:	d805      	bhi.n	800350a <osThreadNew+0x9a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <osThreadNew+0x9e>
        return (NULL);
 800350a:	2300      	movs	r3, #0
 800350c:	e055      	b.n	80035ba <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00f      	beq.n	8003546 <osThreadNew+0xd6>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f5b3 6f93 	cmp.w	r3, #1176	; 0x498
 800352e:	d30a      	bcc.n	8003546 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003534:	2b00      	cmp	r3, #0
 8003536:	d006      	beq.n	8003546 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <osThreadNew+0xd6>
        mem = 1;
 8003540:	2301      	movs	r3, #1
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
 8003544:	e010      	b.n	8003568 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10c      	bne.n	8003568 <osThreadNew+0xf8>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d108      	bne.n	8003568 <osThreadNew+0xf8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d104      	bne.n	8003568 <osThreadNew+0xf8>
          mem = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28
 8003562:	e001      	b.n	8003568 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	2b01      	cmp	r3, #1
 800356c:	d110      	bne.n	8003590 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003576:	9202      	str	r2, [sp, #8]
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003582:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f001 f935 	bl	80047f4 <xTaskCreateStatic>
 800358a:	4603      	mov	r3, r0
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	e013      	b.n	80035b8 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	2b00      	cmp	r3, #0
 8003594:	d110      	bne.n	80035b8 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	b29a      	uxth	r2, r3
 800359a:	f107 0314 	add.w	r3, r7, #20
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f001 f981 	bl	80048b0 <xTaskCreate>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d001      	beq.n	80035b8 <osThreadNew+0x148>
          hTask = NULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80035b8:	697b      	ldr	r3, [r7, #20]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3738      	adds	r7, #56	; 0x38
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	2000021c 	.word	0x2000021c

080035c8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ce:	f3ef 8305 	mrs	r3, IPSR
 80035d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80035d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10f      	bne.n	80035fa <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035da:	f3ef 8310 	mrs	r3, PRIMASK
 80035de:	607b      	str	r3, [r7, #4]
  return(result);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <osThreadYield+0x32>
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <osThreadYield+0x5c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d109      	bne.n	8003602 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035ee:	f3ef 8311 	mrs	r3, BASEPRI
 80035f2:	603b      	str	r3, [r7, #0]
  return(result);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <osThreadYield+0x3a>
    stat = osErrorISR;
 80035fa:	f06f 0305 	mvn.w	r3, #5
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	e009      	b.n	8003616 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <osThreadYield+0x60>)
 8003608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8003616:	68fb      	ldr	r3, [r7, #12]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	2000021c 	.word	0x2000021c
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	; 0x28
 8003630:	af02      	add	r7, sp, #8
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <osThreadFlagsSet+0x1a>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	da03      	bge.n	800364e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8003646:	f06f 0303 	mvn.w	r3, #3
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e045      	b.n	80036da <osThreadFlagsSet+0xae>
  }
  else {
    rflags = (uint32_t)osError;
 800364e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003652:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003654:	f3ef 8305 	mrs	r3, IPSR
 8003658:	61bb      	str	r3, [r7, #24]
  return(result);
 800365a:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10f      	bne.n	8003680 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003660:	f3ef 8310 	mrs	r3, PRIMASK
 8003664:	617b      	str	r3, [r7, #20]
  return(result);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <osThreadFlagsSet+0x54>
 800366c:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <osThreadFlagsSet+0xb8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d125      	bne.n	80036c0 <osThreadFlagsSet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003674:	f3ef 8311 	mrs	r3, BASEPRI
 8003678:	613b      	str	r3, [r7, #16]
  return(result);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d01f      	beq.n	80036c0 <osThreadFlagsSet+0x94>
      yield = pdFALSE;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8003684:	f107 0308 	add.w	r3, r7, #8
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	2300      	movs	r3, #0
 800368c:	2201      	movs	r2, #1
 800368e:	6839      	ldr	r1, [r7, #0]
 8003690:	69f8      	ldr	r0, [r7, #28]
 8003692:	f002 f883 	bl	800579c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8003696:	f107 030c 	add.w	r3, r7, #12
 800369a:	2200      	movs	r2, #0
 800369c:	9200      	str	r2, [sp, #0]
 800369e:	2200      	movs	r2, #0
 80036a0:	2100      	movs	r1, #0
 80036a2:	69f8      	ldr	r0, [r7, #28]
 80036a4:	f002 f87a 	bl	800579c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d015      	beq.n	80036da <osThreadFlagsSet+0xae>
 80036ae:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <osThreadFlagsSet+0xbc>)
 80036b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	e00c      	b.n	80036da <osThreadFlagsSet+0xae>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80036c0:	2300      	movs	r3, #0
 80036c2:	2201      	movs	r2, #1
 80036c4:	6839      	ldr	r1, [r7, #0]
 80036c6:	69f8      	ldr	r0, [r7, #28]
 80036c8:	f001 ffbe 	bl	8005648 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80036cc:	f107 030c 	add.w	r3, r7, #12
 80036d0:	2200      	movs	r2, #0
 80036d2:	2100      	movs	r1, #0
 80036d4:	69f8      	ldr	r0, [r7, #28]
 80036d6:	f001 ffb7 	bl	8005648 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80036da:	68fb      	ldr	r3, [r7, #12]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	2000021c 	.word	0x2000021c
 80036e8:	e000ed04 	.word	0xe000ed04

080036ec <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08e      	sub	sp, #56	; 0x38
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036f8:	f3ef 8305 	mrs	r3, IPSR
 80036fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80036fe:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10f      	bne.n	8003724 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003704:	f3ef 8310 	mrs	r3, PRIMASK
 8003708:	61bb      	str	r3, [r7, #24]
  return(result);
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <osThreadFlagsWait+0x38>
 8003710:	4b3f      	ldr	r3, [pc, #252]	; (8003810 <osThreadFlagsWait+0x124>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d109      	bne.n	800372c <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003718:	f3ef 8311 	mrs	r3, BASEPRI
 800371c:	617b      	str	r3, [r7, #20]
  return(result);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8003724:	f06f 0305 	mvn.w	r3, #5
 8003728:	637b      	str	r3, [r7, #52]	; 0x34
 800372a:	e06b      	b.n	8003804 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	da03      	bge.n	800373a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8003732:	f06f 0303 	mvn.w	r3, #3
 8003736:	637b      	str	r3, [r7, #52]	; 0x34
 8003738:	e064      	b.n	8003804 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <osThreadFlagsWait+0x5e>
      clear = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	633b      	str	r3, [r7, #48]	; 0x30
 8003748:	e001      	b.n	800374e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8003756:	f001 fb45 	bl	8004de4 <xTaskGetTickCount>
 800375a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800375c:	f107 0210 	add.w	r2, r7, #16
 8003760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003764:	2000      	movs	r0, #0
 8003766:	f001 ff0f 	bl	8005588 <xTaskNotifyWait>
 800376a:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	2b01      	cmp	r3, #1
 8003770:	d137      	bne.n	80037e2 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8003772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4013      	ands	r3, r2
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800377e:	4313      	orrs	r3, r2
 8003780:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00c      	beq.n	80037a6 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003790:	4013      	ands	r3, r2
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d032      	beq.n	80037fe <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10f      	bne.n	80037be <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800379e:	f06f 0302 	mvn.w	r3, #2
 80037a2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80037a4:	e02e      	b.n	8003804 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d128      	bne.n	8003802 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d103      	bne.n	80037be <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80037b6:	f06f 0302 	mvn.w	r3, #2
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80037bc:	e022      	b.n	8003804 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80037be:	f001 fb11 	bl	8004de4 <xTaskGetTickCount>
 80037c2:	4602      	mov	r2, r0
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 80037ca:	6a3a      	ldr	r2, [r7, #32]
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d902      	bls.n	80037d8 <osThreadFlagsWait+0xec>
          tout  = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d6:	e00e      	b.n	80037f6 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 80037d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e0:	e009      	b.n	80037f6 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d103      	bne.n	80037f0 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 80037e8:	f06f 0302 	mvn.w	r3, #2
 80037ec:	637b      	str	r3, [r7, #52]	; 0x34
 80037ee:	e002      	b.n	80037f6 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80037f0:	f06f 0301 	mvn.w	r3, #1
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1af      	bne.n	800375c <osThreadFlagsWait+0x70>
 80037fc:	e002      	b.n	8003804 <osThreadFlagsWait+0x118>
            break;
 80037fe:	bf00      	nop
 8003800:	e000      	b.n	8003804 <osThreadFlagsWait+0x118>
            break;
 8003802:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8003804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003806:	4618      	mov	r0, r3
 8003808:	3738      	adds	r7, #56	; 0x38
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	2000021c 	.word	0x2000021c

08003814 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b08c      	sub	sp, #48	; 0x30
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003820:	2300      	movs	r3, #0
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003824:	f3ef 8305 	mrs	r3, IPSR
 8003828:	61bb      	str	r3, [r7, #24]
  return(result);
 800382a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800382c:	2b00      	cmp	r3, #0
 800382e:	d16f      	bne.n	8003910 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003830:	f3ef 8310 	mrs	r3, PRIMASK
 8003834:	617b      	str	r3, [r7, #20]
  return(result);
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d169      	bne.n	8003910 <osMessageQueueNew+0xfc>
 800383c:	4b37      	ldr	r3, [pc, #220]	; (800391c <osMessageQueueNew+0x108>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d105      	bne.n	8003850 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003844:	f3ef 8311 	mrs	r3, BASEPRI
 8003848:	613b      	str	r3, [r7, #16]
  return(result);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d15f      	bne.n	8003910 <osMessageQueueNew+0xfc>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d05c      	beq.n	8003910 <osMessageQueueNew+0xfc>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d059      	beq.n	8003910 <osMessageQueueNew+0xfc>
    mem = -1;
 800385c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003860:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d029      	beq.n	80038bc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d012      	beq.n	8003896 <osMessageQueueNew+0x82>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b4f      	cmp	r3, #79	; 0x4f
 8003876:	d90e      	bls.n	8003896 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <osMessageQueueNew+0x82>
        mem = 1;
 8003890:	2301      	movs	r3, #1
 8003892:	623b      	str	r3, [r7, #32]
 8003894:	e014      	b.n	80038c0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d110      	bne.n	80038c0 <osMessageQueueNew+0xac>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10c      	bne.n	80038c0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d108      	bne.n	80038c0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d104      	bne.n	80038c0 <osMessageQueueNew+0xac>
          mem = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	623b      	str	r3, [r7, #32]
 80038ba:	e001      	b.n	80038c0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d10b      	bne.n	80038de <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2100      	movs	r1, #0
 80038d0:	9100      	str	r1, [sp, #0]
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fa53 	bl	8003d80 <xQueueGenericCreateStatic>
 80038da:	6278      	str	r0, [r7, #36]	; 0x24
 80038dc:	e008      	b.n	80038f0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d105      	bne.n	80038f0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80038e4:	2200      	movs	r2, #0
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fac0 	bl	8003e6e <xQueueGenericCreate>
 80038ee:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <osMessageQueueNew+0xf0>
        name = attr->name;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	e001      	b.n	8003908 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003908:	69f9      	ldr	r1, [r7, #28]
 800390a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800390c:	f000 ff16 	bl	800473c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003912:	4618      	mov	r0, r3
 8003914:	3728      	adds	r7, #40	; 0x28
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	2000021c 	.word	0x2000021c

08003920 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	; 0x28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	4613      	mov	r3, r2
 800392e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003934:	2300      	movs	r3, #0
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003938:	f3ef 8305 	mrs	r3, IPSR
 800393c:	61fb      	str	r3, [r7, #28]
  return(result);
 800393e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10f      	bne.n	8003964 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003944:	f3ef 8310 	mrs	r3, PRIMASK
 8003948:	61bb      	str	r3, [r7, #24]
  return(result);
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d109      	bne.n	8003964 <osMessageQueuePut+0x44>
 8003950:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <osMessageQueuePut+0xe0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d12e      	bne.n	80039b6 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003958:	f3ef 8311 	mrs	r3, BASEPRI
 800395c:	617b      	str	r3, [r7, #20]
  return(result);
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d028      	beq.n	80039b6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <osMessageQueuePut+0x56>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <osMessageQueuePut+0x56>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003976:	f06f 0303 	mvn.w	r3, #3
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800397c:	e039      	b.n	80039f2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003982:	f107 0210 	add.w	r2, r7, #16
 8003986:	2300      	movs	r3, #0
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	6a38      	ldr	r0, [r7, #32]
 800398c:	f000 fbce 	bl	800412c <xQueueGenericSendFromISR>
 8003990:	4603      	mov	r3, r0
 8003992:	2b01      	cmp	r3, #1
 8003994:	d003      	beq.n	800399e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003996:	f06f 0302 	mvn.w	r3, #2
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800399c:	e029      	b.n	80039f2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d026      	beq.n	80039f2 <osMessageQueuePut+0xd2>
 80039a4:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <osMessageQueuePut+0xe4>)
 80039a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039b4:	e01d      	b.n	80039f2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <osMessageQueuePut+0xa2>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80039c2:	f06f 0303 	mvn.w	r3, #3
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
 80039c8:	e014      	b.n	80039f4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80039ca:	2300      	movs	r3, #0
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	6a38      	ldr	r0, [r7, #32]
 80039d2:	f000 faad 	bl	8003f30 <xQueueGenericSend>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d00b      	beq.n	80039f4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80039e2:	f06f 0301 	mvn.w	r3, #1
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
 80039e8:	e004      	b.n	80039f4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80039ea:	f06f 0302 	mvn.w	r3, #2
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
 80039f0:	e000      	b.n	80039f4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039f2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3728      	adds	r7, #40	; 0x28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	2000021c 	.word	0x2000021c
 8003a04:	e000ed04 	.word	0xe000ed04

08003a08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a1e:	f3ef 8305 	mrs	r3, IPSR
 8003a22:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a24:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <osMessageQueueGet+0x42>
 8003a36:	4b2b      	ldr	r3, [pc, #172]	; (8003ae4 <osMessageQueueGet+0xdc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d12e      	bne.n	8003a9c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a42:	617b      	str	r3, [r7, #20]
  return(result);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d028      	beq.n	8003a9c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <osMessageQueueGet+0x54>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <osMessageQueueGet+0x54>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003a5c:	f06f 0303 	mvn.w	r3, #3
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a62:	e038      	b.n	8003ad6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003a68:	f107 0310 	add.w	r3, r7, #16
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	6a38      	ldr	r0, [r7, #32]
 8003a72:	f000 fcd3 	bl	800441c <xQueueReceiveFromISR>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d003      	beq.n	8003a84 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003a7c:	f06f 0302 	mvn.w	r3, #2
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a82:	e028      	b.n	8003ad6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d025      	beq.n	8003ad6 <osMessageQueueGet+0xce>
 8003a8a:	4b17      	ldr	r3, [pc, #92]	; (8003ae8 <osMessageQueueGet+0xe0>)
 8003a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a9a:	e01c      	b.n	8003ad6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <osMessageQueueGet+0xa0>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d103      	bne.n	8003ab0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003aa8:	f06f 0303 	mvn.w	r3, #3
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	e013      	b.n	8003ad8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	6a38      	ldr	r0, [r7, #32]
 8003ab6:	f000 fbd1 	bl	800425c <xQueueReceive>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d00b      	beq.n	8003ad8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003ac6:	f06f 0301 	mvn.w	r3, #1
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
 8003acc:	e004      	b.n	8003ad8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003ace:	f06f 0302 	mvn.w	r3, #2
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad4:	e000      	b.n	8003ad8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003ad6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3728      	adds	r7, #40	; 0x28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	2000021c 	.word	0x2000021c
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a06      	ldr	r2, [pc, #24]	; (8003b14 <vApplicationGetIdleTaskMemory+0x28>)
 8003afc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4a05      	ldr	r2, [pc, #20]	; (8003b18 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2280      	movs	r2, #128	; 0x80
 8003b08:	601a      	str	r2, [r3, #0]
}
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr
 8003b14:	20000220 	.word	0x20000220
 8003b18:	200006b8 	.word	0x200006b8

08003b1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4a06      	ldr	r2, [pc, #24]	; (8003b4c <vApplicationGetTimerTaskMemory+0x30>)
 8003b32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b3a:	601a      	str	r2, [r3, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	200008b8 	.word	0x200008b8
 8003b4c:	20000d50 	.word	0x20000d50

08003b50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f103 0208 	add.w	r2, r3, #8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f103 0208 	add.w	r2, r3, #8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f103 0208 	add.w	r2, r3, #8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr

08003ba6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	601a      	str	r2, [r3, #0]
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c02:	d103      	bne.n	8003c0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e00c      	b.n	8003c26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	e002      	b.n	8003c1a <vListInsert+0x2e>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d2f6      	bcs.n	8003c14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	601a      	str	r2, [r3, #0]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6892      	ldr	r2, [r2, #8]
 8003c72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6852      	ldr	r2, [r2, #4]
 8003c7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d103      	bne.n	8003c90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	1e5a      	subs	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
	...

08003cb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10a      	bne.n	8003cda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003cd6:	bf00      	nop
 8003cd8:	e7fe      	b.n	8003cd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003cda:	f002 fa87 	bl	80061ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	68f9      	ldr	r1, [r7, #12]
 8003ce8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	441a      	add	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	68f9      	ldr	r1, [r7, #12]
 8003d0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	441a      	add	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	22ff      	movs	r2, #255	; 0xff
 8003d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	22ff      	movs	r2, #255	; 0xff
 8003d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d114      	bne.n	8003d5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01a      	beq.n	8003d6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3310      	adds	r3, #16
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 f9d1 	bl	80050e4 <xTaskRemoveFromEventList>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d012      	beq.n	8003d6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <xQueueGenericReset+0xcc>)
 8003d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	e009      	b.n	8003d6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3310      	adds	r3, #16
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff fef6 	bl	8003b50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3324      	adds	r3, #36	; 0x24
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fef1 	bl	8003b50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d6e:	f002 fa6d 	bl	800624c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d72:	2301      	movs	r3, #1
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08e      	sub	sp, #56	; 0x38
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <xQueueGenericCreateStatic+0x52>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <xQueueGenericCreateStatic+0x56>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <xQueueGenericCreateStatic+0x58>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	623b      	str	r3, [r7, #32]
}
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d102      	bne.n	8003dfe <xQueueGenericCreateStatic+0x7e>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <xQueueGenericCreateStatic+0x82>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <xQueueGenericCreateStatic+0x84>
 8003e02:	2300      	movs	r3, #0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10a      	bne.n	8003e1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	61fb      	str	r3, [r7, #28]
}
 8003e1a:	bf00      	nop
 8003e1c:	e7fe      	b.n	8003e1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e1e:	2350      	movs	r3, #80	; 0x50
 8003e20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b50      	cmp	r3, #80	; 0x50
 8003e26:	d00a      	beq.n	8003e3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	61bb      	str	r3, [r7, #24]
}
 8003e3a:	bf00      	nop
 8003e3c:	e7fe      	b.n	8003e3c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00d      	beq.n	8003e64 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e50:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f843 	bl	8003eea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3730      	adds	r7, #48	; 0x30
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b08a      	sub	sp, #40	; 0x28
 8003e72:	af02      	add	r7, sp, #8
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	613b      	str	r3, [r7, #16]
}
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	e004      	b.n	8003eae <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	fb02 f303 	mul.w	r3, r2, r3
 8003eac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3350      	adds	r3, #80	; 0x50
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f002 fa9a 	bl	80063ec <pvPortMalloc>
 8003eb8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00f      	beq.n	8003ee0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	3350      	adds	r3, #80	; 0x50
 8003ec4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ece:	79fa      	ldrb	r2, [r7, #7]
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f805 	bl	8003eea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003ee0:	69bb      	ldr	r3, [r7, #24]
	}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e002      	b.n	8003f0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f18:	2101      	movs	r1, #1
 8003f1a:	69b8      	ldr	r0, [r7, #24]
 8003f1c:	f7ff fec8 	bl	8003cb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08e      	sub	sp, #56	; 0x38
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <xQueueGenericSend+0x32>
	__asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f5e:	bf00      	nop
 8003f60:	e7fe      	b.n	8003f60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d103      	bne.n	8003f70 <xQueueGenericSend+0x40>
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <xQueueGenericSend+0x44>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <xQueueGenericSend+0x46>
 8003f74:	2300      	movs	r3, #0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10a      	bne.n	8003f90 <xQueueGenericSend+0x60>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f8c:	bf00      	nop
 8003f8e:	e7fe      	b.n	8003f8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d103      	bne.n	8003f9e <xQueueGenericSend+0x6e>
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <xQueueGenericSend+0x72>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <xQueueGenericSend+0x74>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10a      	bne.n	8003fbe <xQueueGenericSend+0x8e>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	623b      	str	r3, [r7, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	e7fe      	b.n	8003fbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fbe:	f001 fa57 	bl	8005470 <xTaskGetSchedulerState>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <xQueueGenericSend+0x9e>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <xQueueGenericSend+0xa2>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <xQueueGenericSend+0xa4>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <xQueueGenericSend+0xbe>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	61fb      	str	r3, [r7, #28]
}
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fee:	f002 f8fd 	bl	80061ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d302      	bcc.n	8004004 <xQueueGenericSend+0xd4>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d129      	bne.n	8004058 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800400a:	f000 fa87 	bl	800451c <prvCopyDataToQueue>
 800400e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	2b00      	cmp	r3, #0
 8004016:	d010      	beq.n	800403a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	3324      	adds	r3, #36	; 0x24
 800401c:	4618      	mov	r0, r3
 800401e:	f001 f861 	bl	80050e4 <xTaskRemoveFromEventList>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d013      	beq.n	8004050 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004028:	4b3f      	ldr	r3, [pc, #252]	; (8004128 <xQueueGenericSend+0x1f8>)
 800402a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	e00a      	b.n	8004050 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004040:	4b39      	ldr	r3, [pc, #228]	; (8004128 <xQueueGenericSend+0x1f8>)
 8004042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004050:	f002 f8fc 	bl	800624c <vPortExitCritical>
				return pdPASS;
 8004054:	2301      	movs	r3, #1
 8004056:	e063      	b.n	8004120 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800405e:	f002 f8f5 	bl	800624c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004062:	2300      	movs	r3, #0
 8004064:	e05c      	b.n	8004120 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800406c:	f107 0314 	add.w	r3, r7, #20
 8004070:	4618      	mov	r0, r3
 8004072:	f001 f89b 	bl	80051ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004076:	2301      	movs	r3, #1
 8004078:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800407a:	f002 f8e7 	bl	800624c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800407e:	f000 fe05 	bl	8004c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004082:	f002 f8b3 	bl	80061ec <vPortEnterCritical>
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800408c:	b25b      	sxtb	r3, r3
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004092:	d103      	bne.n	800409c <xQueueGenericSend+0x16c>
 8004094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040a2:	b25b      	sxtb	r3, r3
 80040a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a8:	d103      	bne.n	80040b2 <xQueueGenericSend+0x182>
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040b2:	f002 f8cb 	bl	800624c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040b6:	1d3a      	adds	r2, r7, #4
 80040b8:	f107 0314 	add.w	r3, r7, #20
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 f88a 	bl	80051d8 <xTaskCheckForTimeOut>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d124      	bne.n	8004114 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040cc:	f000 fb1e 	bl	800470c <prvIsQueueFull>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d018      	beq.n	8004108 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	3310      	adds	r3, #16
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 ffb0 	bl	8005044 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040e6:	f000 faa9 	bl	800463c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040ea:	f000 fddd 	bl	8004ca8 <xTaskResumeAll>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f47f af7c 	bne.w	8003fee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <xQueueGenericSend+0x1f8>)
 80040f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	e772      	b.n	8003fee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800410a:	f000 fa97 	bl	800463c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800410e:	f000 fdcb 	bl	8004ca8 <xTaskResumeAll>
 8004112:	e76c      	b.n	8003fee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004116:	f000 fa91 	bl	800463c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800411a:	f000 fdc5 	bl	8004ca8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800411e:	2300      	movs	r3, #0
		}
	}
}
 8004120:	4618      	mov	r0, r3
 8004122:	3738      	adds	r7, #56	; 0x38
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	e000ed04 	.word	0xe000ed04

0800412c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08e      	sub	sp, #56	; 0x38
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d103      	bne.n	8004168 <xQueueGenericSendFromISR+0x3c>
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <xQueueGenericSendFromISR+0x40>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <xQueueGenericSendFromISR+0x42>
 800416c:	2300      	movs	r3, #0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	623b      	str	r3, [r7, #32]
}
 8004184:	bf00      	nop
 8004186:	e7fe      	b.n	8004186 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d103      	bne.n	8004196 <xQueueGenericSendFromISR+0x6a>
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <xQueueGenericSendFromISR+0x6e>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <xQueueGenericSendFromISR+0x70>
 800419a:	2300      	movs	r3, #0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	61fb      	str	r3, [r7, #28]
}
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041b6:	f002 f8db 	bl	8006370 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041ba:	f3ef 8211 	mrs	r2, BASEPRI
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	61ba      	str	r2, [r7, #24]
 80041d0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041d2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	429a      	cmp	r2, r3
 80041e0:	d302      	bcc.n	80041e8 <xQueueGenericSendFromISR+0xbc>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d12c      	bne.n	8004242 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041f8:	f000 f990 	bl	800451c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004204:	d112      	bne.n	800422c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	2b00      	cmp	r3, #0
 800420c:	d016      	beq.n	800423c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	3324      	adds	r3, #36	; 0x24
 8004212:	4618      	mov	r0, r3
 8004214:	f000 ff66 	bl	80050e4 <xTaskRemoveFromEventList>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00e      	beq.n	800423c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	e007      	b.n	800423c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800422c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004230:	3301      	adds	r3, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	b25a      	sxtb	r2, r3
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800423c:	2301      	movs	r3, #1
 800423e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004240:	e001      	b.n	8004246 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004242:	2300      	movs	r3, #0
 8004244:	637b      	str	r3, [r7, #52]	; 0x34
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004250:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004254:	4618      	mov	r0, r3
 8004256:	3738      	adds	r7, #56	; 0x38
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08c      	sub	sp, #48	; 0x30
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004268:	2300      	movs	r3, #0
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <xQueueReceive+0x30>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	623b      	str	r3, [r7, #32]
}
 8004288:	bf00      	nop
 800428a:	e7fe      	b.n	800428a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d103      	bne.n	800429a <xQueueReceive+0x3e>
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <xQueueReceive+0x42>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <xQueueReceive+0x44>
 800429e:	2300      	movs	r3, #0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <xQueueReceive+0x5e>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	61fb      	str	r3, [r7, #28]
}
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ba:	f001 f8d9 	bl	8005470 <xTaskGetSchedulerState>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d102      	bne.n	80042ca <xQueueReceive+0x6e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <xQueueReceive+0x72>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <xQueueReceive+0x74>
 80042ce:	2300      	movs	r3, #0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <xQueueReceive+0x8e>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	61bb      	str	r3, [r7, #24]
}
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80042ea:	f001 ff7f 	bl	80061ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01f      	beq.n	800433a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042fe:	f000 f977 	bl	80045f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	1e5a      	subs	r2, r3, #1
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00f      	beq.n	8004332 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	3310      	adds	r3, #16
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fee4 	bl	80050e4 <xTaskRemoveFromEventList>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d007      	beq.n	8004332 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004322:	4b3d      	ldr	r3, [pc, #244]	; (8004418 <xQueueReceive+0x1bc>)
 8004324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004332:	f001 ff8b 	bl	800624c <vPortExitCritical>
				return pdPASS;
 8004336:	2301      	movs	r3, #1
 8004338:	e069      	b.n	800440e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d103      	bne.n	8004348 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004340:	f001 ff84 	bl	800624c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004344:	2300      	movs	r3, #0
 8004346:	e062      	b.n	800440e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800434e:	f107 0310 	add.w	r3, r7, #16
 8004352:	4618      	mov	r0, r3
 8004354:	f000 ff2a 	bl	80051ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004358:	2301      	movs	r3, #1
 800435a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800435c:	f001 ff76 	bl	800624c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004360:	f000 fc94 	bl	8004c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004364:	f001 ff42 	bl	80061ec <vPortEnterCritical>
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800436e:	b25b      	sxtb	r3, r3
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004374:	d103      	bne.n	800437e <xQueueReceive+0x122>
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004384:	b25b      	sxtb	r3, r3
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800438a:	d103      	bne.n	8004394 <xQueueReceive+0x138>
 800438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004394:	f001 ff5a 	bl	800624c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004398:	1d3a      	adds	r2, r7, #4
 800439a:	f107 0310 	add.w	r3, r7, #16
 800439e:	4611      	mov	r1, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 ff19 	bl	80051d8 <xTaskCheckForTimeOut>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d123      	bne.n	80043f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ae:	f000 f997 	bl	80046e0 <prvIsQueueEmpty>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d017      	beq.n	80043e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	3324      	adds	r3, #36	; 0x24
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fe3f 	bl	8005044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043c8:	f000 f938 	bl	800463c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043cc:	f000 fc6c 	bl	8004ca8 <xTaskResumeAll>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d189      	bne.n	80042ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <xQueueReceive+0x1bc>)
 80043d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	e780      	b.n	80042ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ea:	f000 f927 	bl	800463c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043ee:	f000 fc5b 	bl	8004ca8 <xTaskResumeAll>
 80043f2:	e77a      	b.n	80042ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043f6:	f000 f921 	bl	800463c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043fa:	f000 fc55 	bl	8004ca8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004400:	f000 f96e 	bl	80046e0 <prvIsQueueEmpty>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	f43f af6f 	beq.w	80042ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800440c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800440e:	4618      	mov	r0, r3
 8004410:	3730      	adds	r7, #48	; 0x30
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08e      	sub	sp, #56	; 0x38
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	623b      	str	r3, [r7, #32]
}
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d103      	bne.n	8004456 <xQueueReceiveFromISR+0x3a>
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <xQueueReceiveFromISR+0x3e>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <xQueueReceiveFromISR+0x40>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	61fb      	str	r3, [r7, #28]
}
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004476:	f001 ff7b 	bl	8006370 <vPortValidateInterruptPriority>
	__asm volatile
 800447a:	f3ef 8211 	mrs	r2, BASEPRI
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	61ba      	str	r2, [r7, #24]
 8004490:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004492:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d02f      	beq.n	8004502 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044b0:	f000 f89e 	bl	80045f0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	1e5a      	subs	r2, r3, #1
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80044bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c4:	d112      	bne.n	80044ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d016      	beq.n	80044fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	3310      	adds	r3, #16
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fe06 	bl	80050e4 <xTaskRemoveFromEventList>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00e      	beq.n	80044fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00b      	beq.n	80044fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	e007      	b.n	80044fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80044ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044f0:	3301      	adds	r3, #1
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	b25a      	sxtb	r2, r3
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80044fc:	2301      	movs	r3, #1
 80044fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004500:	e001      	b.n	8004506 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004502:	2300      	movs	r3, #0
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
 8004506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004508:	613b      	str	r3, [r7, #16]
	__asm volatile
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f383 8811 	msr	BASEPRI, r3
}
 8004510:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004514:	4618      	mov	r0, r3
 8004516:	3738      	adds	r7, #56	; 0x38
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10d      	bne.n	8004556 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d14d      	bne.n	80045de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4618      	mov	r0, r3
 8004548:	f000 ffb0 	bl	80054ac <xTaskPriorityDisinherit>
 800454c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	605a      	str	r2, [r3, #4]
 8004554:	e043      	b.n	80045de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d119      	bne.n	8004590 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6898      	ldr	r0, [r3, #8]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	461a      	mov	r2, r3
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	f002 f93c 	bl	80067e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	441a      	add	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	429a      	cmp	r2, r3
 8004584:	d32b      	bcc.n	80045de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	609a      	str	r2, [r3, #8]
 800458e:	e026      	b.n	80045de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	68d8      	ldr	r0, [r3, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	461a      	mov	r2, r3
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	f002 f922 	bl	80067e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	425b      	negs	r3, r3
 80045aa:	441a      	add	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d207      	bcs.n	80045cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	425b      	negs	r3, r3
 80045c6:	441a      	add	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d105      	bne.n	80045de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	3b01      	subs	r3, #1
 80045dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80045e6:	697b      	ldr	r3, [r7, #20]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d018      	beq.n	8004634 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	441a      	add	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	429a      	cmp	r2, r3
 800461a:	d303      	bcc.n	8004624 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68d9      	ldr	r1, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	461a      	mov	r2, r3
 800462e:	6838      	ldr	r0, [r7, #0]
 8004630:	f002 f8d8 	bl	80067e4 <memcpy>
	}
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004644:	f001 fdd2 	bl	80061ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800464e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004650:	e011      	b.n	8004676 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	2b00      	cmp	r3, #0
 8004658:	d012      	beq.n	8004680 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3324      	adds	r3, #36	; 0x24
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fd40 	bl	80050e4 <xTaskRemoveFromEventList>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800466a:	f000 fe17 	bl	800529c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	3b01      	subs	r3, #1
 8004672:	b2db      	uxtb	r3, r3
 8004674:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800467a:	2b00      	cmp	r3, #0
 800467c:	dce9      	bgt.n	8004652 <prvUnlockQueue+0x16>
 800467e:	e000      	b.n	8004682 <prvUnlockQueue+0x46>
					break;
 8004680:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	22ff      	movs	r2, #255	; 0xff
 8004686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800468a:	f001 fddf 	bl	800624c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800468e:	f001 fdad 	bl	80061ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004698:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800469a:	e011      	b.n	80046c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d012      	beq.n	80046ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3310      	adds	r3, #16
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fd1b 	bl	80050e4 <xTaskRemoveFromEventList>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046b4:	f000 fdf2 	bl	800529c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046b8:	7bbb      	ldrb	r3, [r7, #14]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	dce9      	bgt.n	800469c <prvUnlockQueue+0x60>
 80046c8:	e000      	b.n	80046cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	22ff      	movs	r2, #255	; 0xff
 80046d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80046d4:	f001 fdba 	bl	800624c <vPortExitCritical>
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046e8:	f001 fd80 	bl	80061ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046f4:	2301      	movs	r3, #1
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	e001      	b.n	80046fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046fe:	f001 fda5 	bl	800624c <vPortExitCritical>

	return xReturn;
 8004702:	68fb      	ldr	r3, [r7, #12]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004714:	f001 fd6a 	bl	80061ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004720:	429a      	cmp	r2, r3
 8004722:	d102      	bne.n	800472a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004724:	2301      	movs	r3, #1
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	e001      	b.n	800472e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800472e:	f001 fd8d 	bl	800624c <vPortExitCritical>

	return xReturn;
 8004732:	68fb      	ldr	r3, [r7, #12]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	e014      	b.n	8004776 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800474c:	4a0e      	ldr	r2, [pc, #56]	; (8004788 <vQueueAddToRegistry+0x4c>)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10b      	bne.n	8004770 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004758:	490b      	ldr	r1, [pc, #44]	; (8004788 <vQueueAddToRegistry+0x4c>)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004762:	4a09      	ldr	r2, [pc, #36]	; (8004788 <vQueueAddToRegistry+0x4c>)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4413      	add	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800476e:	e006      	b.n	800477e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3301      	adds	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b07      	cmp	r3, #7
 800477a:	d9e7      	bls.n	800474c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800477c:	bf00      	nop
 800477e:	bf00      	nop
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr
 8004788:	20001150 	.word	0x20001150

0800478c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800479c:	f001 fd26 	bl	80061ec <vPortEnterCritical>
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047a6:	b25b      	sxtb	r3, r3
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ac:	d103      	bne.n	80047b6 <vQueueWaitForMessageRestricted+0x2a>
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047bc:	b25b      	sxtb	r3, r3
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047c2:	d103      	bne.n	80047cc <vQueueWaitForMessageRestricted+0x40>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047cc:	f001 fd3e 	bl	800624c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d106      	bne.n	80047e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	3324      	adds	r3, #36	; 0x24
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fc53 	bl	800508c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80047e6:	6978      	ldr	r0, [r7, #20]
 80047e8:	f7ff ff28 	bl	800463c <prvUnlockQueue>
	}
 80047ec:	bf00      	nop
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08e      	sub	sp, #56	; 0x38
 80047f8:	af04      	add	r7, sp, #16
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10a      	bne.n	800481e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	623b      	str	r3, [r7, #32]
}
 800481a:	bf00      	nop
 800481c:	e7fe      	b.n	800481c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800481e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10a      	bne.n	800483a <xTaskCreateStatic+0x46>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	61fb      	str	r3, [r7, #28]
}
 8004836:	bf00      	nop
 8004838:	e7fe      	b.n	8004838 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800483a:	f44f 6393 	mov.w	r3, #1176	; 0x498
 800483e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f5b3 6f93 	cmp.w	r3, #1176	; 0x498
 8004846:	d00a      	beq.n	800485e <xTaskCreateStatic+0x6a>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	61bb      	str	r3, [r7, #24]
}
 800485a:	bf00      	nop
 800485c:	e7fe      	b.n	800485c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01e      	beq.n	80048a2 <xTaskCreateStatic+0xae>
 8004864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004866:	2b00      	cmp	r3, #0
 8004868:	d01b      	beq.n	80048a2 <xTaskCreateStatic+0xae>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004872:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	2202      	movs	r2, #2
 8004878:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800487c:	2300      	movs	r3, #0
 800487e:	9303      	str	r3, [sp, #12]
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	9302      	str	r3, [sp, #8]
 8004884:	f107 0314 	add.w	r3, r7, #20
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f851 	bl	800493c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800489a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800489c:	f000 f916 	bl	8004acc <prvAddNewTaskToReadyList>
 80048a0:	e001      	b.n	80048a6 <xTaskCreateStatic+0xb2>
		}
		else
		{
			xReturn = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048a6:	697b      	ldr	r3, [r7, #20]
	}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3728      	adds	r7, #40	; 0x28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08c      	sub	sp, #48	; 0x30
 80048b4:	af04      	add	r7, sp, #16
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c0:	88fb      	ldrh	r3, [r7, #6]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f001 fd91 	bl	80063ec <pvPortMalloc>
 80048ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00f      	beq.n	80048f2 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80048d2:	f44f 6093 	mov.w	r0, #1176	; 0x498
 80048d6:	f001 fd89 	bl	80063ec <pvPortMalloc>
 80048da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
 80048e8:	e005      	b.n	80048f6 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048ea:	6978      	ldr	r0, [r7, #20]
 80048ec:	f001 fe42 	bl	8006574 <vPortFree>
 80048f0:	e001      	b.n	80048f6 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d017      	beq.n	800492c <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004904:	88fa      	ldrh	r2, [r7, #6]
 8004906:	2300      	movs	r3, #0
 8004908:	9303      	str	r3, [sp, #12]
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	9302      	str	r3, [sp, #8]
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	9301      	str	r3, [sp, #4]
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f80e 	bl	800493c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004920:	69f8      	ldr	r0, [r7, #28]
 8004922:	f000 f8d3 	bl	8004acc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004926:	2301      	movs	r3, #1
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	e002      	b.n	8004932 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800492c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004930:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004932:	69bb      	ldr	r3, [r7, #24]
	}
 8004934:	4618      	mov	r0, r3
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	461a      	mov	r2, r3
 8004954:	21a5      	movs	r1, #165	; 0xa5
 8004956:	f001 ff53 	bl	8006800 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004964:	3b01      	subs	r3, #1
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	f023 0307 	bic.w	r3, r3, #7
 8004972:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <prvInitialiseNewTask+0x58>
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	617b      	str	r3, [r7, #20]
}
 8004990:	bf00      	nop
 8004992:	e7fe      	b.n	8004992 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004994:	2300      	movs	r3, #0
 8004996:	61fb      	str	r3, [r7, #28]
 8004998:	e012      	b.n	80049c0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	4413      	add	r3, r2
 80049a0:	7819      	ldrb	r1, [r3, #0]
 80049a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	4413      	add	r3, r2
 80049a8:	3334      	adds	r3, #52	; 0x34
 80049aa:	460a      	mov	r2, r1
 80049ac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	4413      	add	r3, r2
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d006      	beq.n	80049c8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3301      	adds	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b1f      	cmp	r3, #31
 80049c4:	d9e9      	bls.n	800499a <prvInitialiseNewTask+0x5e>
 80049c6:	e000      	b.n	80049ca <prvInitialiseNewTask+0x8e>
		{
			break;
 80049c8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	2b37      	cmp	r3, #55	; 0x37
 80049d6:	d901      	bls.n	80049dc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049d8:	2337      	movs	r3, #55	; 0x37
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e6:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	2200      	movs	r2, #0
 80049ec:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	3304      	adds	r3, #4
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff f8cb 	bl	8003b8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	3318      	adds	r3, #24
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff f8c6 	bl	8003b8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	3368      	adds	r3, #104	; 0x68
 8004a2c:	f44f 6285 	mov.w	r2, #1064	; 0x428
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 fee4 	bl	8006800 <memset>
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	f503 7255 	add.w	r2, r3, #852	; 0x354
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	66da      	str	r2, [r3, #108]	; 0x6c
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	f503 726f 	add.w	r2, r3, #956	; 0x3bc
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	671a      	str	r2, [r3, #112]	; 0x70
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4e:	f203 4224 	addw	r2, r3, #1060	; 0x424
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	675a      	str	r2, [r3, #116]	; 0x74
 8004a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a58:	f04f 0201 	mov.w	r2, #1
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a66:	f243 320e 	movw	r2, #13070	; 0x330e
 8004a6a:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8004a74:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	f241 2234 	movw	r2, #4660	; 0x1234
 8004a7e:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	f24e 626d 	movw	r2, #58989	; 0xe66d
 8004a88:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	f64d 62ec 	movw	r2, #57068	; 0xdeec
 8004a92:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	2205      	movs	r2, #5
 8004a9a:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	220b      	movs	r2, #11
 8004aa2:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	68f9      	ldr	r1, [r7, #12]
 8004aaa:	69b8      	ldr	r0, [r7, #24]
 8004aac:	f001 faae 	bl	800600c <pxPortInitialiseStack>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <prvInitialiseNewTask+0x186>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ac2:	bf00      	nop
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ad4:	f001 fb8a 	bl	80061ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ad8:	4b2d      	ldr	r3, [pc, #180]	; (8004b90 <prvAddNewTaskToReadyList+0xc4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3301      	adds	r3, #1
 8004ade:	4a2c      	ldr	r2, [pc, #176]	; (8004b90 <prvAddNewTaskToReadyList+0xc4>)
 8004ae0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ae2:	4b2c      	ldr	r3, [pc, #176]	; (8004b94 <prvAddNewTaskToReadyList+0xc8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d109      	bne.n	8004afe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004aea:	4a2a      	ldr	r2, [pc, #168]	; (8004b94 <prvAddNewTaskToReadyList+0xc8>)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004af0:	4b27      	ldr	r3, [pc, #156]	; (8004b90 <prvAddNewTaskToReadyList+0xc4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d110      	bne.n	8004b1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004af8:	f000 fbf4 	bl	80052e4 <prvInitialiseTaskLists>
 8004afc:	e00d      	b.n	8004b1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004afe:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <prvAddNewTaskToReadyList+0xcc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b06:	4b23      	ldr	r3, [pc, #140]	; (8004b94 <prvAddNewTaskToReadyList+0xc8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d802      	bhi.n	8004b1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b14:	4a1f      	ldr	r2, [pc, #124]	; (8004b94 <prvAddNewTaskToReadyList+0xc8>)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b1a:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <prvAddNewTaskToReadyList+0xd0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	4a1e      	ldr	r2, [pc, #120]	; (8004b9c <prvAddNewTaskToReadyList+0xd0>)
 8004b22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b24:	4b1d      	ldr	r3, [pc, #116]	; (8004b9c <prvAddNewTaskToReadyList+0xd0>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b30:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <prvAddNewTaskToReadyList+0xd4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d903      	bls.n	8004b40 <prvAddNewTaskToReadyList+0x74>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	4a18      	ldr	r2, [pc, #96]	; (8004ba0 <prvAddNewTaskToReadyList+0xd4>)
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <prvAddNewTaskToReadyList+0xd8>)
 8004b4e:	441a      	add	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	4610      	mov	r0, r2
 8004b58:	f7ff f825 	bl	8003ba6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b5c:	f001 fb76 	bl	800624c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b60:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <prvAddNewTaskToReadyList+0xcc>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00e      	beq.n	8004b86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <prvAddNewTaskToReadyList+0xc8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d207      	bcs.n	8004b86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <prvAddNewTaskToReadyList+0xdc>)
 8004b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b86:	bf00      	nop
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20001664 	.word	0x20001664
 8004b94:	20001190 	.word	0x20001190
 8004b98:	20001670 	.word	0x20001670
 8004b9c:	20001680 	.word	0x20001680
 8004ba0:	2000166c 	.word	0x2000166c
 8004ba4:	20001194 	.word	0x20001194
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bba:	463a      	mov	r2, r7
 8004bbc:	1d39      	adds	r1, r7, #4
 8004bbe:	f107 0308 	add.w	r3, r7, #8
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe ff92 	bl	8003aec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	9202      	str	r2, [sp, #8]
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	460a      	mov	r2, r1
 8004bda:	4924      	ldr	r1, [pc, #144]	; (8004c6c <vTaskStartScheduler+0xc0>)
 8004bdc:	4824      	ldr	r0, [pc, #144]	; (8004c70 <vTaskStartScheduler+0xc4>)
 8004bde:	f7ff fe09 	bl	80047f4 <xTaskCreateStatic>
 8004be2:	4603      	mov	r3, r0
 8004be4:	4a23      	ldr	r2, [pc, #140]	; (8004c74 <vTaskStartScheduler+0xc8>)
 8004be6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004be8:	4b22      	ldr	r3, [pc, #136]	; (8004c74 <vTaskStartScheduler+0xc8>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e001      	b.n	8004bfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d102      	bne.n	8004c06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c00:	f000 fef2 	bl	80059e8 <xTimerCreateTimerTask>
 8004c04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d11b      	bne.n	8004c44 <vTaskStartScheduler+0x98>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	613b      	str	r3, [r7, #16]
}
 8004c1e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c20:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <vTaskStartScheduler+0xcc>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3368      	adds	r3, #104	; 0x68
 8004c26:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <vTaskStartScheduler+0xd0>)
 8004c28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c2a:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <vTaskStartScheduler+0xd4>)
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c32:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <vTaskStartScheduler+0xd8>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004c38:	4b13      	ldr	r3, [pc, #76]	; (8004c88 <vTaskStartScheduler+0xdc>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c3e:	f001 fa63 	bl	8006108 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c42:	e00e      	b.n	8004c62 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c4a:	d10a      	bne.n	8004c62 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	60fb      	str	r3, [r7, #12]
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <vTaskStartScheduler+0xb4>
}
 8004c62:	bf00      	nop
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	08006a40 	.word	0x08006a40
 8004c70:	080052b5 	.word	0x080052b5
 8004c74:	20001688 	.word	0x20001688
 8004c78:	20001190 	.word	0x20001190
 8004c7c:	20000010 	.word	0x20000010
 8004c80:	20001684 	.word	0x20001684
 8004c84:	20001670 	.word	0x20001670
 8004c88:	20001668 	.word	0x20001668

08004c8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004c90:	4b04      	ldr	r3, [pc, #16]	; (8004ca4 <vTaskSuspendAll+0x18>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	4a03      	ldr	r2, [pc, #12]	; (8004ca4 <vTaskSuspendAll+0x18>)
 8004c98:	6013      	str	r3, [r2, #0]
}
 8004c9a:	bf00      	nop
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	2000168c 	.word	0x2000168c

08004ca8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cb6:	4b42      	ldr	r3, [pc, #264]	; (8004dc0 <xTaskResumeAll+0x118>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	603b      	str	r3, [r7, #0]
}
 8004cd0:	bf00      	nop
 8004cd2:	e7fe      	b.n	8004cd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cd4:	f001 fa8a 	bl	80061ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cd8:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <xTaskResumeAll+0x118>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	4a38      	ldr	r2, [pc, #224]	; (8004dc0 <xTaskResumeAll+0x118>)
 8004ce0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ce2:	4b37      	ldr	r3, [pc, #220]	; (8004dc0 <xTaskResumeAll+0x118>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d162      	bne.n	8004db0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cea:	4b36      	ldr	r3, [pc, #216]	; (8004dc4 <xTaskResumeAll+0x11c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d05e      	beq.n	8004db0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cf2:	e02f      	b.n	8004d54 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004cf4:	4b34      	ldr	r3, [pc, #208]	; (8004dc8 <xTaskResumeAll+0x120>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3318      	adds	r3, #24
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fe ffab 	bl	8003c5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fe ffa6 	bl	8003c5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d14:	4b2d      	ldr	r3, [pc, #180]	; (8004dcc <xTaskResumeAll+0x124>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d903      	bls.n	8004d24 <xTaskResumeAll+0x7c>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	4a2a      	ldr	r2, [pc, #168]	; (8004dcc <xTaskResumeAll+0x124>)
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4a27      	ldr	r2, [pc, #156]	; (8004dd0 <xTaskResumeAll+0x128>)
 8004d32:	441a      	add	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f7fe ff33 	bl	8003ba6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d44:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <xTaskResumeAll+0x12c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d302      	bcc.n	8004d54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d4e:	4b22      	ldr	r3, [pc, #136]	; (8004dd8 <xTaskResumeAll+0x130>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d54:	4b1c      	ldr	r3, [pc, #112]	; (8004dc8 <xTaskResumeAll+0x120>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1cb      	bne.n	8004cf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d62:	f000 fb61 	bl	8005428 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d66:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <xTaskResumeAll+0x134>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d010      	beq.n	8004d94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d72:	f000 f845 	bl	8004e00 <xTaskIncrementTick>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d7c:	4b16      	ldr	r3, [pc, #88]	; (8004dd8 <xTaskResumeAll+0x130>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f1      	bne.n	8004d72 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004d8e:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <xTaskResumeAll+0x134>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d94:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <xTaskResumeAll+0x130>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d009      	beq.n	8004db0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004da0:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <xTaskResumeAll+0x138>)
 8004da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004db0:	f001 fa4c 	bl	800624c <vPortExitCritical>

	return xAlreadyYielded;
 8004db4:	68bb      	ldr	r3, [r7, #8]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	2000168c 	.word	0x2000168c
 8004dc4:	20001664 	.word	0x20001664
 8004dc8:	20001624 	.word	0x20001624
 8004dcc:	2000166c 	.word	0x2000166c
 8004dd0:	20001194 	.word	0x20001194
 8004dd4:	20001190 	.word	0x20001190
 8004dd8:	20001678 	.word	0x20001678
 8004ddc:	20001674 	.word	0x20001674
 8004de0:	e000ed04 	.word	0xe000ed04

08004de4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dea:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <xTaskGetTickCount+0x18>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004df0:	687b      	ldr	r3, [r7, #4]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr
 8004dfc:	20001668 	.word	0x20001668

08004e00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e0a:	4b51      	ldr	r3, [pc, #324]	; (8004f50 <xTaskIncrementTick+0x150>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 808e 	bne.w	8004f30 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e14:	4b4f      	ldr	r3, [pc, #316]	; (8004f54 <xTaskIncrementTick+0x154>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e1c:	4a4d      	ldr	r2, [pc, #308]	; (8004f54 <xTaskIncrementTick+0x154>)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d120      	bne.n	8004e6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e28:	4b4b      	ldr	r3, [pc, #300]	; (8004f58 <xTaskIncrementTick+0x158>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	603b      	str	r3, [r7, #0]
}
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <xTaskIncrementTick+0x46>
 8004e48:	4b43      	ldr	r3, [pc, #268]	; (8004f58 <xTaskIncrementTick+0x158>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	4b43      	ldr	r3, [pc, #268]	; (8004f5c <xTaskIncrementTick+0x15c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a41      	ldr	r2, [pc, #260]	; (8004f58 <xTaskIncrementTick+0x158>)
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	4a41      	ldr	r2, [pc, #260]	; (8004f5c <xTaskIncrementTick+0x15c>)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	4b40      	ldr	r3, [pc, #256]	; (8004f60 <xTaskIncrementTick+0x160>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3301      	adds	r3, #1
 8004e62:	4a3f      	ldr	r2, [pc, #252]	; (8004f60 <xTaskIncrementTick+0x160>)
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	f000 fadf 	bl	8005428 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e6a:	4b3e      	ldr	r3, [pc, #248]	; (8004f64 <xTaskIncrementTick+0x164>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d34e      	bcc.n	8004f12 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e74:	4b38      	ldr	r3, [pc, #224]	; (8004f58 <xTaskIncrementTick+0x158>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <xTaskIncrementTick+0x82>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <xTaskIncrementTick+0x84>
 8004e82:	2300      	movs	r3, #0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d004      	beq.n	8004e92 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e88:	4b36      	ldr	r3, [pc, #216]	; (8004f64 <xTaskIncrementTick+0x164>)
 8004e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e8e:	601a      	str	r2, [r3, #0]
					break;
 8004e90:	e03f      	b.n	8004f12 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e92:	4b31      	ldr	r3, [pc, #196]	; (8004f58 <xTaskIncrementTick+0x158>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d203      	bcs.n	8004eb2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004eaa:	4a2e      	ldr	r2, [pc, #184]	; (8004f64 <xTaskIncrementTick+0x164>)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6013      	str	r3, [r2, #0]
						break;
 8004eb0:	e02f      	b.n	8004f12 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe fed0 	bl	8003c5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d004      	beq.n	8004ece <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	3318      	adds	r3, #24
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fe fec7 	bl	8003c5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed2:	4b25      	ldr	r3, [pc, #148]	; (8004f68 <xTaskIncrementTick+0x168>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d903      	bls.n	8004ee2 <xTaskIncrementTick+0xe2>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	4a22      	ldr	r2, [pc, #136]	; (8004f68 <xTaskIncrementTick+0x168>)
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4a1f      	ldr	r2, [pc, #124]	; (8004f6c <xTaskIncrementTick+0x16c>)
 8004ef0:	441a      	add	r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f7fe fe54 	bl	8003ba6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f02:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <xTaskIncrementTick+0x170>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d3b3      	bcc.n	8004e74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f10:	e7b0      	b.n	8004e74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f12:	4b17      	ldr	r3, [pc, #92]	; (8004f70 <xTaskIncrementTick+0x170>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f18:	4914      	ldr	r1, [pc, #80]	; (8004f6c <xTaskIncrementTick+0x16c>)
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d907      	bls.n	8004f3a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e004      	b.n	8004f3a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f30:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <xTaskIncrementTick+0x174>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3301      	adds	r3, #1
 8004f36:	4a0f      	ldr	r2, [pc, #60]	; (8004f74 <xTaskIncrementTick+0x174>)
 8004f38:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <xTaskIncrementTick+0x178>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004f42:	2301      	movs	r3, #1
 8004f44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f46:	697b      	ldr	r3, [r7, #20]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	2000168c 	.word	0x2000168c
 8004f54:	20001668 	.word	0x20001668
 8004f58:	2000161c 	.word	0x2000161c
 8004f5c:	20001620 	.word	0x20001620
 8004f60:	2000167c 	.word	0x2000167c
 8004f64:	20001684 	.word	0x20001684
 8004f68:	2000166c 	.word	0x2000166c
 8004f6c:	20001194 	.word	0x20001194
 8004f70:	20001190 	.word	0x20001190
 8004f74:	20001674 	.word	0x20001674
 8004f78:	20001678 	.word	0x20001678

08004f7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f82:	4b2a      	ldr	r3, [pc, #168]	; (800502c <vTaskSwitchContext+0xb0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f8a:	4b29      	ldr	r3, [pc, #164]	; (8005030 <vTaskSwitchContext+0xb4>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f90:	e046      	b.n	8005020 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004f92:	4b27      	ldr	r3, [pc, #156]	; (8005030 <vTaskSwitchContext+0xb4>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f98:	4b26      	ldr	r3, [pc, #152]	; (8005034 <vTaskSwitchContext+0xb8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	e010      	b.n	8004fc2 <vTaskSwitchContext+0x46>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10a      	bne.n	8004fbc <vTaskSwitchContext+0x40>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	607b      	str	r3, [r7, #4]
}
 8004fb8:	bf00      	nop
 8004fba:	e7fe      	b.n	8004fba <vTaskSwitchContext+0x3e>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	491d      	ldr	r1, [pc, #116]	; (8005038 <vTaskSwitchContext+0xbc>)
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0e4      	beq.n	8004fa0 <vTaskSwitchContext+0x24>
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4a15      	ldr	r2, [pc, #84]	; (8005038 <vTaskSwitchContext+0xbc>)
 8004fe2:	4413      	add	r3, r2
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d104      	bne.n	8005006 <vTaskSwitchContext+0x8a>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4a0b      	ldr	r2, [pc, #44]	; (800503c <vTaskSwitchContext+0xc0>)
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	4a08      	ldr	r2, [pc, #32]	; (8005034 <vTaskSwitchContext+0xb8>)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005016:	4b09      	ldr	r3, [pc, #36]	; (800503c <vTaskSwitchContext+0xc0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3368      	adds	r3, #104	; 0x68
 800501c:	4a08      	ldr	r2, [pc, #32]	; (8005040 <vTaskSwitchContext+0xc4>)
 800501e:	6013      	str	r3, [r2, #0]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	2000168c 	.word	0x2000168c
 8005030:	20001678 	.word	0x20001678
 8005034:	2000166c 	.word	0x2000166c
 8005038:	20001194 	.word	0x20001194
 800503c:	20001190 	.word	0x20001190
 8005040:	20000010 	.word	0x20000010

08005044 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10a      	bne.n	800506a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	60fb      	str	r3, [r7, #12]
}
 8005066:	bf00      	nop
 8005068:	e7fe      	b.n	8005068 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800506a:	4b07      	ldr	r3, [pc, #28]	; (8005088 <vTaskPlaceOnEventList+0x44>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3318      	adds	r3, #24
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fe fdba 	bl	8003bec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005078:	2101      	movs	r1, #1
 800507a:	6838      	ldr	r0, [r7, #0]
 800507c:	f000 fc60 	bl	8005940 <prvAddCurrentTaskToDelayedList>
}
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20001190 	.word	0x20001190

0800508c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10a      	bne.n	80050b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	617b      	str	r3, [r7, #20]
}
 80050b0:	bf00      	nop
 80050b2:	e7fe      	b.n	80050b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050b4:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3318      	adds	r3, #24
 80050ba:	4619      	mov	r1, r3
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7fe fd72 	bl	8003ba6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80050c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	68b8      	ldr	r0, [r7, #8]
 80050d2:	f000 fc35 	bl	8005940 <prvAddCurrentTaskToDelayedList>
	}
 80050d6:	bf00      	nop
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20001190 	.word	0x20001190

080050e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	60fb      	str	r3, [r7, #12]
}
 800510c:	bf00      	nop
 800510e:	e7fe      	b.n	800510e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	3318      	adds	r3, #24
 8005114:	4618      	mov	r0, r3
 8005116:	f7fe fda1 	bl	8003c5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800511a:	4b1e      	ldr	r3, [pc, #120]	; (8005194 <xTaskRemoveFromEventList+0xb0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d11d      	bne.n	800515e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	3304      	adds	r3, #4
 8005126:	4618      	mov	r0, r3
 8005128:	f7fe fd98 	bl	8003c5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005130:	4b19      	ldr	r3, [pc, #100]	; (8005198 <xTaskRemoveFromEventList+0xb4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d903      	bls.n	8005140 <xTaskRemoveFromEventList+0x5c>
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	4a16      	ldr	r2, [pc, #88]	; (8005198 <xTaskRemoveFromEventList+0xb4>)
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4a13      	ldr	r2, [pc, #76]	; (800519c <xTaskRemoveFromEventList+0xb8>)
 800514e:	441a      	add	r2, r3
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	3304      	adds	r3, #4
 8005154:	4619      	mov	r1, r3
 8005156:	4610      	mov	r0, r2
 8005158:	f7fe fd25 	bl	8003ba6 <vListInsertEnd>
 800515c:	e005      	b.n	800516a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	3318      	adds	r3, #24
 8005162:	4619      	mov	r1, r3
 8005164:	480e      	ldr	r0, [pc, #56]	; (80051a0 <xTaskRemoveFromEventList+0xbc>)
 8005166:	f7fe fd1e 	bl	8003ba6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516e:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <xTaskRemoveFromEventList+0xc0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	429a      	cmp	r2, r3
 8005176:	d905      	bls.n	8005184 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005178:	2301      	movs	r3, #1
 800517a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <xTaskRemoveFromEventList+0xc4>)
 800517e:	2201      	movs	r2, #1
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	e001      	b.n	8005188 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005188:	697b      	ldr	r3, [r7, #20]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	2000168c 	.word	0x2000168c
 8005198:	2000166c 	.word	0x2000166c
 800519c:	20001194 	.word	0x20001194
 80051a0:	20001624 	.word	0x20001624
 80051a4:	20001190 	.word	0x20001190
 80051a8:	20001678 	.word	0x20001678

080051ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051b4:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <vTaskInternalSetTimeOutState+0x24>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051bc:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <vTaskInternalSetTimeOutState+0x28>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	605a      	str	r2, [r3, #4]
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bc80      	pop	{r7}
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	2000167c 	.word	0x2000167c
 80051d4:	20001668 	.word	0x20001668

080051d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10a      	bne.n	80051fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	613b      	str	r3, [r7, #16]
}
 80051fa:	bf00      	nop
 80051fc:	e7fe      	b.n	80051fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	60fb      	str	r3, [r7, #12]
}
 8005216:	bf00      	nop
 8005218:	e7fe      	b.n	8005218 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800521a:	f000 ffe7 	bl	80061ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800521e:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <xTaskCheckForTimeOut+0xbc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005236:	d102      	bne.n	800523e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005238:	2300      	movs	r3, #0
 800523a:	61fb      	str	r3, [r7, #28]
 800523c:	e023      	b.n	8005286 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b15      	ldr	r3, [pc, #84]	; (8005298 <xTaskCheckForTimeOut+0xc0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d007      	beq.n	800525a <xTaskCheckForTimeOut+0x82>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	429a      	cmp	r2, r3
 8005252:	d302      	bcc.n	800525a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005254:	2301      	movs	r3, #1
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	e015      	b.n	8005286 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	429a      	cmp	r2, r3
 8005262:	d20b      	bcs.n	800527c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	1ad2      	subs	r2, r2, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff ff9b 	bl	80051ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005276:	2300      	movs	r3, #0
 8005278:	61fb      	str	r3, [r7, #28]
 800527a:	e004      	b.n	8005286 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005282:	2301      	movs	r3, #1
 8005284:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005286:	f000 ffe1 	bl	800624c <vPortExitCritical>

	return xReturn;
 800528a:	69fb      	ldr	r3, [r7, #28]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20001668 	.word	0x20001668
 8005298:	2000167c 	.word	0x2000167c

0800529c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052a0:	4b03      	ldr	r3, [pc, #12]	; (80052b0 <vTaskMissedYield+0x14>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
}
 80052a6:	bf00      	nop
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	20001678 	.word	0x20001678

080052b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052bc:	f000 f852 	bl	8005364 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <prvIdleTask+0x28>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d9f9      	bls.n	80052bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80052c8:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <prvIdleTask+0x2c>)
 80052ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052d8:	e7f0      	b.n	80052bc <prvIdleTask+0x8>
 80052da:	bf00      	nop
 80052dc:	20001194 	.word	0x20001194
 80052e0:	e000ed04 	.word	0xe000ed04

080052e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052ea:	2300      	movs	r3, #0
 80052ec:	607b      	str	r3, [r7, #4]
 80052ee:	e00c      	b.n	800530a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4a12      	ldr	r2, [pc, #72]	; (8005344 <prvInitialiseTaskLists+0x60>)
 80052fc:	4413      	add	r3, r2
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fe fc26 	bl	8003b50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3301      	adds	r3, #1
 8005308:	607b      	str	r3, [r7, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b37      	cmp	r3, #55	; 0x37
 800530e:	d9ef      	bls.n	80052f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005310:	480d      	ldr	r0, [pc, #52]	; (8005348 <prvInitialiseTaskLists+0x64>)
 8005312:	f7fe fc1d 	bl	8003b50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005316:	480d      	ldr	r0, [pc, #52]	; (800534c <prvInitialiseTaskLists+0x68>)
 8005318:	f7fe fc1a 	bl	8003b50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800531c:	480c      	ldr	r0, [pc, #48]	; (8005350 <prvInitialiseTaskLists+0x6c>)
 800531e:	f7fe fc17 	bl	8003b50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005322:	480c      	ldr	r0, [pc, #48]	; (8005354 <prvInitialiseTaskLists+0x70>)
 8005324:	f7fe fc14 	bl	8003b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005328:	480b      	ldr	r0, [pc, #44]	; (8005358 <prvInitialiseTaskLists+0x74>)
 800532a:	f7fe fc11 	bl	8003b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800532e:	4b0b      	ldr	r3, [pc, #44]	; (800535c <prvInitialiseTaskLists+0x78>)
 8005330:	4a05      	ldr	r2, [pc, #20]	; (8005348 <prvInitialiseTaskLists+0x64>)
 8005332:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <prvInitialiseTaskLists+0x7c>)
 8005336:	4a05      	ldr	r2, [pc, #20]	; (800534c <prvInitialiseTaskLists+0x68>)
 8005338:	601a      	str	r2, [r3, #0]
}
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20001194 	.word	0x20001194
 8005348:	200015f4 	.word	0x200015f4
 800534c:	20001608 	.word	0x20001608
 8005350:	20001624 	.word	0x20001624
 8005354:	20001638 	.word	0x20001638
 8005358:	20001650 	.word	0x20001650
 800535c:	2000161c 	.word	0x2000161c
 8005360:	20001620 	.word	0x20001620

08005364 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800536a:	e019      	b.n	80053a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800536c:	f000 ff3e 	bl	80061ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005370:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <prvCheckTasksWaitingTermination+0x50>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3304      	adds	r3, #4
 800537c:	4618      	mov	r0, r3
 800537e:	f7fe fc6d 	bl	8003c5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005382:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <prvCheckTasksWaitingTermination+0x54>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3b01      	subs	r3, #1
 8005388:	4a0b      	ldr	r2, [pc, #44]	; (80053b8 <prvCheckTasksWaitingTermination+0x54>)
 800538a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <prvCheckTasksWaitingTermination+0x58>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3b01      	subs	r3, #1
 8005392:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <prvCheckTasksWaitingTermination+0x58>)
 8005394:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005396:	f000 ff59 	bl	800624c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f810 	bl	80053c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053a0:	4b06      	ldr	r3, [pc, #24]	; (80053bc <prvCheckTasksWaitingTermination+0x58>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e1      	bne.n	800536c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20001638 	.word	0x20001638
 80053b8:	20001664 	.word	0x20001664
 80053bc:	2000164c 	.word	0x2000164c

080053c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3368      	adds	r3, #104	; 0x68
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 fa2d 	bl	800682c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d108      	bne.n	80053ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	4618      	mov	r0, r3
 80053e2:	f001 f8c7 	bl	8006574 <vPortFree>
				vPortFree( pxTCB );
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f001 f8c4 	bl	8006574 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053ec:	e018      	b.n	8005420 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d103      	bne.n	8005400 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 f8bb 	bl	8006574 <vPortFree>
	}
 80053fe:	e00f      	b.n	8005420 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8005406:	2b02      	cmp	r3, #2
 8005408:	d00a      	beq.n	8005420 <prvDeleteTCB+0x60>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60fb      	str	r3, [r7, #12]
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <prvDeleteTCB+0x5e>
	}
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800542e:	4b0e      	ldr	r3, [pc, #56]	; (8005468 <prvResetNextTaskUnblockTime+0x40>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <prvResetNextTaskUnblockTime+0x14>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <prvResetNextTaskUnblockTime+0x16>
 800543c:	2300      	movs	r3, #0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005442:	4b0a      	ldr	r3, [pc, #40]	; (800546c <prvResetNextTaskUnblockTime+0x44>)
 8005444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005448:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800544a:	e008      	b.n	800545e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <prvResetNextTaskUnblockTime+0x40>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4a04      	ldr	r2, [pc, #16]	; (800546c <prvResetNextTaskUnblockTime+0x44>)
 800545c:	6013      	str	r3, [r2, #0]
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr
 8005468:	2000161c 	.word	0x2000161c
 800546c:	20001684 	.word	0x20001684

08005470 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <xTaskGetSchedulerState+0x34>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d102      	bne.n	8005484 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800547e:	2301      	movs	r3, #1
 8005480:	607b      	str	r3, [r7, #4]
 8005482:	e008      	b.n	8005496 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005484:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <xTaskGetSchedulerState+0x38>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800548c:	2302      	movs	r3, #2
 800548e:	607b      	str	r3, [r7, #4]
 8005490:	e001      	b.n	8005496 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005492:	2300      	movs	r3, #0
 8005494:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005496:	687b      	ldr	r3, [r7, #4]
	}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20001670 	.word	0x20001670
 80054a8:	2000168c 	.word	0x2000168c

080054ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d056      	beq.n	8005570 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054c2:	4b2e      	ldr	r3, [pc, #184]	; (800557c <xTaskPriorityDisinherit+0xd0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d00a      	beq.n	80054e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	60fb      	str	r3, [r7, #12]
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	60bb      	str	r3, [r7, #8]
}
 80054fc:	bf00      	nop
 80054fe:	e7fe      	b.n	80054fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005504:	1e5a      	subs	r2, r3, #1
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005512:	429a      	cmp	r2, r3
 8005514:	d02c      	beq.n	8005570 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551a:	2b00      	cmp	r3, #0
 800551c:	d128      	bne.n	8005570 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	3304      	adds	r3, #4
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fb9a 	bl	8003c5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005540:	4b0f      	ldr	r3, [pc, #60]	; (8005580 <xTaskPriorityDisinherit+0xd4>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d903      	bls.n	8005550 <xTaskPriorityDisinherit+0xa4>
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	4a0c      	ldr	r2, [pc, #48]	; (8005580 <xTaskPriorityDisinherit+0xd4>)
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4a09      	ldr	r2, [pc, #36]	; (8005584 <xTaskPriorityDisinherit+0xd8>)
 800555e:	441a      	add	r2, r3
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	3304      	adds	r3, #4
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f7fe fb1d 	bl	8003ba6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800556c:	2301      	movs	r3, #1
 800556e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005570:	697b      	ldr	r3, [r7, #20]
	}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20001190 	.word	0x20001190
 8005580:	2000166c 	.word	0x2000166c
 8005584:	20001194 	.word	0x20001194

08005588 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005596:	f000 fe29 	bl	80061ec <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800559a:	4b29      	ldr	r3, [pc, #164]	; (8005640 <xTaskNotifyWait+0xb8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d01c      	beq.n	80055e2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80055a8:	4b25      	ldr	r3, [pc, #148]	; (8005640 <xTaskNotifyWait+0xb8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f8d3 1490 	ldr.w	r1, [r3, #1168]	; 0x490
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	43d2      	mvns	r2, r2
 80055b4:	400a      	ands	r2, r1
 80055b6:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80055ba:	4b21      	ldr	r3, [pc, #132]	; (8005640 <xTaskNotifyWait+0xb8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( xTicksToWait > ( TickType_t ) 0 )
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00b      	beq.n	80055e2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055ca:	2101      	movs	r1, #1
 80055cc:	6838      	ldr	r0, [r7, #0]
 80055ce:	f000 f9b7 	bl	8005940 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80055d2:	4b1c      	ldr	r3, [pc, #112]	; (8005644 <xTaskNotifyWait+0xbc>)
 80055d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80055e2:	f000 fe33 	bl	800624c <vPortExitCritical>

		taskENTER_CRITICAL();
 80055e6:	f000 fe01 	bl	80061ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80055f0:	4b13      	ldr	r3, [pc, #76]	; (8005640 <xTaskNotifyWait+0xb8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80055fc:	4b10      	ldr	r3, [pc, #64]	; (8005640 <xTaskNotifyWait+0xb8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d002      	beq.n	8005610 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	e00a      	b.n	8005626 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <xTaskNotifyWait+0xb8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f8d3 1490 	ldr.w	r1, [r3, #1168]	; 0x490
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	43d2      	mvns	r2, r2
 800561c:	400a      	ands	r2, r1
 800561e:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
				xReturn = pdTRUE;
 8005622:	2301      	movs	r3, #1
 8005624:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005626:	4b06      	ldr	r3, [pc, #24]	; (8005640 <xTaskNotifyWait+0xb8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
		}
		taskEXIT_CRITICAL();
 8005630:	f000 fe0c 	bl	800624c <vPortExitCritical>

		return xReturn;
 8005634:	697b      	ldr	r3, [r7, #20]
	}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20001190 	.word	0x20001190
 8005644:	e000ed04 	.word	0xe000ed04

08005648 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08a      	sub	sp, #40	; 0x28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005658:	2301      	movs	r3, #1
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <xTaskGenericNotify+0x30>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	61bb      	str	r3, [r7, #24]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800567c:	f000 fdb6 	bl	80061ec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005696:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

			switch( eAction )
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d82d      	bhi.n	8005702 <xTaskGenericNotify+0xba>
 80056a6:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <xTaskGenericNotify+0x64>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	08005703 	.word	0x08005703
 80056b0:	080056c1 	.word	0x080056c1
 80056b4:	080056d3 	.word	0x080056d3
 80056b8:	080056e3 	.word	0x080056e3
 80056bc:	080056ed 	.word	0x080056ed
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	431a      	orrs	r2, r3
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
					break;
 80056d0:	e017      	b.n	8005702 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
					break;
 80056e0:	e00f      	b.n	8005702 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
					break;
 80056ea:	e00a      	b.n	8005702 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80056ec:	7ffb      	ldrb	r3, [r7, #31]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d004      	beq.n	80056fc <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80056fa:	e001      	b.n	8005700 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 80056fc:	2300      	movs	r3, #0
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005700:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005702:	7ffb      	ldrb	r3, [r7, #31]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d13a      	bne.n	800577e <xTaskGenericNotify+0x136>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	3304      	adds	r3, #4
 800570c:	4618      	mov	r0, r3
 800570e:	f7fe faa5 	bl	8003c5c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005716:	4b1d      	ldr	r3, [pc, #116]	; (800578c <xTaskGenericNotify+0x144>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	429a      	cmp	r2, r3
 800571c:	d903      	bls.n	8005726 <xTaskGenericNotify+0xde>
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	4a1a      	ldr	r2, [pc, #104]	; (800578c <xTaskGenericNotify+0x144>)
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4a17      	ldr	r2, [pc, #92]	; (8005790 <xTaskGenericNotify+0x148>)
 8005734:	441a      	add	r2, r3
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	3304      	adds	r3, #4
 800573a:	4619      	mov	r1, r3
 800573c:	4610      	mov	r0, r2
 800573e:	f7fe fa32 	bl	8003ba6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <xTaskGenericNotify+0x118>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	617b      	str	r3, [r7, #20]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <xTaskGenericNotify+0x116>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <xTaskGenericNotify+0x14c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	429a      	cmp	r2, r3
 800576c:	d907      	bls.n	800577e <xTaskGenericNotify+0x136>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800576e:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <xTaskGenericNotify+0x150>)
 8005770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800577e:	f000 fd65 	bl	800624c <vPortExitCritical>

		return xReturn;
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005784:	4618      	mov	r0, r3
 8005786:	3728      	adds	r7, #40	; 0x28
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	2000166c 	.word	0x2000166c
 8005790:	20001194 	.word	0x20001194
 8005794:	20001190 	.word	0x20001190
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08e      	sub	sp, #56	; 0x38
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	4613      	mov	r3, r2
 80057aa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80057ac:	2301      	movs	r3, #1
 80057ae:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057cc:	f000 fdd0 	bl	8006370 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80057d4:	f3ef 8211 	mrs	r2, BASEPRI
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	623a      	str	r2, [r7, #32]
 80057ea:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80057ec:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d004      	beq.n	8005800 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	2202      	movs	r2, #2
 800580e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

			switch( eAction )
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	2b04      	cmp	r3, #4
 8005816:	d82f      	bhi.n	8005878 <xTaskGenericNotifyFromISR+0xdc>
 8005818:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <xTaskGenericNotifyFromISR+0x84>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005879 	.word	0x08005879
 8005824:	08005835 	.word	0x08005835
 8005828:	08005847 	.word	0x08005847
 800582c:	08005857 	.word	0x08005857
 8005830:	08005861 	.word	0x08005861
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	431a      	orrs	r2, r3
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
					break;
 8005844:	e018      	b.n	8005878 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
					break;
 8005854:	e010      	b.n	8005878 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
					break;
 800585e:	e00b      	b.n	8005878 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005860:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005864:	2b02      	cmp	r3, #2
 8005866:	d004      	beq.n	8005872 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005870:	e001      	b.n	8005876 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 8005872:	2300      	movs	r3, #0
 8005874:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005876:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005878:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800587c:	2b01      	cmp	r3, #1
 800587e:	d147      	bne.n	8005910 <xTaskGenericNotifyFromISR+0x174>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	61bb      	str	r3, [r7, #24]
}
 800589a:	bf00      	nop
 800589c:	e7fe      	b.n	800589c <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800589e:	4b22      	ldr	r3, [pc, #136]	; (8005928 <xTaskGenericNotifyFromISR+0x18c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d11d      	bne.n	80058e2 <xTaskGenericNotifyFromISR+0x146>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	3304      	adds	r3, #4
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe f9d6 	bl	8003c5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b4:	4b1d      	ldr	r3, [pc, #116]	; (800592c <xTaskGenericNotifyFromISR+0x190>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d903      	bls.n	80058c4 <xTaskGenericNotifyFromISR+0x128>
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	4a1a      	ldr	r2, [pc, #104]	; (800592c <xTaskGenericNotifyFromISR+0x190>)
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4a17      	ldr	r2, [pc, #92]	; (8005930 <xTaskGenericNotifyFromISR+0x194>)
 80058d2:	441a      	add	r2, r3
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	3304      	adds	r3, #4
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f7fe f963 	bl	8003ba6 <vListInsertEnd>
 80058e0:	e005      	b.n	80058ee <xTaskGenericNotifyFromISR+0x152>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	3318      	adds	r3, #24
 80058e6:	4619      	mov	r1, r3
 80058e8:	4812      	ldr	r0, [pc, #72]	; (8005934 <xTaskGenericNotifyFromISR+0x198>)
 80058ea:	f7fe f95c 	bl	8003ba6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <xTaskGenericNotifyFromISR+0x19c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d909      	bls.n	8005910 <xTaskGenericNotifyFromISR+0x174>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80058fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <xTaskGenericNotifyFromISR+0x16e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005904:	2201      	movs	r2, #1
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	e002      	b.n	8005910 <xTaskGenericNotifyFromISR+0x174>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800590a:	4b0c      	ldr	r3, [pc, #48]	; (800593c <xTaskGenericNotifyFromISR+0x1a0>)
 800590c:	2201      	movs	r2, #1
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005912:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f383 8811 	msr	BASEPRI, r3
}
 800591a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800591c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800591e:	4618      	mov	r0, r3
 8005920:	3738      	adds	r7, #56	; 0x38
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	2000168c 	.word	0x2000168c
 800592c:	2000166c 	.word	0x2000166c
 8005930:	20001194 	.word	0x20001194
 8005934:	20001624 	.word	0x20001624
 8005938:	20001190 	.word	0x20001190
 800593c:	20001678 	.word	0x20001678

08005940 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800594a:	4b21      	ldr	r3, [pc, #132]	; (80059d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005950:	4b20      	ldr	r3, [pc, #128]	; (80059d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3304      	adds	r3, #4
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe f980 	bl	8003c5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005962:	d10a      	bne.n	800597a <prvAddCurrentTaskToDelayedList+0x3a>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800596a:	4b1a      	ldr	r3, [pc, #104]	; (80059d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3304      	adds	r3, #4
 8005970:	4619      	mov	r1, r3
 8005972:	4819      	ldr	r0, [pc, #100]	; (80059d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005974:	f7fe f917 	bl	8003ba6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005978:	e026      	b.n	80059c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4413      	add	r3, r2
 8005980:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005982:	4b14      	ldr	r3, [pc, #80]	; (80059d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	429a      	cmp	r2, r3
 8005990:	d209      	bcs.n	80059a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005992:	4b12      	ldr	r3, [pc, #72]	; (80059dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4b0f      	ldr	r3, [pc, #60]	; (80059d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3304      	adds	r3, #4
 800599c:	4619      	mov	r1, r3
 800599e:	4610      	mov	r0, r2
 80059a0:	f7fe f924 	bl	8003bec <vListInsert>
}
 80059a4:	e010      	b.n	80059c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059a6:	4b0e      	ldr	r3, [pc, #56]	; (80059e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3304      	adds	r3, #4
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f7fe f91a 	bl	8003bec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d202      	bcs.n	80059c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80059c2:	4a08      	ldr	r2, [pc, #32]	; (80059e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	6013      	str	r3, [r2, #0]
}
 80059c8:	bf00      	nop
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20001668 	.word	0x20001668
 80059d4:	20001190 	.word	0x20001190
 80059d8:	20001650 	.word	0x20001650
 80059dc:	20001620 	.word	0x20001620
 80059e0:	2000161c 	.word	0x2000161c
 80059e4:	20001684 	.word	0x20001684

080059e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	; 0x28
 80059ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80059f2:	f000 facb 	bl	8005f8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80059f6:	4b1c      	ldr	r3, [pc, #112]	; (8005a68 <xTimerCreateTimerTask+0x80>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d021      	beq.n	8005a42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a06:	1d3a      	adds	r2, r7, #4
 8005a08:	f107 0108 	add.w	r1, r7, #8
 8005a0c:	f107 030c 	add.w	r3, r7, #12
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fe f883 	bl	8003b1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	9202      	str	r2, [sp, #8]
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	2302      	movs	r3, #2
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	2300      	movs	r3, #0
 8005a26:	460a      	mov	r2, r1
 8005a28:	4910      	ldr	r1, [pc, #64]	; (8005a6c <xTimerCreateTimerTask+0x84>)
 8005a2a:	4811      	ldr	r0, [pc, #68]	; (8005a70 <xTimerCreateTimerTask+0x88>)
 8005a2c:	f7fe fee2 	bl	80047f4 <xTaskCreateStatic>
 8005a30:	4603      	mov	r3, r0
 8005a32:	4a10      	ldr	r2, [pc, #64]	; (8005a74 <xTimerCreateTimerTask+0x8c>)
 8005a34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a36:	4b0f      	ldr	r3, [pc, #60]	; (8005a74 <xTimerCreateTimerTask+0x8c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	613b      	str	r3, [r7, #16]
}
 8005a5a:	bf00      	nop
 8005a5c:	e7fe      	b.n	8005a5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a5e:	697b      	ldr	r3, [r7, #20]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	200016c0 	.word	0x200016c0
 8005a6c:	08006a48 	.word	0x08006a48
 8005a70:	08005b95 	.word	0x08005b95
 8005a74:	200016c4 	.word	0x200016c4

08005a78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	; 0x28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	623b      	str	r3, [r7, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005aa6:	4b1a      	ldr	r3, [pc, #104]	; (8005b10 <xTimerGenericCommand+0x98>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d02a      	beq.n	8005b04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b05      	cmp	r3, #5
 8005abe:	dc18      	bgt.n	8005af2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ac0:	f7ff fcd6 	bl	8005470 <xTaskGetSchedulerState>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d109      	bne.n	8005ade <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005aca:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <xTimerGenericCommand+0x98>)
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	f107 0110 	add.w	r1, r7, #16
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad6:	f7fe fa2b 	bl	8003f30 <xQueueGenericSend>
 8005ada:	6278      	str	r0, [r7, #36]	; 0x24
 8005adc:	e012      	b.n	8005b04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ade:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <xTimerGenericCommand+0x98>)
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	f107 0110 	add.w	r1, r7, #16
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f7fe fa21 	bl	8003f30 <xQueueGenericSend>
 8005aee:	6278      	str	r0, [r7, #36]	; 0x24
 8005af0:	e008      	b.n	8005b04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005af2:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <xTimerGenericCommand+0x98>)
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	f107 0110 	add.w	r1, r7, #16
 8005afa:	2300      	movs	r3, #0
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	f7fe fb15 	bl	800412c <xQueueGenericSendFromISR>
 8005b02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3728      	adds	r7, #40	; 0x28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	200016c0 	.word	0x200016c0

08005b14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b1e:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <prvProcessExpiredTimer+0x7c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe f895 	bl	8003c5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d122      	bne.n	8005b80 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	18d1      	adds	r1, r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	6978      	ldr	r0, [r7, #20]
 8005b48:	f000 f8c8 	bl	8005cdc <prvInsertTimerInActiveList>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d016      	beq.n	8005b80 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b52:	2300      	movs	r3, #0
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	2300      	movs	r3, #0
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	6978      	ldr	r0, [r7, #20]
 8005b5e:	f7ff ff8b 	bl	8005a78 <xTimerGenericCommand>
 8005b62:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	60fb      	str	r3, [r7, #12]
}
 8005b7c:	bf00      	nop
 8005b7e:	e7fe      	b.n	8005b7e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	6978      	ldr	r0, [r7, #20]
 8005b86:	4798      	blx	r3
}
 8005b88:	bf00      	nop
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	200016b8 	.word	0x200016b8

08005b94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b9c:	f107 0308 	add.w	r3, r7, #8
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 f857 	bl	8005c54 <prvGetNextExpireTime>
 8005ba6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4619      	mov	r1, r3
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f803 	bl	8005bb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005bb2:	f000 f8d5 	bl	8005d60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bb6:	e7f1      	b.n	8005b9c <prvTimerTask+0x8>

08005bb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005bc2:	f7ff f863 	bl	8004c8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bc6:	f107 0308 	add.w	r3, r7, #8
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f866 	bl	8005c9c <prvSampleTimeNow>
 8005bd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d130      	bne.n	8005c3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10a      	bne.n	8005bf4 <prvProcessTimerOrBlockTask+0x3c>
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d806      	bhi.n	8005bf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005be6:	f7ff f85f 	bl	8004ca8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff ff91 	bl	8005b14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005bf2:	e024      	b.n	8005c3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d008      	beq.n	8005c0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005bfa:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <prvProcessTimerOrBlockTask+0x90>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bf0c      	ite	eq
 8005c04:	2301      	moveq	r3, #1
 8005c06:	2300      	movne	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <prvProcessTimerOrBlockTask+0x94>)
 8005c0e:	6818      	ldr	r0, [r3, #0]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	f7fe fdb7 	bl	800478c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c1e:	f7ff f843 	bl	8004ca8 <xTaskResumeAll>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c28:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <prvProcessTimerOrBlockTask+0x98>)
 8005c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	f3bf 8f6f 	isb	sy
}
 8005c38:	e001      	b.n	8005c3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c3a:	f7ff f835 	bl	8004ca8 <xTaskResumeAll>
}
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	200016bc 	.word	0x200016bc
 8005c4c:	200016c0 	.word	0x200016c0
 8005c50:	e000ed04 	.word	0xe000ed04

08005c54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c5c:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <prvGetNextExpireTime+0x44>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	bf0c      	ite	eq
 8005c66:	2301      	moveq	r3, #1
 8005c68:	2300      	movne	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d105      	bne.n	8005c86 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c7a:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <prvGetNextExpireTime+0x44>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e001      	b.n	8005c8a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc80      	pop	{r7}
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	200016b8 	.word	0x200016b8

08005c9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ca4:	f7ff f89e 	bl	8004de4 <xTaskGetTickCount>
 8005ca8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <prvSampleTimeNow+0x3c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d205      	bcs.n	8005cc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005cb4:	f000 f908 	bl	8005ec8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e002      	b.n	8005cc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005cc6:	4a04      	ldr	r2, [pc, #16]	; (8005cd8 <prvSampleTimeNow+0x3c>)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	200016c8 	.word	0x200016c8

08005cdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d812      	bhi.n	8005d28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	1ad2      	subs	r2, r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d302      	bcc.n	8005d16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e01b      	b.n	8005d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d16:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <prvInsertTimerInActiveList+0x7c>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4610      	mov	r0, r2
 8005d22:	f7fd ff63 	bl	8003bec <vListInsert>
 8005d26:	e012      	b.n	8005d4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d206      	bcs.n	8005d3e <prvInsertTimerInActiveList+0x62>
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d302      	bcc.n	8005d3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	e007      	b.n	8005d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d3e:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <prvInsertTimerInActiveList+0x80>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3304      	adds	r3, #4
 8005d46:	4619      	mov	r1, r3
 8005d48:	4610      	mov	r0, r2
 8005d4a:	f7fd ff4f 	bl	8003bec <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d4e:	697b      	ldr	r3, [r7, #20]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	200016bc 	.word	0x200016bc
 8005d5c:	200016b8 	.word	0x200016b8

08005d60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08e      	sub	sp, #56	; 0x38
 8005d64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d66:	e09d      	b.n	8005ea4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	da18      	bge.n	8005da0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	3304      	adds	r3, #4
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10a      	bne.n	8005d90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	61fb      	str	r3, [r7, #28]
}
 8005d8c:	bf00      	nop
 8005d8e:	e7fe      	b.n	8005d8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d96:	6850      	ldr	r0, [r2, #4]
 8005d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d9a:	6892      	ldr	r2, [r2, #8]
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	db7e      	blt.n	8005ea4 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	3304      	adds	r3, #4
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fd ff50 	bl	8003c5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff ff6c 	bl	8005c9c <prvSampleTimeNow>
 8005dc4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b09      	cmp	r3, #9
 8005dca:	d86a      	bhi.n	8005ea2 <prvProcessReceivedCommands+0x142>
 8005dcc:	a201      	add	r2, pc, #4	; (adr r2, 8005dd4 <prvProcessReceivedCommands+0x74>)
 8005dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd2:	bf00      	nop
 8005dd4:	08005dfd 	.word	0x08005dfd
 8005dd8:	08005dfd 	.word	0x08005dfd
 8005ddc:	08005dfd 	.word	0x08005dfd
 8005de0:	08005ea5 	.word	0x08005ea5
 8005de4:	08005e59 	.word	0x08005e59
 8005de8:	08005e91 	.word	0x08005e91
 8005dec:	08005dfd 	.word	0x08005dfd
 8005df0:	08005dfd 	.word	0x08005dfd
 8005df4:	08005ea5 	.word	0x08005ea5
 8005df8:	08005e59 	.word	0x08005e59
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	18d1      	adds	r1, r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e0a:	f7ff ff67 	bl	8005cdc <prvInsertTimerInActiveList>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d047      	beq.n	8005ea4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e1a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d13f      	bne.n	8005ea4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	441a      	add	r2, r3
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	2300      	movs	r3, #0
 8005e32:	2100      	movs	r1, #0
 8005e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e36:	f7ff fe1f 	bl	8005a78 <xTimerGenericCommand>
 8005e3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d130      	bne.n	8005ea4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	61bb      	str	r3, [r7, #24]
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10a      	bne.n	8005e7c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	617b      	str	r3, [r7, #20]
}
 8005e78:	bf00      	nop
 8005e7a:	e7fe      	b.n	8005e7a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7e:	699a      	ldr	r2, [r3, #24]
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	18d1      	adds	r1, r2, r3
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e8a:	f7ff ff27 	bl	8005cdc <prvInsertTimerInActiveList>
					break;
 8005e8e:	e009      	b.n	8005ea4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e9c:	f000 fb6a 	bl	8006574 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ea0:	e000      	b.n	8005ea4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8005ea2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ea4:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <prvProcessReceivedCommands+0x164>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	1d39      	adds	r1, r7, #4
 8005eaa:	2200      	movs	r2, #0
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fe f9d5 	bl	800425c <xQueueReceive>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f47f af57 	bne.w	8005d68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005eba:	bf00      	nop
 8005ebc:	bf00      	nop
 8005ebe:	3730      	adds	r7, #48	; 0x30
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	200016c0 	.word	0x200016c0

08005ec8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ece:	e045      	b.n	8005f5c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ed0:	4b2c      	ldr	r3, [pc, #176]	; (8005f84 <prvSwitchTimerLists+0xbc>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005eda:	4b2a      	ldr	r3, [pc, #168]	; (8005f84 <prvSwitchTimerLists+0xbc>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fd feb7 	bl	8003c5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d12e      	bne.n	8005f5c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4413      	add	r3, r2
 8005f06:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d90e      	bls.n	8005f2e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f1c:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <prvSwitchTimerLists+0xbc>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4619      	mov	r1, r3
 8005f26:	4610      	mov	r0, r2
 8005f28:	f7fd fe60 	bl	8003bec <vListInsert>
 8005f2c:	e016      	b.n	8005f5c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	2300      	movs	r3, #0
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	2100      	movs	r1, #0
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7ff fd9d 	bl	8005a78 <xTimerGenericCommand>
 8005f3e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <prvSwitchTimerLists+0x94>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	603b      	str	r3, [r7, #0]
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <prvSwitchTimerLists+0xbc>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1b4      	bne.n	8005ed0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f66:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <prvSwitchTimerLists+0xbc>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f6c:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <prvSwitchTimerLists+0xc0>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a04      	ldr	r2, [pc, #16]	; (8005f84 <prvSwitchTimerLists+0xbc>)
 8005f72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f74:	4a04      	ldr	r2, [pc, #16]	; (8005f88 <prvSwitchTimerLists+0xc0>)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	6013      	str	r3, [r2, #0]
}
 8005f7a:	bf00      	nop
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	200016b8 	.word	0x200016b8
 8005f88:	200016bc 	.word	0x200016bc

08005f8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f92:	f000 f92b 	bl	80061ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f96:	4b15      	ldr	r3, [pc, #84]	; (8005fec <prvCheckForValidListAndQueue+0x60>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d120      	bne.n	8005fe0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f9e:	4814      	ldr	r0, [pc, #80]	; (8005ff0 <prvCheckForValidListAndQueue+0x64>)
 8005fa0:	f7fd fdd6 	bl	8003b50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005fa4:	4813      	ldr	r0, [pc, #76]	; (8005ff4 <prvCheckForValidListAndQueue+0x68>)
 8005fa6:	f7fd fdd3 	bl	8003b50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005faa:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <prvCheckForValidListAndQueue+0x6c>)
 8005fac:	4a10      	ldr	r2, [pc, #64]	; (8005ff0 <prvCheckForValidListAndQueue+0x64>)
 8005fae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005fb0:	4b12      	ldr	r3, [pc, #72]	; (8005ffc <prvCheckForValidListAndQueue+0x70>)
 8005fb2:	4a10      	ldr	r2, [pc, #64]	; (8005ff4 <prvCheckForValidListAndQueue+0x68>)
 8005fb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	4b11      	ldr	r3, [pc, #68]	; (8006000 <prvCheckForValidListAndQueue+0x74>)
 8005fbc:	4a11      	ldr	r2, [pc, #68]	; (8006004 <prvCheckForValidListAndQueue+0x78>)
 8005fbe:	2110      	movs	r1, #16
 8005fc0:	200a      	movs	r0, #10
 8005fc2:	f7fd fedd 	bl	8003d80 <xQueueGenericCreateStatic>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	4a08      	ldr	r2, [pc, #32]	; (8005fec <prvCheckForValidListAndQueue+0x60>)
 8005fca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005fcc:	4b07      	ldr	r3, [pc, #28]	; (8005fec <prvCheckForValidListAndQueue+0x60>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <prvCheckForValidListAndQueue+0x60>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	490b      	ldr	r1, [pc, #44]	; (8006008 <prvCheckForValidListAndQueue+0x7c>)
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe fbae 	bl	800473c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fe0:	f000 f934 	bl	800624c <vPortExitCritical>
}
 8005fe4:	bf00      	nop
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	200016c0 	.word	0x200016c0
 8005ff0:	20001690 	.word	0x20001690
 8005ff4:	200016a4 	.word	0x200016a4
 8005ff8:	200016b8 	.word	0x200016b8
 8005ffc:	200016bc 	.word	0x200016bc
 8006000:	2000176c 	.word	0x2000176c
 8006004:	200016cc 	.word	0x200016cc
 8006008:	08006a50 	.word	0x08006a50

0800600c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3b04      	subs	r3, #4
 800601c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3b04      	subs	r3, #4
 800602a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f023 0201 	bic.w	r2, r3, #1
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3b04      	subs	r3, #4
 800603a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800603c:	4a08      	ldr	r2, [pc, #32]	; (8006060 <pxPortInitialiseStack+0x54>)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3b14      	subs	r3, #20
 8006046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3b20      	subs	r3, #32
 8006052:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006054:	68fb      	ldr	r3, [r7, #12]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr
 8006060:	08006065 	.word	0x08006065

08006064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800606a:	2300      	movs	r3, #0
 800606c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800606e:	4b12      	ldr	r3, [pc, #72]	; (80060b8 <prvTaskExitError+0x54>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006076:	d00a      	beq.n	800608e <prvTaskExitError+0x2a>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	60fb      	str	r3, [r7, #12]
}
 800608a:	bf00      	nop
 800608c:	e7fe      	b.n	800608c <prvTaskExitError+0x28>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60bb      	str	r3, [r7, #8]
}
 80060a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060a2:	bf00      	nop
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0fc      	beq.n	80060a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060aa:	bf00      	nop
 80060ac:	bf00      	nop
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	2000000c 	.word	0x2000000c
 80060bc:	00000000 	.word	0x00000000

080060c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060c0:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <pxCurrentTCBConst2>)
 80060c2:	6819      	ldr	r1, [r3, #0]
 80060c4:	6808      	ldr	r0, [r1, #0]
 80060c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060ca:	f380 8809 	msr	PSP, r0
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f04f 0000 	mov.w	r0, #0
 80060d6:	f380 8811 	msr	BASEPRI, r0
 80060da:	f04e 0e0d 	orr.w	lr, lr, #13
 80060de:	4770      	bx	lr

080060e0 <pxCurrentTCBConst2>:
 80060e0:	20001190 	.word	0x20001190
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop

080060e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80060e8:	4806      	ldr	r0, [pc, #24]	; (8006104 <prvPortStartFirstTask+0x1c>)
 80060ea:	6800      	ldr	r0, [r0, #0]
 80060ec:	6800      	ldr	r0, [r0, #0]
 80060ee:	f380 8808 	msr	MSP, r0
 80060f2:	b662      	cpsie	i
 80060f4:	b661      	cpsie	f
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	df00      	svc	0
 8006100:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006102:	bf00      	nop
 8006104:	e000ed08 	.word	0xe000ed08

08006108 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800610e:	4b32      	ldr	r3, [pc, #200]	; (80061d8 <xPortStartScheduler+0xd0>)
 8006110:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	22ff      	movs	r2, #255	; 0xff
 800611e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006130:	b2da      	uxtb	r2, r3
 8006132:	4b2a      	ldr	r3, [pc, #168]	; (80061dc <xPortStartScheduler+0xd4>)
 8006134:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006136:	4b2a      	ldr	r3, [pc, #168]	; (80061e0 <xPortStartScheduler+0xd8>)
 8006138:	2207      	movs	r2, #7
 800613a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800613c:	e009      	b.n	8006152 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800613e:	4b28      	ldr	r3, [pc, #160]	; (80061e0 <xPortStartScheduler+0xd8>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3b01      	subs	r3, #1
 8006144:	4a26      	ldr	r2, [pc, #152]	; (80061e0 <xPortStartScheduler+0xd8>)
 8006146:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	b2db      	uxtb	r3, r3
 8006150:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006152:	78fb      	ldrb	r3, [r7, #3]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615a:	2b80      	cmp	r3, #128	; 0x80
 800615c:	d0ef      	beq.n	800613e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800615e:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <xPortStartScheduler+0xd8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f1c3 0307 	rsb	r3, r3, #7
 8006166:	2b04      	cmp	r3, #4
 8006168:	d00a      	beq.n	8006180 <xPortStartScheduler+0x78>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	60bb      	str	r3, [r7, #8]
}
 800617c:	bf00      	nop
 800617e:	e7fe      	b.n	800617e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006180:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <xPortStartScheduler+0xd8>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	021b      	lsls	r3, r3, #8
 8006186:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <xPortStartScheduler+0xd8>)
 8006188:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800618a:	4b15      	ldr	r3, [pc, #84]	; (80061e0 <xPortStartScheduler+0xd8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006192:	4a13      	ldr	r2, [pc, #76]	; (80061e0 <xPortStartScheduler+0xd8>)
 8006194:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800619e:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <xPortStartScheduler+0xdc>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a10      	ldr	r2, [pc, #64]	; (80061e4 <xPortStartScheduler+0xdc>)
 80061a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061aa:	4b0e      	ldr	r3, [pc, #56]	; (80061e4 <xPortStartScheduler+0xdc>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a0d      	ldr	r2, [pc, #52]	; (80061e4 <xPortStartScheduler+0xdc>)
 80061b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061b6:	f000 f8b9 	bl	800632c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061ba:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <xPortStartScheduler+0xe0>)
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061c0:	f7ff ff92 	bl	80060e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061c4:	f7fe feda 	bl	8004f7c <vTaskSwitchContext>
	prvTaskExitError();
 80061c8:	f7ff ff4c 	bl	8006064 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	e000e400 	.word	0xe000e400
 80061dc:	200017bc 	.word	0x200017bc
 80061e0:	200017c0 	.word	0x200017c0
 80061e4:	e000ed20 	.word	0xe000ed20
 80061e8:	2000000c 	.word	0x2000000c

080061ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	607b      	str	r3, [r7, #4]
}
 8006204:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006206:	4b0f      	ldr	r3, [pc, #60]	; (8006244 <vPortEnterCritical+0x58>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3301      	adds	r3, #1
 800620c:	4a0d      	ldr	r2, [pc, #52]	; (8006244 <vPortEnterCritical+0x58>)
 800620e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006210:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <vPortEnterCritical+0x58>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d10f      	bne.n	8006238 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006218:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <vPortEnterCritical+0x5c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <vPortEnterCritical+0x4c>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	603b      	str	r3, [r7, #0]
}
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <vPortEnterCritical+0x4a>
	}
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	2000000c 	.word	0x2000000c
 8006248:	e000ed04 	.word	0xe000ed04

0800624c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006252:	4b11      	ldr	r3, [pc, #68]	; (8006298 <vPortExitCritical+0x4c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <vPortExitCritical+0x24>
	__asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	607b      	str	r3, [r7, #4]
}
 800626c:	bf00      	nop
 800626e:	e7fe      	b.n	800626e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006270:	4b09      	ldr	r3, [pc, #36]	; (8006298 <vPortExitCritical+0x4c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3b01      	subs	r3, #1
 8006276:	4a08      	ldr	r2, [pc, #32]	; (8006298 <vPortExitCritical+0x4c>)
 8006278:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <vPortExitCritical+0x4c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d105      	bne.n	800628e <vPortExitCritical+0x42>
 8006282:	2300      	movs	r3, #0
 8006284:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	f383 8811 	msr	BASEPRI, r3
}
 800628c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr
 8006298:	2000000c 	.word	0x2000000c
 800629c:	00000000 	.word	0x00000000

080062a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062a0:	f3ef 8009 	mrs	r0, PSP
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <pxCurrentTCBConst>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062b0:	6010      	str	r0, [r2, #0]
 80062b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80062b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062ba:	f380 8811 	msr	BASEPRI, r0
 80062be:	f7fe fe5d 	bl	8004f7c <vTaskSwitchContext>
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8811 	msr	BASEPRI, r0
 80062ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80062ce:	6819      	ldr	r1, [r3, #0]
 80062d0:	6808      	ldr	r0, [r1, #0]
 80062d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062d6:	f380 8809 	msr	PSP, r0
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	4770      	bx	lr

080062e0 <pxCurrentTCBConst>:
 80062e0:	20001190 	.word	0x20001190
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop

080062e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	607b      	str	r3, [r7, #4]
}
 8006300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006302:	f7fe fd7d 	bl	8004e00 <xTaskIncrementTick>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800630c:	4b06      	ldr	r3, [pc, #24]	; (8006328 <SysTick_Handler+0x40>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f383 8811 	msr	BASEPRI, r3
}
 800631e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800632c:	b480      	push	{r7}
 800632e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006330:	4b0a      	ldr	r3, [pc, #40]	; (800635c <vPortSetupTimerInterrupt+0x30>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006336:	4b0a      	ldr	r3, [pc, #40]	; (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800633c:	4b09      	ldr	r3, [pc, #36]	; (8006364 <vPortSetupTimerInterrupt+0x38>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a09      	ldr	r2, [pc, #36]	; (8006368 <vPortSetupTimerInterrupt+0x3c>)
 8006342:	fba2 2303 	umull	r2, r3, r2, r3
 8006346:	099b      	lsrs	r3, r3, #6
 8006348:	4a08      	ldr	r2, [pc, #32]	; (800636c <vPortSetupTimerInterrupt+0x40>)
 800634a:	3b01      	subs	r3, #1
 800634c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800634e:	4b03      	ldr	r3, [pc, #12]	; (800635c <vPortSetupTimerInterrupt+0x30>)
 8006350:	2207      	movs	r2, #7
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr
 800635c:	e000e010 	.word	0xe000e010
 8006360:	e000e018 	.word	0xe000e018
 8006364:	20000000 	.word	0x20000000
 8006368:	10624dd3 	.word	0x10624dd3
 800636c:	e000e014 	.word	0xe000e014

08006370 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006376:	f3ef 8305 	mrs	r3, IPSR
 800637a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b0f      	cmp	r3, #15
 8006380:	d914      	bls.n	80063ac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006382:	4a16      	ldr	r2, [pc, #88]	; (80063dc <vPortValidateInterruptPriority+0x6c>)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800638c:	4b14      	ldr	r3, [pc, #80]	; (80063e0 <vPortValidateInterruptPriority+0x70>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	7afa      	ldrb	r2, [r7, #11]
 8006392:	429a      	cmp	r2, r3
 8006394:	d20a      	bcs.n	80063ac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	607b      	str	r3, [r7, #4]
}
 80063a8:	bf00      	nop
 80063aa:	e7fe      	b.n	80063aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063ac:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <vPortValidateInterruptPriority+0x74>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063b4:	4b0c      	ldr	r3, [pc, #48]	; (80063e8 <vPortValidateInterruptPriority+0x78>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d90a      	bls.n	80063d2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	603b      	str	r3, [r7, #0]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <vPortValidateInterruptPriority+0x60>
	}
 80063d2:	bf00      	nop
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr
 80063dc:	e000e3f0 	.word	0xe000e3f0
 80063e0:	200017bc 	.word	0x200017bc
 80063e4:	e000ed0c 	.word	0xe000ed0c
 80063e8:	200017c0 	.word	0x200017c0

080063ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08a      	sub	sp, #40	; 0x28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063f8:	f7fe fc48 	bl	8004c8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063fc:	4b58      	ldr	r3, [pc, #352]	; (8006560 <pvPortMalloc+0x174>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006404:	f000 f910 	bl	8006628 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006408:	4b56      	ldr	r3, [pc, #344]	; (8006564 <pvPortMalloc+0x178>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4013      	ands	r3, r2
 8006410:	2b00      	cmp	r3, #0
 8006412:	f040 808e 	bne.w	8006532 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01d      	beq.n	8006458 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800641c:	2208      	movs	r2, #8
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4413      	add	r3, r2
 8006422:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	2b00      	cmp	r3, #0
 800642c:	d014      	beq.n	8006458 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f023 0307 	bic.w	r3, r3, #7
 8006434:	3308      	adds	r3, #8
 8006436:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <pvPortMalloc+0x6c>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	617b      	str	r3, [r7, #20]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d069      	beq.n	8006532 <pvPortMalloc+0x146>
 800645e:	4b42      	ldr	r3, [pc, #264]	; (8006568 <pvPortMalloc+0x17c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	429a      	cmp	r2, r3
 8006466:	d864      	bhi.n	8006532 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006468:	4b40      	ldr	r3, [pc, #256]	; (800656c <pvPortMalloc+0x180>)
 800646a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800646c:	4b3f      	ldr	r3, [pc, #252]	; (800656c <pvPortMalloc+0x180>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006472:	e004      	b.n	800647e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	429a      	cmp	r2, r3
 8006486:	d903      	bls.n	8006490 <pvPortMalloc+0xa4>
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1f1      	bne.n	8006474 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006490:	4b33      	ldr	r3, [pc, #204]	; (8006560 <pvPortMalloc+0x174>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006496:	429a      	cmp	r2, r3
 8006498:	d04b      	beq.n	8006532 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2208      	movs	r2, #8
 80064a0:	4413      	add	r3, r2
 80064a2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	1ad2      	subs	r2, r2, r3
 80064b4:	2308      	movs	r3, #8
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d91f      	bls.n	80064fc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4413      	add	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <pvPortMalloc+0xf8>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	613b      	str	r3, [r7, #16]
}
 80064e0:	bf00      	nop
 80064e2:	e7fe      	b.n	80064e2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	1ad2      	subs	r2, r2, r3
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064f6:	69b8      	ldr	r0, [r7, #24]
 80064f8:	f000 f8f8 	bl	80066ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064fc:	4b1a      	ldr	r3, [pc, #104]	; (8006568 <pvPortMalloc+0x17c>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	4a18      	ldr	r2, [pc, #96]	; (8006568 <pvPortMalloc+0x17c>)
 8006508:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800650a:	4b17      	ldr	r3, [pc, #92]	; (8006568 <pvPortMalloc+0x17c>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b18      	ldr	r3, [pc, #96]	; (8006570 <pvPortMalloc+0x184>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d203      	bcs.n	800651e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <pvPortMalloc+0x17c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a15      	ldr	r2, [pc, #84]	; (8006570 <pvPortMalloc+0x184>)
 800651c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	4b10      	ldr	r3, [pc, #64]	; (8006564 <pvPortMalloc+0x178>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	431a      	orrs	r2, r3
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006532:	f7fe fbb9 	bl	8004ca8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <pvPortMalloc+0x16a>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	60fb      	str	r3, [r7, #12]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <pvPortMalloc+0x168>
	return pvReturn;
 8006556:	69fb      	ldr	r3, [r7, #28]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3728      	adds	r7, #40	; 0x28
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20002bcc 	.word	0x20002bcc
 8006564:	20002bd8 	.word	0x20002bd8
 8006568:	20002bd0 	.word	0x20002bd0
 800656c:	20002bc4 	.word	0x20002bc4
 8006570:	20002bd4 	.word	0x20002bd4

08006574 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d048      	beq.n	8006618 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006586:	2308      	movs	r3, #8
 8006588:	425b      	negs	r3, r3
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4413      	add	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	4b21      	ldr	r3, [pc, #132]	; (8006620 <vPortFree+0xac>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4013      	ands	r3, r2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <vPortFree+0x44>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	60fb      	str	r3, [r7, #12]
}
 80065b4:	bf00      	nop
 80065b6:	e7fe      	b.n	80065b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <vPortFree+0x62>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	60bb      	str	r3, [r7, #8]
}
 80065d2:	bf00      	nop
 80065d4:	e7fe      	b.n	80065d4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	4b11      	ldr	r3, [pc, #68]	; (8006620 <vPortFree+0xac>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4013      	ands	r3, r2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d019      	beq.n	8006618 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d115      	bne.n	8006618 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <vPortFree+0xac>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	43db      	mvns	r3, r3
 80065f6:	401a      	ands	r2, r3
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065fc:	f7fe fb46 	bl	8004c8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	4b07      	ldr	r3, [pc, #28]	; (8006624 <vPortFree+0xb0>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4413      	add	r3, r2
 800660a:	4a06      	ldr	r2, [pc, #24]	; (8006624 <vPortFree+0xb0>)
 800660c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800660e:	6938      	ldr	r0, [r7, #16]
 8006610:	f000 f86c 	bl	80066ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006614:	f7fe fb48 	bl	8004ca8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006618:	bf00      	nop
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	20002bd8 	.word	0x20002bd8
 8006624:	20002bd0 	.word	0x20002bd0

08006628 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800662e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006632:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006634:	4b27      	ldr	r3, [pc, #156]	; (80066d4 <prvHeapInit+0xac>)
 8006636:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00c      	beq.n	800665c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3307      	adds	r3, #7
 8006646:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0307 	bic.w	r3, r3, #7
 800664e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	4a1f      	ldr	r2, [pc, #124]	; (80066d4 <prvHeapInit+0xac>)
 8006658:	4413      	add	r3, r2
 800665a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006660:	4a1d      	ldr	r2, [pc, #116]	; (80066d8 <prvHeapInit+0xb0>)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006666:	4b1c      	ldr	r3, [pc, #112]	; (80066d8 <prvHeapInit+0xb0>)
 8006668:	2200      	movs	r2, #0
 800666a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	4413      	add	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006674:	2208      	movs	r2, #8
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	1a9b      	subs	r3, r3, r2
 800667a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0307 	bic.w	r3, r3, #7
 8006682:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4a15      	ldr	r2, [pc, #84]	; (80066dc <prvHeapInit+0xb4>)
 8006688:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800668a:	4b14      	ldr	r3, [pc, #80]	; (80066dc <prvHeapInit+0xb4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2200      	movs	r2, #0
 8006690:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006692:	4b12      	ldr	r3, [pc, #72]	; (80066dc <prvHeapInit+0xb4>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	1ad2      	subs	r2, r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066a8:	4b0c      	ldr	r3, [pc, #48]	; (80066dc <prvHeapInit+0xb4>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	4a0a      	ldr	r2, [pc, #40]	; (80066e0 <prvHeapInit+0xb8>)
 80066b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	4a09      	ldr	r2, [pc, #36]	; (80066e4 <prvHeapInit+0xbc>)
 80066be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066c0:	4b09      	ldr	r3, [pc, #36]	; (80066e8 <prvHeapInit+0xc0>)
 80066c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066c6:	601a      	str	r2, [r3, #0]
}
 80066c8:	bf00      	nop
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	200017c4 	.word	0x200017c4
 80066d8:	20002bc4 	.word	0x20002bc4
 80066dc:	20002bcc 	.word	0x20002bcc
 80066e0:	20002bd4 	.word	0x20002bd4
 80066e4:	20002bd0 	.word	0x20002bd0
 80066e8:	20002bd8 	.word	0x20002bd8

080066ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066f4:	4b27      	ldr	r3, [pc, #156]	; (8006794 <prvInsertBlockIntoFreeList+0xa8>)
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	e002      	b.n	8006700 <prvInsertBlockIntoFreeList+0x14>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	429a      	cmp	r2, r3
 8006708:	d8f7      	bhi.n	80066fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	4413      	add	r3, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	429a      	cmp	r2, r3
 800671a:	d108      	bne.n	800672e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	441a      	add	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	441a      	add	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d118      	bne.n	8006774 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4b14      	ldr	r3, [pc, #80]	; (8006798 <prvInsertBlockIntoFreeList+0xac>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d00d      	beq.n	800676a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	441a      	add	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	e008      	b.n	800677c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800676a:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <prvInsertBlockIntoFreeList+0xac>)
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	e003      	b.n	800677c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	429a      	cmp	r2, r3
 8006782:	d002      	beq.n	800678a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800678a:	bf00      	nop
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	bc80      	pop	{r7}
 8006792:	4770      	bx	lr
 8006794:	20002bc4 	.word	0x20002bc4
 8006798:	20002bcc 	.word	0x20002bcc

0800679c <__libc_init_array>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	2600      	movs	r6, #0
 80067a0:	4d0c      	ldr	r5, [pc, #48]	; (80067d4 <__libc_init_array+0x38>)
 80067a2:	4c0d      	ldr	r4, [pc, #52]	; (80067d8 <__libc_init_array+0x3c>)
 80067a4:	1b64      	subs	r4, r4, r5
 80067a6:	10a4      	asrs	r4, r4, #2
 80067a8:	42a6      	cmp	r6, r4
 80067aa:	d109      	bne.n	80067c0 <__libc_init_array+0x24>
 80067ac:	f000 f8e4 	bl	8006978 <_init>
 80067b0:	2600      	movs	r6, #0
 80067b2:	4d0a      	ldr	r5, [pc, #40]	; (80067dc <__libc_init_array+0x40>)
 80067b4:	4c0a      	ldr	r4, [pc, #40]	; (80067e0 <__libc_init_array+0x44>)
 80067b6:	1b64      	subs	r4, r4, r5
 80067b8:	10a4      	asrs	r4, r4, #2
 80067ba:	42a6      	cmp	r6, r4
 80067bc:	d105      	bne.n	80067ca <__libc_init_array+0x2e>
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c4:	4798      	blx	r3
 80067c6:	3601      	adds	r6, #1
 80067c8:	e7ee      	b.n	80067a8 <__libc_init_array+0xc>
 80067ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ce:	4798      	blx	r3
 80067d0:	3601      	adds	r6, #1
 80067d2:	e7f2      	b.n	80067ba <__libc_init_array+0x1e>
 80067d4:	08006ad0 	.word	0x08006ad0
 80067d8:	08006ad0 	.word	0x08006ad0
 80067dc:	08006ad0 	.word	0x08006ad0
 80067e0:	08006ad4 	.word	0x08006ad4

080067e4 <memcpy>:
 80067e4:	440a      	add	r2, r1
 80067e6:	4291      	cmp	r1, r2
 80067e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80067ec:	d100      	bne.n	80067f0 <memcpy+0xc>
 80067ee:	4770      	bx	lr
 80067f0:	b510      	push	{r4, lr}
 80067f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067f6:	4291      	cmp	r1, r2
 80067f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067fc:	d1f9      	bne.n	80067f2 <memcpy+0xe>
 80067fe:	bd10      	pop	{r4, pc}

08006800 <memset>:
 8006800:	4603      	mov	r3, r0
 8006802:	4402      	add	r2, r0
 8006804:	4293      	cmp	r3, r2
 8006806:	d100      	bne.n	800680a <memset+0xa>
 8006808:	4770      	bx	lr
 800680a:	f803 1b01 	strb.w	r1, [r3], #1
 800680e:	e7f9      	b.n	8006804 <memset+0x4>

08006810 <cleanup_glue>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	460c      	mov	r4, r1
 8006814:	6809      	ldr	r1, [r1, #0]
 8006816:	4605      	mov	r5, r0
 8006818:	b109      	cbz	r1, 800681e <cleanup_glue+0xe>
 800681a:	f7ff fff9 	bl	8006810 <cleanup_glue>
 800681e:	4621      	mov	r1, r4
 8006820:	4628      	mov	r0, r5
 8006822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006826:	f000 b85d 	b.w	80068e4 <_free_r>
	...

0800682c <_reclaim_reent>:
 800682c:	4b2c      	ldr	r3, [pc, #176]	; (80068e0 <_reclaim_reent+0xb4>)
 800682e:	b570      	push	{r4, r5, r6, lr}
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4604      	mov	r4, r0
 8006834:	4283      	cmp	r3, r0
 8006836:	d051      	beq.n	80068dc <_reclaim_reent+0xb0>
 8006838:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800683a:	b143      	cbz	r3, 800684e <_reclaim_reent+0x22>
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d14a      	bne.n	80068d8 <_reclaim_reent+0xac>
 8006842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006844:	6819      	ldr	r1, [r3, #0]
 8006846:	b111      	cbz	r1, 800684e <_reclaim_reent+0x22>
 8006848:	4620      	mov	r0, r4
 800684a:	f000 f84b 	bl	80068e4 <_free_r>
 800684e:	6961      	ldr	r1, [r4, #20]
 8006850:	b111      	cbz	r1, 8006858 <_reclaim_reent+0x2c>
 8006852:	4620      	mov	r0, r4
 8006854:	f000 f846 	bl	80068e4 <_free_r>
 8006858:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800685a:	b111      	cbz	r1, 8006862 <_reclaim_reent+0x36>
 800685c:	4620      	mov	r0, r4
 800685e:	f000 f841 	bl	80068e4 <_free_r>
 8006862:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006864:	b111      	cbz	r1, 800686c <_reclaim_reent+0x40>
 8006866:	4620      	mov	r0, r4
 8006868:	f000 f83c 	bl	80068e4 <_free_r>
 800686c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800686e:	b111      	cbz	r1, 8006876 <_reclaim_reent+0x4a>
 8006870:	4620      	mov	r0, r4
 8006872:	f000 f837 	bl	80068e4 <_free_r>
 8006876:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006878:	b111      	cbz	r1, 8006880 <_reclaim_reent+0x54>
 800687a:	4620      	mov	r0, r4
 800687c:	f000 f832 	bl	80068e4 <_free_r>
 8006880:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006882:	b111      	cbz	r1, 800688a <_reclaim_reent+0x5e>
 8006884:	4620      	mov	r0, r4
 8006886:	f000 f82d 	bl	80068e4 <_free_r>
 800688a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800688c:	b111      	cbz	r1, 8006894 <_reclaim_reent+0x68>
 800688e:	4620      	mov	r0, r4
 8006890:	f000 f828 	bl	80068e4 <_free_r>
 8006894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006896:	b111      	cbz	r1, 800689e <_reclaim_reent+0x72>
 8006898:	4620      	mov	r0, r4
 800689a:	f000 f823 	bl	80068e4 <_free_r>
 800689e:	69a3      	ldr	r3, [r4, #24]
 80068a0:	b1e3      	cbz	r3, 80068dc <_reclaim_reent+0xb0>
 80068a2:	4620      	mov	r0, r4
 80068a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80068a6:	4798      	blx	r3
 80068a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80068aa:	b1b9      	cbz	r1, 80068dc <_reclaim_reent+0xb0>
 80068ac:	4620      	mov	r0, r4
 80068ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80068b2:	f7ff bfad 	b.w	8006810 <cleanup_glue>
 80068b6:	5949      	ldr	r1, [r1, r5]
 80068b8:	b941      	cbnz	r1, 80068cc <_reclaim_reent+0xa0>
 80068ba:	3504      	adds	r5, #4
 80068bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068be:	2d80      	cmp	r5, #128	; 0x80
 80068c0:	68d9      	ldr	r1, [r3, #12]
 80068c2:	d1f8      	bne.n	80068b6 <_reclaim_reent+0x8a>
 80068c4:	4620      	mov	r0, r4
 80068c6:	f000 f80d 	bl	80068e4 <_free_r>
 80068ca:	e7ba      	b.n	8006842 <_reclaim_reent+0x16>
 80068cc:	680e      	ldr	r6, [r1, #0]
 80068ce:	4620      	mov	r0, r4
 80068d0:	f000 f808 	bl	80068e4 <_free_r>
 80068d4:	4631      	mov	r1, r6
 80068d6:	e7ef      	b.n	80068b8 <_reclaim_reent+0x8c>
 80068d8:	2500      	movs	r5, #0
 80068da:	e7ef      	b.n	80068bc <_reclaim_reent+0x90>
 80068dc:	bd70      	pop	{r4, r5, r6, pc}
 80068de:	bf00      	nop
 80068e0:	20000010 	.word	0x20000010

080068e4 <_free_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	4605      	mov	r5, r0
 80068e8:	2900      	cmp	r1, #0
 80068ea:	d040      	beq.n	800696e <_free_r+0x8a>
 80068ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068f0:	1f0c      	subs	r4, r1, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	bfb8      	it	lt
 80068f6:	18e4      	addlt	r4, r4, r3
 80068f8:	f000 f83c 	bl	8006974 <__malloc_lock>
 80068fc:	4a1c      	ldr	r2, [pc, #112]	; (8006970 <_free_r+0x8c>)
 80068fe:	6813      	ldr	r3, [r2, #0]
 8006900:	b933      	cbnz	r3, 8006910 <_free_r+0x2c>
 8006902:	6063      	str	r3, [r4, #4]
 8006904:	6014      	str	r4, [r2, #0]
 8006906:	4628      	mov	r0, r5
 8006908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800690c:	f000 b833 	b.w	8006976 <__malloc_unlock>
 8006910:	42a3      	cmp	r3, r4
 8006912:	d908      	bls.n	8006926 <_free_r+0x42>
 8006914:	6820      	ldr	r0, [r4, #0]
 8006916:	1821      	adds	r1, r4, r0
 8006918:	428b      	cmp	r3, r1
 800691a:	bf01      	itttt	eq
 800691c:	6819      	ldreq	r1, [r3, #0]
 800691e:	685b      	ldreq	r3, [r3, #4]
 8006920:	1809      	addeq	r1, r1, r0
 8006922:	6021      	streq	r1, [r4, #0]
 8006924:	e7ed      	b.n	8006902 <_free_r+0x1e>
 8006926:	461a      	mov	r2, r3
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	b10b      	cbz	r3, 8006930 <_free_r+0x4c>
 800692c:	42a3      	cmp	r3, r4
 800692e:	d9fa      	bls.n	8006926 <_free_r+0x42>
 8006930:	6811      	ldr	r1, [r2, #0]
 8006932:	1850      	adds	r0, r2, r1
 8006934:	42a0      	cmp	r0, r4
 8006936:	d10b      	bne.n	8006950 <_free_r+0x6c>
 8006938:	6820      	ldr	r0, [r4, #0]
 800693a:	4401      	add	r1, r0
 800693c:	1850      	adds	r0, r2, r1
 800693e:	4283      	cmp	r3, r0
 8006940:	6011      	str	r1, [r2, #0]
 8006942:	d1e0      	bne.n	8006906 <_free_r+0x22>
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	4408      	add	r0, r1
 800694a:	6010      	str	r0, [r2, #0]
 800694c:	6053      	str	r3, [r2, #4]
 800694e:	e7da      	b.n	8006906 <_free_r+0x22>
 8006950:	d902      	bls.n	8006958 <_free_r+0x74>
 8006952:	230c      	movs	r3, #12
 8006954:	602b      	str	r3, [r5, #0]
 8006956:	e7d6      	b.n	8006906 <_free_r+0x22>
 8006958:	6820      	ldr	r0, [r4, #0]
 800695a:	1821      	adds	r1, r4, r0
 800695c:	428b      	cmp	r3, r1
 800695e:	bf01      	itttt	eq
 8006960:	6819      	ldreq	r1, [r3, #0]
 8006962:	685b      	ldreq	r3, [r3, #4]
 8006964:	1809      	addeq	r1, r1, r0
 8006966:	6021      	streq	r1, [r4, #0]
 8006968:	6063      	str	r3, [r4, #4]
 800696a:	6054      	str	r4, [r2, #4]
 800696c:	e7cb      	b.n	8006906 <_free_r+0x22>
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	20002bdc 	.word	0x20002bdc

08006974 <__malloc_lock>:
 8006974:	4770      	bx	lr

08006976 <__malloc_unlock>:
 8006976:	4770      	bx	lr

08006978 <_init>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	bf00      	nop
 800697c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800697e:	bc08      	pop	{r3}
 8006980:	469e      	mov	lr, r3
 8006982:	4770      	bx	lr

08006984 <_fini>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	bf00      	nop
 8006988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698a:	bc08      	pop	{r3}
 800698c:	469e      	mov	lr, r3
 800698e:	4770      	bx	lr
